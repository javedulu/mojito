
#line 1 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
#include <stddef.h>
#include <string>
#include <utility>
#include "lexer.h"
#include "lexeme.h"

// NOTE : if the lemon-parser is properly done then all the #define in lemon-parser.h should be equal
//        to total no of tokens
//        lemon-parser.h is generated by lemon based on whats used in parser , so if all the cases are
//              considered then there should be no token not # defined failsafe

#line 12 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"

#line 17 "lexer.cc"
static const char _umodLexer_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	65, 1, 66, 1, 67, 1, 68, 1, 
	69, 1, 70, 1, 71, 1, 72, 1, 
	73, 1, 74, 1, 75, 1, 76, 1, 
	77, 1, 78, 1, 79, 1, 80, 1, 
	81, 1, 82, 1, 83, 1, 84, 1, 
	85, 1, 86, 1, 87, 1, 88, 1, 
	89, 1, 90, 1, 91, 1, 92, 1, 
	93, 1, 94, 1, 95, 1, 96, 1, 
	97, 1, 98, 1, 99, 1, 100, 1, 
	101, 1, 102, 1, 103, 1, 104, 1, 
	105, 2, 2, 3, 2, 2, 4, 2, 
	2, 5, 2, 2, 6, 2, 2, 7, 
	2, 2, 8, 2, 2, 9, 2, 2, 
	10, 2, 2, 11, 2, 2, 12, 2, 
	2, 13, 2, 2, 14, 2, 2, 15, 
	2, 2, 16, 2, 2, 17, 2, 2, 
	18, 2, 2, 19, 2, 2, 20, 2, 
	2, 21, 2, 2, 22, 2, 2, 23, 
	2, 2, 24, 2, 2, 25, 2, 2, 
	26, 2, 2, 27, 2, 2, 28, 2, 
	2, 29, 2, 2, 30, 2, 2, 31, 
	2, 2, 32, 2, 2, 33, 2, 2, 
	34, 2, 2, 35, 2, 2, 36, 2, 
	2, 37, 2, 2, 38, 2, 2, 39, 
	2, 2, 40, 2, 2, 41, 2, 2, 
	42, 2, 2, 43, 2, 2, 44, 2, 
	2, 45, 2, 2, 46, 2, 2, 47, 
	2, 2, 48, 2, 2, 49, 2, 2, 
	50, 2, 2, 51, 2, 2, 52, 2, 
	2, 53, 2, 2, 54, 2, 2, 55, 
	2, 2, 56, 2, 2, 57, 2, 2, 
	58, 2, 2, 59, 2, 2, 60, 2, 
	2, 61, 2, 2, 62, 2, 2, 63, 
	2, 2, 64
};

static const short _umodLexer_key_offsets[] = {
	0, 2, 4, 6, 8, 10, 14, 16, 
	18, 19, 20, 21, 22, 23, 24, 25, 
	26, 27, 28, 29, 30, 31, 32, 33, 
	81, 83, 85, 93, 95, 98, 102, 104, 
	111, 116, 117, 119, 120, 121, 131, 140, 
	149, 158, 167, 176, 185, 194, 204, 213, 
	222, 231, 240, 249, 258, 267, 277, 286, 
	295, 304, 313, 322, 331, 341, 350, 359, 
	368, 377, 387, 396, 405, 414, 423, 432, 
	441, 451, 460, 469, 478, 487, 496, 505, 
	514, 523, 532, 542, 551, 560, 569, 578, 
	587, 596, 605, 618, 627, 636, 645, 654, 
	664, 673, 682, 691, 700, 711, 720, 729, 
	738, 747, 756, 765, 774, 783, 792, 801, 
	810, 819, 828, 837, 846, 855, 864, 873, 
	882, 891, 900, 909, 918, 927, 936, 945, 
	955, 964, 973, 982, 991, 1000, 1009, 1018, 
	1027, 1037, 1046, 1055, 1064, 1073, 1082, 1095, 
	1104, 1113, 1122, 1131, 1140, 1149, 1158, 1167, 
	1176, 1185, 1194, 1203, 1212, 1221, 1230, 1241, 
	1250, 1260, 1269, 1278, 1287, 1296, 1307, 1316, 
	1325, 1334, 1343, 1352, 1361, 1370, 1379, 1388, 
	1397, 1406, 1415, 1424, 1433, 1442, 1451, 1460, 
	1469, 1480, 1489, 1498, 1507, 1516, 1525, 1534, 
	1543, 1553, 1562, 1571, 1580, 1591, 1601, 1610, 
	1619, 1628, 1637, 1647, 1656, 1665, 1674, 1683, 
	1692, 1701, 1710, 1719, 1728, 1737, 1746, 1755, 
	1764, 1773, 1782, 1792, 1801, 1810, 1819, 1828, 
	1837, 1849, 1858, 1867, 1876, 1885, 1894, 1903, 
	1912, 1921, 1930, 1939, 1948, 1957, 1966, 1975, 
	1984, 1993, 2002, 2011, 2020, 2029, 2038, 2047, 
	2056, 2065, 2076, 2085, 2094, 2103, 2112, 2121, 
	2130, 2140, 2150, 2159, 2168, 2177, 2186, 2195, 
	2204
};

static const char _umodLexer_trans_keys[] = {
	34, 92, 34, 92, 39, 92, 39, 92, 
	48, 57, 43, 45, 48, 57, 48, 57, 
	97, 101, 108, 103, 111, 114, 105, 116, 
	104, 109, 113, 117, 97, 116, 105, 111, 
	110, 9, 10, 13, 32, 34, 36, 39, 
	40, 41, 42, 43, 44, 45, 46, 47, 
	58, 59, 60, 61, 62, 91, 93, 94, 
	95, 97, 98, 99, 100, 101, 102, 105, 
	108, 109, 110, 111, 112, 114, 115, 116, 
	119, 123, 125, 48, 57, 65, 90, 103, 
	122, 9, 32, 34, 92, 36, 95, 48, 
	57, 65, 90, 97, 122, 39, 92, 46, 
	48, 57, 69, 101, 48, 57, 48, 57, 
	42, 43, 45, 47, 94, 48, 57, 46, 
	69, 101, 48, 57, 61, 61, 62, 61, 
	61, 36, 95, 108, 110, 48, 57, 65, 
	90, 97, 122, 36, 95, 103, 48, 57, 
	65, 90, 97, 122, 36, 95, 111, 48, 
	57, 65, 90, 97, 122, 36, 95, 114, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	105, 48, 57, 65, 90, 97, 122, 36, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	36, 95, 104, 48, 57, 65, 90, 97, 
	122, 36, 95, 109, 48, 57, 65, 90, 
	97, 122, 36, 95, 100, 110, 48, 57, 
	65, 90, 97, 122, 36, 95, 111, 48, 
	57, 65, 90, 97, 122, 36, 95, 116, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	97, 48, 57, 65, 90, 98, 122, 36, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	36, 95, 105, 48, 57, 65, 90, 97, 
	122, 36, 95, 111, 48, 57, 65, 90, 
	97, 122, 36, 95, 110, 48, 57, 65, 
	90, 97, 122, 36, 95, 108, 114, 48, 
	57, 65, 90, 97, 122, 36, 95, 111, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	99, 48, 57, 65, 90, 97, 122, 36, 
	95, 107, 48, 57, 65, 90, 97, 122, 
	36, 95, 101, 48, 57, 65, 90, 97, 
	122, 36, 95, 97, 48, 57, 65, 90, 
	98, 122, 36, 95, 107, 48, 57, 65, 
	90, 97, 122, 36, 95, 108, 111, 48, 
	57, 65, 90, 97, 122, 36, 95, 97, 
	48, 57, 65, 90, 98, 122, 36, 95, 
	115, 48, 57, 65, 90, 97, 122, 36, 
	95, 115, 48, 57, 65, 90, 97, 122, 
	36, 95, 110, 48, 57, 65, 90, 97, 
	122, 36, 95, 110, 115, 48, 57, 65, 
	90, 97, 122, 36, 95, 101, 48, 57, 
	65, 90, 97, 122, 36, 95, 99, 48, 
	57, 65, 90, 97, 122, 36, 95, 116, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	111, 48, 57, 65, 90, 97, 122, 36, 
	95, 114, 48, 57, 65, 90, 97, 122, 
	36, 95, 116, 48, 57, 65, 90, 97, 
	122, 36, 95, 97, 114, 48, 57, 65, 
	90, 98, 122, 36, 95, 110, 48, 57, 
	65, 90, 97, 122, 36, 95, 116, 48, 
	57, 65, 90, 97, 122, 36, 95, 97, 
	48, 57, 65, 90, 98, 122, 36, 95, 
	105, 48, 57, 65, 90, 97, 122, 36, 
	95, 110, 48, 57, 65, 90, 97, 122, 
	36, 95, 101, 48, 57, 65, 90, 97, 
	122, 36, 95, 100, 48, 57, 65, 90, 
	97, 122, 36, 95, 98, 48, 57, 65, 
	90, 97, 122, 36, 95, 121, 48, 57, 
	65, 90, 97, 122, 36, 95, 101, 105, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	114, 48, 57, 65, 90, 97, 122, 36, 
	95, 115, 48, 57, 65, 90, 97, 122, 
	36, 95, 99, 48, 57, 65, 90, 97, 
	122, 36, 95, 114, 48, 57, 65, 90, 
	97, 122, 36, 95, 101, 48, 57, 65, 
	90, 97, 122, 36, 95, 116, 48, 57, 
	65, 90, 97, 122, 36, 95, 101, 48, 
	57, 65, 90, 97, 122, 36, 95, 97, 
	108, 110, 113, 120, 48, 57, 65, 90, 
	98, 122, 36, 95, 99, 48, 57, 65, 
	90, 97, 122, 36, 95, 104, 48, 57, 
	65, 90, 97, 122, 36, 95, 115, 48, 
	57, 65, 90, 97, 122, 36, 95, 101, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	105, 119, 48, 57, 65, 90, 97, 122, 
	36, 95, 102, 48, 57, 65, 90, 97, 
	122, 36, 95, 104, 48, 57, 65, 90, 
	97, 122, 36, 95, 101, 48, 57, 65, 
	90, 97, 122, 36, 95, 110, 48, 57, 
	65, 90, 97, 122, 36, 95, 99, 100, 
	117, 48, 57, 65, 90, 97, 122, 36, 
	95, 97, 48, 57, 65, 90, 98, 122, 
	36, 95, 112, 48, 57, 65, 90, 97, 
	122, 36, 95, 115, 48, 57, 65, 90, 
	97, 122, 36, 95, 117, 48, 57, 65, 
	90, 97, 122, 36, 95, 108, 48, 57, 
	65, 90, 97, 122, 36, 95, 97, 48, 
	57, 65, 90, 98, 122, 36, 95, 116, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	101, 48, 57, 65, 90, 97, 122, 36, 
	95, 100, 48, 57, 65, 90, 97, 122, 
	36, 95, 115, 48, 57, 65, 90, 97, 
	122, 36, 95, 117, 48, 57, 65, 90, 
	97, 122, 36, 95, 98, 48, 57, 65, 
	90, 97, 122, 36, 95, 109, 48, 57, 
	65, 90, 97, 122, 36, 95, 101, 48, 
	57, 65, 90, 97, 122, 36, 95, 114, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	97, 48, 57, 65, 90, 98, 122, 36, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	36, 95, 105, 48, 57, 65, 90, 97, 
	122, 36, 95, 111, 48, 57, 65, 90, 
	97, 122, 36, 95, 110, 48, 57, 65, 
	90, 97, 122, 36, 95, 117, 48, 57, 
	65, 90, 97, 122, 36, 95, 97, 48, 
	57, 65, 90, 98, 122, 36, 95, 116, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	105, 48, 57, 65, 90, 97, 122, 36, 
	95, 111, 48, 57, 65, 90, 97, 122, 
	36, 95, 110, 48, 57, 65, 90, 97, 
	122, 36, 95, 112, 116, 48, 57, 65, 
	90, 97, 122, 36, 95, 97, 48, 57, 
	65, 90, 98, 122, 36, 95, 110, 48, 
	57, 65, 90, 97, 122, 36, 95, 100, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	97, 48, 57, 65, 90, 98, 122, 36, 
	95, 98, 48, 57, 65, 90, 97, 122, 
	36, 95, 108, 48, 57, 65, 90, 97, 
	122, 36, 95, 101, 48, 57, 65, 90, 
	97, 122, 36, 95, 101, 48, 57, 65, 
	90, 97, 122, 36, 95, 110, 114, 48, 
	57, 65, 90, 97, 122, 36, 95, 100, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	115, 48, 57, 65, 90, 97, 122, 36, 
	95, 110, 48, 57, 65, 90, 97, 122, 
	36, 95, 97, 48, 57, 65, 90, 98, 
	122, 36, 95, 108, 48, 57, 65, 90, 
	97, 122, 36, 95, 97, 105, 108, 111, 
	117, 48, 57, 65, 90, 98, 122, 36, 
	95, 108, 48, 57, 65, 90, 97, 122, 
	36, 95, 115, 48, 57, 65, 90, 97, 
	122, 36, 95, 101, 48, 57, 65, 90, 
	97, 122, 36, 95, 110, 48, 57, 65, 
	90, 97, 122, 36, 95, 97, 48, 57, 
	65, 90, 98, 122, 36, 95, 108, 48, 
	57, 65, 90, 97, 122, 36, 95, 111, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	119, 48, 57, 65, 90, 97, 122, 36, 
	95, 114, 48, 57, 65, 90, 97, 122, 
	36, 95, 110, 48, 57, 65, 90, 97, 
	122, 36, 95, 99, 48, 57, 65, 90, 
	97, 122, 36, 95, 116, 48, 57, 65, 
	90, 97, 122, 36, 95, 105, 48, 57, 
	65, 90, 97, 122, 36, 95, 111, 48, 
	57, 65, 90, 97, 122, 36, 95, 110, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	102, 109, 110, 48, 57, 65, 90, 97, 
	122, 36, 95, 112, 48, 57, 65, 90, 
	97, 122, 36, 95, 111, 117, 48, 57, 
	65, 90, 97, 122, 36, 95, 114, 48, 
	57, 65, 90, 97, 122, 36, 95, 116, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	114, 48, 57, 65, 90, 97, 122, 36, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	36, 95, 105, 110, 112, 48, 57, 65, 
	90, 97, 122, 36, 95, 116, 48, 57, 
	65, 90, 97, 122, 36, 95, 105, 48, 
	57, 65, 90, 97, 122, 36, 95, 97, 
	48, 57, 65, 90, 98, 122, 36, 95, 
	108, 48, 57, 65, 90, 97, 122, 32, 
	36, 95, 48, 57, 65, 90, 97, 122, 
	36, 95, 101, 48, 57, 65, 90, 97, 
	122, 36, 95, 114, 48, 57, 65, 90, 
	97, 122, 36, 95, 117, 48, 57, 65, 
	90, 97, 122, 36, 95, 116, 48, 57, 
	65, 90, 97, 122, 36, 95, 111, 48, 
	57, 65, 90, 97, 122, 36, 95, 111, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	112, 48, 57, 65, 90, 97, 122, 36, 
	95, 111, 48, 57, 65, 90, 97, 122, 
	36, 95, 100, 48, 57, 65, 90, 97, 
	122, 36, 95, 101, 48, 57, 65, 90, 
	97, 122, 36, 95, 108, 48, 57, 65, 
	90, 97, 122, 36, 95, 111, 48, 57, 
	65, 90, 97, 122, 36, 95, 116, 48, 
	57, 65, 90, 97, 122, 36, 95, 112, 
	114, 117, 48, 57, 65, 90, 97, 122, 
	36, 95, 101, 48, 57, 65, 90, 97, 
	122, 36, 95, 114, 48, 57, 65, 90, 
	97, 122, 36, 95, 97, 48, 57, 65, 
	90, 98, 122, 36, 95, 116, 48, 57, 
	65, 90, 97, 122, 36, 95, 111, 48, 
	57, 65, 90, 97, 122, 36, 95, 114, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	116, 48, 57, 65, 90, 97, 122, 36, 
	95, 101, 112, 48, 57, 65, 90, 97, 
	122, 36, 95, 114, 48, 57, 65, 90, 
	97, 122, 36, 95, 117, 48, 57, 65, 
	90, 97, 122, 36, 95, 116, 48, 57, 
	65, 90, 97, 122, 36, 95, 97, 114, 
	117, 48, 57, 65, 90, 98, 122, 36, 
	95, 99, 114, 48, 57, 65, 90, 97, 
	122, 36, 95, 107, 48, 57, 65, 90, 
	97, 122, 36, 95, 97, 48, 57, 65, 
	90, 98, 122, 36, 95, 103, 48, 57, 
	65, 90, 97, 122, 36, 95, 101, 48, 
	57, 65, 90, 97, 122, 36, 95, 97, 
	116, 48, 57, 65, 90, 98, 122, 36, 
	95, 109, 48, 57, 65, 90, 97, 122, 
	36, 95, 101, 48, 57, 65, 90, 97, 
	122, 36, 95, 116, 48, 57, 65, 90, 
	97, 122, 36, 95, 101, 48, 57, 65, 
	90, 97, 122, 36, 95, 114, 48, 57, 
	65, 90, 97, 122, 36, 95, 105, 48, 
	57, 65, 90, 97, 122, 36, 95, 97, 
	48, 57, 65, 90, 98, 122, 36, 95, 
	108, 48, 57, 65, 90, 97, 122, 36, 
	95, 111, 48, 57, 65, 90, 97, 122, 
	36, 95, 116, 48, 57, 65, 90, 97, 
	122, 36, 95, 101, 48, 57, 65, 90, 
	97, 122, 36, 95, 99, 48, 57, 65, 
	90, 97, 122, 36, 95, 116, 48, 57, 
	65, 90, 97, 122, 36, 95, 101, 48, 
	57, 65, 90, 97, 122, 36, 95, 100, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	98, 114, 48, 57, 65, 90, 97, 122, 
	36, 95, 108, 48, 57, 65, 90, 97, 
	122, 36, 95, 105, 48, 57, 65, 90, 
	97, 122, 36, 95, 99, 48, 57, 65, 
	90, 97, 122, 36, 95, 101, 48, 57, 
	65, 90, 97, 122, 36, 95, 101, 48, 
	57, 65, 90, 97, 122, 36, 95, 99, 
	100, 112, 116, 48, 57, 65, 90, 97, 
	122, 36, 95, 111, 48, 57, 65, 90, 
	97, 122, 36, 95, 114, 48, 57, 65, 
	90, 97, 122, 36, 95, 100, 48, 57, 
	65, 90, 97, 122, 36, 95, 101, 48, 
	57, 65, 90, 97, 122, 36, 95, 99, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	108, 48, 57, 65, 90, 97, 122, 36, 
	95, 97, 48, 57, 65, 90, 98, 122, 
	36, 95, 114, 48, 57, 65, 90, 97, 
	122, 36, 95, 101, 48, 57, 65, 90, 
	97, 122, 36, 95, 108, 48, 57, 65, 
	90, 97, 122, 36, 95, 97, 48, 57, 
	65, 90, 98, 122, 36, 95, 99, 48, 
	57, 65, 90, 97, 122, 36, 95, 97, 
	48, 57, 65, 90, 98, 122, 36, 95, 
	98, 48, 57, 65, 90, 97, 122, 36, 
	95, 108, 48, 57, 65, 90, 97, 122, 
	36, 95, 101, 48, 57, 65, 90, 97, 
	122, 36, 95, 117, 48, 57, 65, 90, 
	97, 122, 36, 95, 114, 48, 57, 65, 
	90, 97, 122, 36, 95, 110, 48, 57, 
	65, 90, 97, 122, 36, 95, 116, 48, 
	57, 65, 90, 97, 122, 36, 95, 114, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	101, 48, 57, 65, 90, 97, 122, 36, 
	95, 97, 48, 57, 65, 90, 98, 122, 
	36, 95, 109, 48, 57, 65, 90, 97, 
	122, 36, 95, 104, 114, 121, 48, 57, 
	65, 90, 97, 122, 36, 95, 101, 48, 
	57, 65, 90, 97, 122, 36, 95, 110, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	117, 48, 57, 65, 90, 97, 122, 36, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	36, 95, 112, 48, 57, 65, 90, 97, 
	122, 36, 95, 101, 48, 57, 65, 90, 
	97, 122, 36, 95, 104, 105, 48, 57, 
	65, 90, 97, 122, 36, 95, 101, 105, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	110, 48, 57, 65, 90, 97, 122, 36, 
	95, 108, 48, 57, 65, 90, 97, 122, 
	36, 95, 101, 48, 57, 65, 90, 97, 
	122, 36, 95, 116, 48, 57, 65, 90, 
	97, 122, 36, 95, 104, 48, 57, 65, 
	90, 97, 122, 36, 95, 105, 48, 57, 
	65, 90, 97, 122, 36, 95, 110, 48, 
	57, 65, 90, 97, 122, 0
};

static const char _umodLexer_single_lengths[] = {
	2, 2, 2, 2, 0, 2, 0, 2, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 42, 
	2, 2, 2, 2, 1, 2, 0, 5, 
	3, 1, 2, 1, 1, 4, 3, 3, 
	3, 3, 3, 3, 3, 4, 3, 3, 
	3, 3, 3, 3, 3, 4, 3, 3, 
	3, 3, 3, 3, 4, 3, 3, 3, 
	3, 4, 3, 3, 3, 3, 3, 3, 
	4, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 4, 3, 3, 3, 3, 3, 
	3, 3, 7, 3, 3, 3, 3, 4, 
	3, 3, 3, 3, 5, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 4, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	4, 3, 3, 3, 3, 3, 7, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 5, 3, 
	4, 3, 3, 3, 3, 5, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	5, 3, 3, 3, 3, 3, 3, 3, 
	4, 3, 3, 3, 5, 4, 3, 3, 
	3, 3, 4, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 4, 3, 3, 3, 3, 3, 
	6, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 5, 3, 3, 3, 3, 3, 3, 
	4, 4, 3, 3, 3, 3, 3, 3, 
	3
};

static const char _umodLexer_range_lengths[] = {
	0, 0, 0, 0, 1, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 3, 
	0, 0, 3, 0, 1, 1, 1, 1, 
	1, 0, 0, 0, 0, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3
};

static const short _umodLexer_index_offsets[] = {
	0, 3, 6, 9, 12, 14, 18, 20, 
	23, 25, 27, 29, 31, 33, 35, 37, 
	39, 41, 43, 45, 47, 49, 51, 53, 
	99, 102, 105, 111, 114, 117, 121, 123, 
	130, 135, 137, 140, 142, 144, 152, 159, 
	166, 173, 180, 187, 194, 201, 209, 216, 
	223, 230, 237, 244, 251, 258, 266, 273, 
	280, 287, 294, 301, 308, 316, 323, 330, 
	337, 344, 352, 359, 366, 373, 380, 387, 
	394, 402, 409, 416, 423, 430, 437, 444, 
	451, 458, 465, 473, 480, 487, 494, 501, 
	508, 515, 522, 533, 540, 547, 554, 561, 
	569, 576, 583, 590, 597, 606, 613, 620, 
	627, 634, 641, 648, 655, 662, 669, 676, 
	683, 690, 697, 704, 711, 718, 725, 732, 
	739, 746, 753, 760, 767, 774, 781, 788, 
	796, 803, 810, 817, 824, 831, 838, 845, 
	852, 860, 867, 874, 881, 888, 895, 906, 
	913, 920, 927, 934, 941, 948, 955, 962, 
	969, 976, 983, 990, 997, 1004, 1011, 1020, 
	1027, 1035, 1042, 1049, 1056, 1063, 1072, 1079, 
	1086, 1093, 1100, 1107, 1114, 1121, 1128, 1135, 
	1142, 1149, 1156, 1163, 1170, 1177, 1184, 1191, 
	1198, 1207, 1214, 1221, 1228, 1235, 1242, 1249, 
	1256, 1264, 1271, 1278, 1285, 1294, 1302, 1309, 
	1316, 1323, 1330, 1338, 1345, 1352, 1359, 1366, 
	1373, 1380, 1387, 1394, 1401, 1408, 1415, 1422, 
	1429, 1436, 1443, 1451, 1458, 1465, 1472, 1479, 
	1486, 1496, 1503, 1510, 1517, 1524, 1531, 1538, 
	1545, 1552, 1559, 1566, 1573, 1580, 1587, 1594, 
	1601, 1608, 1615, 1622, 1629, 1636, 1643, 1650, 
	1657, 1664, 1673, 1680, 1687, 1694, 1701, 1708, 
	1715, 1723, 1731, 1738, 1745, 1752, 1759, 1766, 
	1773
};

static const short _umodLexer_indicies[] = {
	2, 3, 1, 4, 3, 1, 2, 6, 
	5, 7, 6, 5, 8, 0, 9, 9, 
	10, 0, 10, 0, 12, 13, 11, 14, 
	11, 15, 11, 16, 11, 17, 11, 18, 
	11, 19, 11, 20, 11, 21, 11, 22, 
	11, 23, 11, 24, 11, 25, 11, 26, 
	11, 27, 11, 28, 11, 30, 31, 31, 
	30, 32, 33, 34, 35, 36, 37, 38, 
	39, 40, 41, 42, 44, 45, 46, 47, 
	48, 49, 50, 51, 33, 52, 53, 54, 
	55, 56, 57, 58, 59, 60, 61, 62, 
	63, 64, 65, 66, 67, 68, 69, 43, 
	33, 33, 29, 30, 30, 70, 2, 3, 
	1, 33, 33, 33, 33, 33, 0, 2, 
	6, 5, 71, 72, 0, 74, 74, 8, 
	73, 10, 73, 76, 77, 78, 79, 80, 
	8, 75, 8, 74, 74, 43, 81, 83, 
	82, 85, 86, 84, 88, 87, 90, 89, 
	33, 33, 92, 93, 33, 33, 33, 91, 
	33, 33, 94, 33, 33, 33, 91, 33, 
	33, 95, 33, 33, 33, 91, 33, 33, 
	96, 33, 33, 33, 91, 33, 33, 97, 
	33, 33, 33, 91, 33, 33, 98, 33, 
	33, 33, 91, 33, 33, 99, 33, 33, 
	33, 91, 33, 33, 100, 33, 33, 33, 
	91, 33, 33, 101, 102, 33, 33, 33, 
	91, 33, 33, 103, 33, 33, 33, 91, 
	33, 33, 104, 33, 33, 33, 91, 33, 
	33, 105, 33, 33, 33, 91, 33, 33, 
	106, 33, 33, 33, 91, 33, 33, 107, 
	33, 33, 33, 91, 33, 33, 108, 33, 
	33, 33, 91, 33, 33, 109, 33, 33, 
	33, 91, 33, 33, 110, 111, 33, 33, 
	33, 91, 33, 33, 112, 33, 33, 33, 
	91, 33, 33, 113, 33, 33, 33, 91, 
	33, 33, 114, 33, 33, 33, 91, 33, 
	33, 115, 33, 33, 33, 91, 33, 33, 
	116, 33, 33, 33, 91, 33, 33, 117, 
	33, 33, 33, 91, 33, 33, 118, 119, 
	33, 33, 33, 91, 33, 33, 120, 33, 
	33, 33, 91, 33, 33, 121, 33, 33, 
	33, 91, 33, 33, 122, 33, 33, 33, 
	91, 33, 33, 123, 33, 33, 33, 91, 
	33, 33, 124, 125, 33, 33, 33, 91, 
	33, 33, 126, 33, 33, 33, 91, 33, 
	33, 127, 33, 33, 33, 91, 33, 33, 
	128, 33, 33, 33, 91, 33, 33, 130, 
	33, 33, 33, 129, 33, 33, 131, 33, 
	33, 33, 91, 33, 33, 132, 33, 33, 
	33, 91, 33, 33, 133, 134, 33, 33, 
	33, 91, 33, 33, 135, 33, 33, 33, 
	91, 33, 33, 136, 33, 33, 33, 91, 
	33, 33, 137, 33, 33, 33, 91, 33, 
	33, 138, 33, 33, 33, 91, 33, 33, 
	139, 33, 33, 33, 91, 33, 33, 140, 
	33, 33, 33, 91, 33, 33, 141, 33, 
	33, 33, 91, 33, 33, 142, 33, 33, 
	33, 91, 33, 33, 143, 33, 33, 33, 
	91, 33, 33, 144, 145, 33, 33, 33, 
	91, 33, 33, 146, 33, 33, 33, 91, 
	33, 33, 147, 33, 33, 33, 91, 33, 
	33, 148, 33, 33, 33, 91, 33, 33, 
	149, 33, 33, 33, 91, 33, 33, 150, 
	33, 33, 33, 91, 33, 33, 151, 33, 
	33, 33, 91, 33, 33, 152, 33, 33, 
	33, 91, 33, 33, 153, 154, 155, 156, 
	157, 33, 33, 33, 91, 33, 33, 158, 
	33, 33, 33, 91, 33, 33, 159, 33, 
	33, 33, 91, 33, 33, 160, 33, 33, 
	33, 91, 33, 33, 161, 33, 33, 33, 
	91, 33, 33, 163, 164, 33, 33, 33, 
	162, 33, 33, 165, 33, 33, 33, 91, 
	33, 33, 166, 33, 33, 33, 91, 33, 
	33, 167, 33, 33, 33, 91, 33, 33, 
	168, 33, 33, 33, 91, 33, 33, 169, 
	170, 171, 33, 33, 33, 91, 33, 33, 
	172, 33, 33, 33, 91, 33, 33, 173, 
	33, 33, 33, 91, 33, 33, 174, 33, 
	33, 33, 91, 33, 33, 175, 33, 33, 
	33, 91, 33, 33, 176, 33, 33, 33, 
	91, 33, 33, 177, 33, 33, 33, 91, 
	33, 33, 178, 33, 33, 33, 91, 33, 
	33, 179, 33, 33, 33, 91, 33, 33, 
	180, 33, 33, 33, 91, 33, 33, 182, 
	33, 33, 33, 181, 33, 33, 183, 33, 
	33, 33, 91, 33, 33, 184, 33, 33, 
	33, 91, 33, 33, 185, 33, 33, 33, 
	91, 33, 33, 186, 33, 33, 33, 91, 
	33, 33, 187, 33, 33, 33, 91, 33, 
	33, 188, 33, 33, 33, 91, 33, 33, 
	189, 33, 33, 33, 91, 33, 33, 190, 
	33, 33, 33, 91, 33, 33, 191, 33, 
	33, 33, 91, 33, 33, 192, 33, 33, 
	33, 91, 33, 33, 193, 33, 33, 33, 
	91, 33, 33, 194, 33, 33, 33, 91, 
	33, 33, 195, 33, 33, 33, 91, 33, 
	33, 196, 33, 33, 33, 91, 33, 33, 
	197, 33, 33, 33, 91, 33, 33, 198, 
	33, 33, 33, 91, 33, 33, 199, 200, 
	33, 33, 33, 91, 33, 33, 201, 33, 
	33, 33, 91, 33, 33, 202, 33, 33, 
	33, 91, 33, 33, 203, 33, 33, 33, 
	91, 33, 33, 204, 33, 33, 33, 91, 
	33, 33, 205, 33, 33, 33, 91, 33, 
	33, 206, 33, 33, 33, 91, 33, 33, 
	207, 33, 33, 33, 91, 33, 33, 208, 
	33, 33, 33, 91, 33, 33, 209, 210, 
	33, 33, 33, 91, 33, 33, 211, 33, 
	33, 33, 91, 33, 33, 212, 33, 33, 
	33, 91, 33, 33, 213, 33, 33, 33, 
	91, 33, 33, 214, 33, 33, 33, 91, 
	33, 33, 215, 33, 33, 33, 91, 33, 
	33, 216, 217, 218, 219, 220, 33, 33, 
	33, 91, 33, 33, 221, 33, 33, 33, 
	91, 33, 33, 222, 33, 33, 33, 91, 
	33, 33, 223, 33, 33, 33, 91, 33, 
	33, 224, 33, 33, 33, 91, 33, 33, 
	225, 33, 33, 33, 91, 33, 33, 226, 
	33, 33, 33, 91, 33, 33, 227, 33, 
	33, 33, 91, 33, 33, 228, 33, 33, 
	33, 91, 33, 33, 229, 33, 33, 33, 
	91, 33, 33, 230, 33, 33, 33, 91, 
	33, 33, 231, 33, 33, 33, 91, 33, 
	33, 232, 33, 33, 33, 91, 33, 33, 
	233, 33, 33, 33, 91, 33, 33, 234, 
	33, 33, 33, 91, 33, 33, 235, 33, 
	33, 33, 91, 33, 33, 236, 237, 238, 
	33, 33, 33, 91, 33, 33, 239, 33, 
	33, 33, 91, 33, 33, 240, 241, 33, 
	33, 33, 91, 33, 33, 242, 33, 33, 
	33, 91, 33, 33, 243, 33, 33, 33, 
	91, 33, 33, 244, 33, 33, 33, 91, 
	33, 33, 245, 33, 33, 33, 91, 33, 
	33, 247, 248, 249, 33, 33, 33, 246, 
	33, 33, 250, 33, 33, 33, 91, 33, 
	33, 251, 33, 33, 33, 91, 33, 33, 
	252, 33, 33, 33, 91, 33, 33, 253, 
	33, 33, 33, 91, 254, 33, 33, 33, 
	33, 33, 91, 33, 33, 255, 33, 33, 
	33, 91, 33, 33, 256, 33, 33, 33, 
	91, 33, 33, 257, 33, 33, 33, 91, 
	33, 33, 258, 33, 33, 33, 91, 33, 
	33, 259, 33, 33, 33, 91, 33, 33, 
	260, 33, 33, 33, 91, 33, 33, 261, 
	33, 33, 33, 91, 33, 33, 262, 33, 
	33, 33, 91, 33, 33, 263, 33, 33, 
	33, 91, 33, 33, 264, 33, 33, 33, 
	91, 33, 33, 265, 33, 33, 33, 91, 
	33, 33, 266, 33, 33, 33, 91, 33, 
	33, 267, 33, 33, 33, 91, 33, 33, 
	268, 269, 270, 33, 33, 33, 91, 33, 
	33, 271, 33, 33, 33, 91, 33, 33, 
	272, 33, 33, 33, 91, 33, 33, 273, 
	33, 33, 33, 91, 33, 33, 274, 33, 
	33, 33, 91, 33, 33, 275, 33, 33, 
	33, 91, 33, 33, 276, 33, 33, 33, 
	91, 33, 33, 277, 33, 33, 33, 91, 
	33, 33, 278, 279, 33, 33, 33, 91, 
	33, 33, 280, 33, 33, 33, 91, 33, 
	33, 281, 33, 33, 33, 91, 33, 33, 
	282, 33, 33, 33, 91, 33, 33, 283, 
	284, 285, 33, 33, 33, 91, 33, 33, 
	286, 287, 33, 33, 33, 91, 33, 33, 
	288, 33, 33, 33, 91, 33, 33, 289, 
	33, 33, 33, 91, 33, 33, 290, 33, 
	33, 33, 91, 33, 33, 291, 33, 33, 
	33, 91, 33, 33, 292, 293, 33, 33, 
	33, 91, 33, 33, 294, 33, 33, 33, 
	91, 33, 33, 295, 33, 33, 33, 91, 
	33, 33, 296, 33, 33, 33, 91, 33, 
	33, 297, 33, 33, 33, 91, 33, 33, 
	298, 33, 33, 33, 91, 33, 33, 299, 
	33, 33, 33, 91, 33, 33, 300, 33, 
	33, 33, 91, 33, 33, 301, 33, 33, 
	33, 91, 33, 33, 302, 33, 33, 33, 
	91, 33, 33, 303, 33, 33, 33, 91, 
	33, 33, 304, 33, 33, 33, 91, 33, 
	33, 305, 33, 33, 33, 91, 33, 33, 
	306, 33, 33, 33, 91, 33, 33, 307, 
	33, 33, 33, 91, 33, 33, 308, 33, 
	33, 33, 91, 33, 33, 309, 310, 33, 
	33, 33, 91, 33, 33, 311, 33, 33, 
	33, 91, 33, 33, 312, 33, 33, 33, 
	91, 33, 33, 313, 33, 33, 33, 91, 
	33, 33, 314, 33, 33, 33, 91, 33, 
	33, 315, 33, 33, 33, 91, 33, 33, 
	316, 317, 318, 319, 33, 33, 33, 91, 
	33, 33, 320, 33, 33, 33, 91, 33, 
	33, 321, 33, 33, 33, 91, 33, 33, 
	322, 33, 33, 33, 91, 33, 33, 323, 
	33, 33, 33, 91, 33, 33, 324, 33, 
	33, 33, 91, 33, 33, 325, 33, 33, 
	33, 91, 33, 33, 326, 33, 33, 33, 
	91, 33, 33, 327, 33, 33, 33, 91, 
	33, 33, 328, 33, 33, 33, 91, 33, 
	33, 329, 33, 33, 33, 91, 33, 33, 
	330, 33, 33, 33, 91, 33, 33, 331, 
	33, 33, 33, 91, 33, 33, 332, 33, 
	33, 33, 91, 33, 33, 333, 33, 33, 
	33, 91, 33, 33, 334, 33, 33, 33, 
	91, 33, 33, 335, 33, 33, 33, 91, 
	33, 33, 336, 33, 33, 33, 91, 33, 
	33, 337, 33, 33, 33, 91, 33, 33, 
	338, 33, 33, 33, 91, 33, 33, 339, 
	33, 33, 33, 91, 33, 33, 340, 33, 
	33, 33, 91, 33, 33, 341, 33, 33, 
	33, 91, 33, 33, 342, 33, 33, 33, 
	91, 33, 33, 343, 33, 33, 33, 91, 
	33, 33, 344, 345, 346, 33, 33, 33, 
	91, 33, 33, 347, 33, 33, 33, 91, 
	33, 33, 348, 33, 33, 33, 91, 33, 
	33, 349, 33, 33, 33, 91, 33, 33, 
	350, 33, 33, 33, 91, 33, 33, 351, 
	33, 33, 33, 91, 33, 33, 352, 33, 
	33, 33, 91, 33, 33, 353, 354, 33, 
	33, 33, 91, 33, 33, 355, 356, 33, 
	33, 33, 91, 33, 33, 357, 33, 33, 
	33, 91, 33, 33, 358, 33, 33, 33, 
	91, 33, 33, 359, 33, 33, 33, 91, 
	33, 33, 360, 33, 33, 33, 91, 33, 
	33, 361, 33, 33, 33, 91, 33, 33, 
	362, 33, 33, 33, 91, 33, 33, 363, 
	33, 33, 33, 91, 0
};

static const short _umodLexer_trans_targs[] = {
	23, 0, 23, 1, 25, 2, 3, 27, 
	29, 6, 30, 23, 8, 16, 9, 10, 
	11, 12, 13, 14, 15, 23, 17, 18, 
	19, 20, 21, 22, 23, 23, 24, 23, 
	25, 26, 27, 23, 23, 23, 28, 23, 
	28, 31, 23, 32, 33, 23, 34, 35, 
	36, 23, 23, 23, 37, 53, 60, 82, 
	90, 142, 158, 175, 178, 182, 184, 196, 
	223, 244, 249, 256, 23, 23, 23, 4, 
	28, 23, 5, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 38, 45, 39, 40, 
	41, 42, 43, 44, 26, 26, 46, 47, 
	48, 49, 50, 51, 52, 26, 54, 57, 
	55, 56, 26, 58, 59, 26, 61, 64, 
	62, 63, 26, 65, 66, 71, 67, 68, 
	69, 23, 70, 26, 72, 73, 75, 74, 
	26, 76, 77, 78, 79, 80, 81, 26, 
	83, 84, 26, 85, 86, 87, 88, 89, 
	26, 91, 93, 100, 121, 127, 92, 26, 
	94, 95, 23, 96, 97, 26, 98, 99, 
	26, 101, 110, 113, 102, 103, 104, 105, 
	106, 107, 108, 109, 26, 23, 111, 112, 
	26, 114, 115, 116, 117, 118, 119, 120, 
	26, 122, 123, 124, 125, 126, 26, 128, 
	135, 129, 130, 131, 132, 133, 134, 26, 
	136, 137, 139, 138, 26, 140, 141, 26, 
	143, 146, 149, 151, 152, 144, 145, 26, 
	147, 148, 26, 150, 26, 26, 153, 154, 
	155, 156, 157, 26, 26, 159, 165, 160, 
	161, 163, 162, 26, 164, 26, 23, 166, 
	171, 173, 167, 168, 169, 170, 7, 172, 
	26, 174, 26, 176, 177, 26, 179, 180, 
	181, 26, 183, 26, 185, 26, 191, 186, 
	187, 188, 189, 190, 26, 192, 193, 194, 
	26, 195, 26, 197, 211, 218, 198, 202, 
	199, 200, 201, 26, 203, 208, 204, 205, 
	206, 207, 26, 209, 210, 26, 212, 213, 
	214, 215, 216, 217, 26, 219, 222, 220, 
	221, 26, 26, 224, 225, 228, 234, 241, 
	226, 227, 26, 229, 230, 231, 232, 233, 
	26, 235, 236, 237, 238, 239, 240, 26, 
	242, 243, 26, 245, 246, 247, 248, 26, 
	250, 252, 254, 251, 26, 253, 26, 255, 
	26, 257, 261, 258, 259, 26, 260, 26, 
	262, 263, 264, 26
};

static const short _umodLexer_trans_actions[] = {
	87, 0, 55, 0, 269, 0, 0, 269, 
	266, 0, 0, 85, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 49, 0, 0, 
	0, 0, 0, 0, 51, 57, 0, 53, 
	272, 263, 272, 17, 19, 37, 89, 11, 
	92, 0, 39, 260, 0, 9, 0, 0, 
	0, 25, 27, 15, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 21, 23, 77, 0, 
	260, 83, 0, 61, 33, 29, 31, 35, 
	13, 79, 67, 47, 63, 43, 41, 59, 
	7, 65, 45, 81, 0, 0, 0, 0, 
	0, 0, 0, 0, 95, 98, 0, 0, 
	0, 0, 0, 0, 0, 101, 0, 0, 
	0, 0, 104, 0, 0, 107, 0, 0, 
	0, 0, 110, 0, 0, 0, 0, 0, 
	0, 69, 0, 113, 0, 0, 0, 0, 
	116, 0, 0, 0, 0, 0, 0, 119, 
	0, 0, 122, 0, 0, 0, 0, 0, 
	125, 0, 0, 0, 0, 0, 0, 128, 
	0, 0, 71, 0, 0, 131, 0, 0, 
	134, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 137, 73, 0, 0, 
	140, 0, 0, 0, 0, 0, 0, 0, 
	143, 0, 0, 0, 0, 0, 146, 0, 
	0, 0, 0, 0, 0, 0, 0, 149, 
	0, 0, 0, 0, 152, 0, 0, 155, 
	0, 0, 0, 0, 0, 0, 0, 158, 
	0, 0, 161, 0, 164, 167, 0, 0, 
	0, 0, 0, 170, 173, 0, 0, 0, 
	0, 0, 0, 176, 0, 179, 75, 0, 
	0, 0, 0, 0, 0, 5, 0, 0, 
	182, 0, 185, 0, 0, 188, 0, 0, 
	0, 191, 0, 194, 0, 200, 0, 0, 
	0, 0, 0, 0, 197, 0, 0, 0, 
	203, 0, 206, 0, 0, 0, 0, 0, 
	0, 0, 0, 209, 0, 0, 0, 0, 
	0, 0, 212, 0, 0, 215, 0, 0, 
	0, 0, 0, 0, 218, 0, 0, 0, 
	0, 221, 224, 0, 0, 0, 0, 0, 
	0, 0, 227, 0, 0, 0, 0, 0, 
	230, 0, 0, 0, 0, 0, 0, 233, 
	0, 0, 236, 0, 0, 0, 0, 239, 
	0, 0, 0, 0, 242, 0, 245, 0, 
	248, 0, 0, 0, 0, 251, 0, 254, 
	0, 0, 0, 257
};

static const short _umodLexer_to_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0
};

static const short _umodLexer_from_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 3, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0
};

static const short _umodLexer_eof_trans[] = {
	1, 1, 1, 1, 1, 1, 1, 12, 
	12, 12, 12, 12, 12, 12, 12, 12, 
	12, 12, 12, 12, 12, 12, 12, 0, 
	71, 1, 1, 1, 1, 74, 74, 76, 
	82, 83, 85, 88, 90, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 130, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 163, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 182, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 247, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92, 92, 92, 92, 92, 92, 92, 92, 
	92
};

static const int umodLexer_start = 23;
static const int umodLexer_first_final = 23;
static const int umodLexer_error = -1;

static const int umodLexer_en_main = 23;


#line 13 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"

// no idea about the origins of this value, ask Flori ;)
int EVIL=0x666;

using namespace umod::lex;

Lexer::Lexer(const char *source, unsigned int length)
    : m_source(source)
    , m_source_end(source + length)
    , m_source_eof(m_source_end)
    , m_ts(nullptr), m_te(nullptr)
    , m_current_state(EVIL), m_act(0)
    , m_position(std::make_pair(1, 1))
{

}

Lexer::Lexer(const std::string &source): Lexer(source.c_str(), source.length())
{

}

Lexer::~Lexer()
{

}

Lexeme *Lexer::consume(void)
{
    
#line 166 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"


    Lexeme::Type type;

    if (m_source == m_source_end)
    {
        m_ts = m_te = m_source;
        type = Lexeme::Type::EOI;
    }
    else
    {
        
#line 178 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
        
#line 179 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
        
#line 180 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
        
#line 181 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
        
#line 182 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
        
#line 183 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
        
#line 184 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"

        
#line 985 "lexer.cc"
	{
	(  m_current_state) = umodLexer_start;
	(  m_ts) = 0;
	(  m_te) = 0;
	( m_act) = 0;
	}

#line 186 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
        
#line 995 "lexer.cc"
	{
	int _klen;
	unsigned int _trans;
	const char *_acts;
	unsigned int _nacts;
	const char *_keys;

	if ( (   m_source) == (  m_source_end) )
		goto _test_eof;
_resume:
	_acts = _umodLexer_actions + _umodLexer_from_state_actions[(  m_current_state)];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 1:
#line 1 "NONE"
	{(  m_ts) = (   m_source);}
	break;
#line 1014 "lexer.cc"
		}
	}

	_keys = _umodLexer_trans_keys + _umodLexer_key_offsets[(  m_current_state)];
	_trans = _umodLexer_index_offsets[(  m_current_state)];

	_klen = _umodLexer_single_lengths[(  m_current_state)];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( (*(   m_source)) < *_mid )
				_upper = _mid - 1;
			else if ( (*(   m_source)) > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (unsigned int)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _umodLexer_range_lengths[(  m_current_state)];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( (*(   m_source)) < _mid[0] )
				_upper = _mid - 2;
			else if ( (*(   m_source)) > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += (unsigned int)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	_trans = _umodLexer_indicies[_trans];
_eof_trans:
	(  m_current_state) = _umodLexer_trans_targs[_trans];

	if ( _umodLexer_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _umodLexer_actions + _umodLexer_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 2:
#line 1 "NONE"
	{(  m_te) = (   m_source)+1;}
	break;
	case 3:
#line 82 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 19;}
	break;
	case 4:
#line 83 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 20;}
	break;
	case 5:
#line 99 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 32;}
	break;
	case 6:
#line 100 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 33;}
	break;
	case 7:
#line 101 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 34;}
	break;
	case 8:
#line 102 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 35;}
	break;
	case 9:
#line 103 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 36;}
	break;
	case 10:
#line 104 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 37;}
	break;
	case 11:
#line 106 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 39;}
	break;
	case 12:
#line 107 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 40;}
	break;
	case 13:
#line 108 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 41;}
	break;
	case 14:
#line 109 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 42;}
	break;
	case 15:
#line 110 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 43;}
	break;
	case 16:
#line 111 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 44;}
	break;
	case 17:
#line 113 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 46;}
	break;
	case 18:
#line 114 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 47;}
	break;
	case 19:
#line 115 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 48;}
	break;
	case 20:
#line 117 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 50;}
	break;
	case 21:
#line 118 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 51;}
	break;
	case 22:
#line 119 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 52;}
	break;
	case 23:
#line 120 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 53;}
	break;
	case 24:
#line 121 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 54;}
	break;
	case 25:
#line 122 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 55;}
	break;
	case 26:
#line 123 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 56;}
	break;
	case 27:
#line 124 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 57;}
	break;
	case 28:
#line 125 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 58;}
	break;
	case 29:
#line 126 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 59;}
	break;
	case 30:
#line 127 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 60;}
	break;
	case 31:
#line 128 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 61;}
	break;
	case 32:
#line 129 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 62;}
	break;
	case 33:
#line 130 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 63;}
	break;
	case 34:
#line 132 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 65;}
	break;
	case 35:
#line 133 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 66;}
	break;
	case 36:
#line 134 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 67;}
	break;
	case 37:
#line 135 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 68;}
	break;
	case 38:
#line 136 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 69;}
	break;
	case 39:
#line 137 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 70;}
	break;
	case 40:
#line 138 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 71;}
	break;
	case 41:
#line 139 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 72;}
	break;
	case 42:
#line 140 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 73;}
	break;
	case 43:
#line 141 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 74;}
	break;
	case 44:
#line 142 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 75;}
	break;
	case 45:
#line 143 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 76;}
	break;
	case 46:
#line 144 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 77;}
	break;
	case 47:
#line 145 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 78;}
	break;
	case 48:
#line 146 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 79;}
	break;
	case 49:
#line 147 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 80;}
	break;
	case 50:
#line 148 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 81;}
	break;
	case 51:
#line 149 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 82;}
	break;
	case 52:
#line 150 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 83;}
	break;
	case 53:
#line 151 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 84;}
	break;
	case 54:
#line 152 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 85;}
	break;
	case 55:
#line 153 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 86;}
	break;
	case 56:
#line 154 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 87;}
	break;
	case 57:
#line 155 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 88;}
	break;
	case 58:
#line 156 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 89;}
	break;
	case 59:
#line 157 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 90;}
	break;
	case 60:
#line 160 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 93;}
	break;
	case 61:
#line 161 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 94;}
	break;
	case 62:
#line 162 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 95;}
	break;
	case 63:
#line 163 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 96;}
	break;
	case 64:
#line 164 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 97;}
	break;
	case 65:
#line 63 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::COMPEQ; {(   m_source)++; goto _out; } }}
	break;
	case 66:
#line 65 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::SEMICOLON; {(   m_source)++; goto _out; } }}
	break;
	case 67:
#line 66 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::COMA; {(   m_source)++; goto _out; } }}
	break;
	case 68:
#line 68 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::DOTCARET; {(   m_source)++; goto _out; } }}
	break;
	case 69:
#line 69 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::CARET; {(   m_source)++; goto _out; } }}
	break;
	case 70:
#line 70 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::OPAREN; {(   m_source)++; goto _out; } }}
	break;
	case 71:
#line 71 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::CPAREN; {(   m_source)++; goto _out; } }}
	break;
	case 72:
#line 72 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::OBRACE; {(   m_source)++; goto _out; } }}
	break;
	case 73:
#line 73 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::CBRACE; {(   m_source)++; goto _out; } }}
	break;
	case 74:
#line 74 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::OBRACKET; {(   m_source)++; goto _out; } }}
	break;
	case 75:
#line 75 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::CBRACKET; {(   m_source)++; goto _out; } }}
	break;
	case 76:
#line 77 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::DOTPLUS; {(   m_source)++; goto _out; } }}
	break;
	case 77:
#line 78 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::DOTMINUS; {(   m_source)++; goto _out; } }}
	break;
	case 78:
#line 79 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::DOTSTAR; {(   m_source)++; goto _out; } }}
	break;
	case 79:
#line 80 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::DOTSLASH; {(   m_source)++; goto _out; } }}
	break;
	case 80:
#line 84 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::STAR; {(   m_source)++; goto _out; } }}
	break;
	case 81:
#line 85 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::SLASH; {(   m_source)++; goto _out; } }}
	break;
	case 82:
#line 86 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::COMPNE; {(   m_source)++; goto _out; } }}
	break;
	case 83:
#line 87 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::LOWEREQ; {(   m_source)++; goto _out; } }}
	break;
	case 84:
#line 89 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::GREATEREQ; {(   m_source)++; goto _out; } }}
	break;
	case 85:
#line 91 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::ASSING; {(   m_source)++; goto _out; } }}
	break;
	case 86:
#line 94 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::INITIALALG; {(   m_source)++; goto _out; } }}
	break;
	case 87:
#line 95 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::INITIALEQ; {(   m_source)++; goto _out; } }}
	break;
	case 88:
#line 159 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::NEWLINE; {(   m_source)++; goto _out; } }}
	break;
	case 89:
#line 163 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::STRING; {(   m_source)++; goto _out; } }}
	break;
	case 90:
#line 164 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ {(   m_source)++; goto _out; } }}
	break;
	case 91:
#line 64 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::EQUAL; {(   m_source)++; goto _out; } }}
	break;
	case 92:
#line 67 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::DOT; {(   m_source)++; goto _out; } }}
	break;
	case 93:
#line 88 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::LOWER; {(   m_source)++; goto _out; } }}
	break;
	case 94:
#line 90 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::GREATER; {(   m_source)++; goto _out; } }}
	break;
	case 95:
#line 92 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::COLON; {(   m_source)++; goto _out; } }}
	break;
	case 96:
#line 105 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::CONNECT; {(   m_source)++; goto _out; } }}
	break;
	case 97:
#line 112 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::ELSE; {(   m_source)++; goto _out; } }}
	break;
	case 98:
#line 116 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::END; {(   m_source)++; goto _out; } }}
	break;
	case 99:
#line 131 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::IN; {(   m_source)++; goto _out; } }}
	break;
	case 100:
#line 158 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::SPACES; {(   m_source)++; goto _out; } }}
	break;
	case 101:
#line 160 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::INT; {(   m_source)++; goto _out; } }}
	break;
	case 102:
#line 161 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::IDENT; {(   m_source)++; goto _out; } }}
	break;
	case 103:
#line 162 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::FLOAT; {(   m_source)++; goto _out; } }}
	break;
	case 104:
#line 161 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{{(   m_source) = (((  m_te)))-1;}{ type = Lexeme::Type::IDENT; {(   m_source)++; goto _out; } }}
	break;
	case 105:
#line 1 "NONE"
	{	switch( ( m_act) ) {
	case 19:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::PLUS; {(   m_source)++; goto _out; } }
	break;
	case 20:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::MINUS; {(   m_source)++; goto _out; } }
	break;
	case 32:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::ALGORITHM; {(   m_source)++; goto _out; } }
	break;
	case 33:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::AND; {(   m_source)++; goto _out; } }
	break;
	case 34:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::ANNOTATION; {(   m_source)++; goto _out; } }
	break;
	case 35:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::BLOCK; {(   m_source)++; goto _out; } }
	break;
	case 36:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::BREAK; {(   m_source)++; goto _out; } }
	break;
	case 37:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::CLASS; {(   m_source)++; goto _out; } }
	break;
	case 39:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::CONNECTOR; {(   m_source)++; goto _out; } }
	break;
	case 40:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::CONSTANT; {(   m_source)++; goto _out; } }
	break;
	case 41:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::CONSTRAINEDBY; {(   m_source)++; goto _out; } }
	break;
	case 42:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::DER; {(   m_source)++; goto _out; } }
	break;
	case 43:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::DISCRETE; {(   m_source)++; goto _out; } }
	break;
	case 44:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::EACH; {(   m_source)++; goto _out; } }
	break;
	case 46:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::ELSEIF; {(   m_source)++; goto _out; } }
	break;
	case 47:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::ELSEWHEN; {(   m_source)++; goto _out; } }
	break;
	case 48:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::ENCAPSULATED; {(   m_source)++; goto _out; } }
	break;
	case 50:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::ENDSUB; {(   m_source)++; goto _out; } }
	break;
	case 51:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::ENUMERATION; {(   m_source)++; goto _out; } }
	break;
	case 52:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::EQUATION; {(   m_source)++; goto _out; } }
	break;
	case 53:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::EXPANDABLE; {(   m_source)++; goto _out; } }
	break;
	case 54:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::EXTENDS; {(   m_source)++; goto _out; } }
	break;
	case 55:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::EXTERNAL; {(   m_source)++; goto _out; } }
	break;
	case 56:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::FALSE; {(   m_source)++; goto _out; } }
	break;
	case 57:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::FINAL; {(   m_source)++; goto _out; } }
	break;
	case 58:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::FLOW; {(   m_source)++; goto _out; } }
	break;
	case 59:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::FOR; {(   m_source)++; goto _out; } }
	break;
	case 60:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::FUNCTION; {(   m_source)++; goto _out; } }
	break;
	case 61:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::IF; {(   m_source)++; goto _out; } }
	break;
	case 62:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::IMPORT; {(   m_source)++; goto _out; } }
	break;
	case 63:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::IMPURE; {(   m_source)++; goto _out; } }
	break;
	case 65:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::INNER; {(   m_source)++; goto _out; } }
	break;
	case 66:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::INPUT; {(   m_source)++; goto _out; } }
	break;
	case 67:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::LOOP; {(   m_source)++; goto _out; } }
	break;
	case 68:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::MODEL; {(   m_source)++; goto _out; } }
	break;
	case 69:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::NOT; {(   m_source)++; goto _out; } }
	break;
	case 70:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::OPERATOR; {(   m_source)++; goto _out; } }
	break;
	case 71:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::OR; {(   m_source)++; goto _out; } }
	break;
	case 72:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::OUTER; {(   m_source)++; goto _out; } }
	break;
	case 73:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::OUTPUT; {(   m_source)++; goto _out; } }
	break;
	case 74:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::PACKAGE; {(   m_source)++; goto _out; } }
	break;
	case 75:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::PARAMETER; {(   m_source)++; goto _out; } }
	break;
	case 76:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::PARTIAL; {(   m_source)++; goto _out; } }
	break;
	case 77:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::PROTECTED; {(   m_source)++; goto _out; } }
	break;
	case 78:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::PUBLIC; {(   m_source)++; goto _out; } }
	break;
	case 79:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::PURE; {(   m_source)++; goto _out; } }
	break;
	case 80:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::RECORD; {(   m_source)++; goto _out; } }
	break;
	case 81:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::REDECLARE; {(   m_source)++; goto _out; } }
	break;
	case 82:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::REPLACEABLE; {(   m_source)++; goto _out; } }
	break;
	case 83:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::RETURN; {(   m_source)++; goto _out; } }
	break;
	case 84:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::STREAM; {(   m_source)++; goto _out; } }
	break;
	case 85:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::THEN; {(   m_source)++; goto _out; } }
	break;
	case 86:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::TRUE; {(   m_source)++; goto _out; } }
	break;
	case 87:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::TYPE; {(   m_source)++; goto _out; } }
	break;
	case 88:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::WHEN; {(   m_source)++; goto _out; } }
	break;
	case 89:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::WHILE; {(   m_source)++; goto _out; } }
	break;
	case 90:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::WITHIN; {(   m_source)++; goto _out; } }
	break;
	case 93:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::INT; {(   m_source)++; goto _out; } }
	break;
	case 94:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::IDENT; {(   m_source)++; goto _out; } }
	break;
	case 95:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::FLOAT; {(   m_source)++; goto _out; } }
	break;
	case 96:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::STRING; {(   m_source)++; goto _out; } }
	break;
	case 97:
	{{(   m_source) = (((  m_te)))-1;} {(   m_source)++; goto _out; } }
	break;
	}
	}
	break;
#line 1684 "lexer.cc"
		}
	}

_again:
	_acts = _umodLexer_actions + _umodLexer_to_state_actions[(  m_current_state)];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 0:
#line 1 "NONE"
	{(  m_ts) = 0;}
	break;
#line 1697 "lexer.cc"
		}
	}

	if ( ++(   m_source) != (  m_source_end) )
		goto _resume;
	_test_eof: {}
	if ( (   m_source) == ( m_source_eof) )
	{
	if ( _umodLexer_eof_trans[(  m_current_state)] > 0 ) {
		_trans = _umodLexer_eof_trans[(  m_current_state)] - 1;
		goto _eof_trans;
	}
	}

	_out: {}
	}

#line 187 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
    }

    unsigned int size = m_te - m_ts;
    Lexeme::pos_t position = m_position;

    if (type == Lexeme::Type::NEWLINE)
    {
        m_position.first += 1;
        m_position.second = size;
    }
    else
    {
        m_position.second += size;
    }

    return new Lexeme(type, std::string(m_ts, size), position);
}

