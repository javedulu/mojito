
#line 1 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
#include <stddef.h>
#include <string>
#include <utility>
#include "lexer.h"
#include "lexeme.h"

// NOTE : if the lemon-parser is properly done then all the #define in lemon-parser.h should be equal
//        to total no of tokens
//        lemon-parser.h is generated by lemon based on whats used in parser , so if all the cases are
//              considered then there should be no token not # defined failsafe

#line 12 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"

#line 17 "lexer.cc"
static const char _umodLexer_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	66, 1, 67, 1, 68, 1, 69, 1, 
	70, 1, 71, 1, 72, 1, 73, 1, 
	74, 1, 75, 1, 76, 1, 77, 1, 
	78, 1, 79, 1, 80, 1, 81, 1, 
	82, 1, 83, 1, 84, 1, 85, 1, 
	86, 1, 87, 1, 88, 1, 89, 1, 
	90, 1, 91, 1, 92, 1, 93, 1, 
	94, 1, 95, 1, 96, 1, 97, 1, 
	98, 1, 99, 1, 100, 1, 101, 1, 
	102, 1, 103, 1, 104, 1, 105, 1, 
	106, 1, 107, 1, 108, 1, 109, 1, 
	110, 1, 111, 2, 2, 3, 2, 2, 
	4, 2, 2, 5, 2, 2, 6, 2, 
	2, 7, 2, 2, 8, 2, 2, 9, 
	2, 2, 10, 2, 2, 11, 2, 2, 
	12, 2, 2, 13, 2, 2, 14, 2, 
	2, 15, 2, 2, 16, 2, 2, 17, 
	2, 2, 18, 2, 2, 19, 2, 2, 
	20, 2, 2, 21, 2, 2, 22, 2, 
	2, 23, 2, 2, 24, 2, 2, 25, 
	2, 2, 26, 2, 2, 27, 2, 2, 
	28, 2, 2, 29, 2, 2, 30, 2, 
	2, 31, 2, 2, 32, 2, 2, 33, 
	2, 2, 34, 2, 2, 35, 2, 2, 
	36, 2, 2, 37, 2, 2, 38, 2, 
	2, 39, 2, 2, 40, 2, 2, 41, 
	2, 2, 42, 2, 2, 43, 2, 2, 
	44, 2, 2, 45, 2, 2, 46, 2, 
	2, 47, 2, 2, 48, 2, 2, 49, 
	2, 2, 50, 2, 2, 51, 2, 2, 
	52, 2, 2, 53, 2, 2, 54, 2, 
	2, 55, 2, 2, 56, 2, 2, 57, 
	2, 2, 58, 2, 2, 59, 2, 2, 
	60, 2, 2, 61, 2, 2, 62, 2, 
	2, 63, 2, 2, 64, 2, 2, 65
	
};

static const short _umodLexer_key_offsets[] = {
	0, 2, 13, 21, 30, 41, 42, 44, 
	48, 50, 62, 71, 80, 88, 99, 101, 
	102, 103, 104, 105, 106, 107, 108, 109, 
	110, 111, 112, 113, 114, 115, 116, 117, 
	118, 119, 120, 121, 122, 123, 124, 171, 
	173, 175, 184, 185, 190, 192, 193, 198, 
	202, 204, 205, 207, 208, 215, 224, 232, 
	240, 248, 256, 264, 272, 280, 289, 297, 
	305, 313, 321, 329, 337, 345, 354, 362, 
	370, 378, 386, 394, 402, 411, 419, 427, 
	435, 443, 452, 460, 468, 476, 484, 492, 
	500, 509, 517, 525, 533, 541, 549, 557, 
	565, 573, 581, 590, 598, 606, 614, 622, 
	630, 638, 646, 658, 666, 674, 682, 690, 
	699, 707, 715, 723, 731, 741, 749, 757, 
	765, 773, 781, 789, 797, 805, 813, 823, 
	824, 831, 839, 847, 855, 863, 872, 880, 
	888, 896, 904, 912, 920, 928, 936, 944, 
	952, 960, 968, 976, 984, 992, 1000, 1008, 
	1017, 1025, 1033, 1041, 1049, 1057, 1065, 1073, 
	1081, 1090, 1098, 1106, 1114, 1122, 1130, 1142, 
	1150, 1158, 1166, 1174, 1182, 1190, 1198, 1206, 
	1214, 1222, 1230, 1238, 1246, 1254, 1262, 1272, 
	1280, 1289, 1297, 1305, 1313, 1321, 1331, 1339, 
	1347, 1355, 1363, 1373, 1381, 1389, 1397, 1405, 
	1413, 1421, 1429, 1437, 1445, 1453, 1461, 1469, 
	1477, 1487, 1495, 1503, 1511, 1519, 1527, 1535, 
	1545, 1553, 1562, 1570, 1578, 1586, 1596, 1605, 
	1613, 1621, 1629, 1637, 1646, 1654, 1662, 1670, 
	1678, 1686, 1694, 1702, 1710, 1718, 1726, 1734, 
	1742, 1750, 1758, 1766, 1775, 1783, 1791, 1799, 
	1807, 1815, 1826, 1834, 1842, 1850, 1858, 1866, 
	1874, 1882, 1890, 1898, 1906, 1914, 1922, 1930, 
	1938, 1946, 1954, 1962, 1970, 1978, 1986, 1994, 
	2002, 2010, 2018, 2026, 2036, 2044, 2052, 2060, 
	2068, 2076, 2084, 2093, 2102, 2110, 2118, 2126, 
	2134, 2142, 2150
};

static const char _umodLexer_trans_keys[] = {
	34, 92, 34, 39, 63, 92, 102, 110, 
	114, 116, 118, 97, 98, 39, 92, 32, 
	33, 35, 95, 97, 126, 92, 32, 33, 
	35, 38, 40, 95, 97, 126, 34, 39, 
	63, 92, 102, 110, 114, 116, 118, 97, 
	98, 42, 42, 47, 43, 45, 48, 57, 
	48, 57, 32, 39, 95, 102, 105, 119, 
	9, 10, 65, 90, 97, 122, 32, 39, 
	95, 9, 10, 65, 90, 97, 122, 92, 
	32, 33, 35, 38, 40, 95, 97, 126, 
	39, 92, 32, 33, 35, 95, 97, 126, 
	34, 39, 63, 92, 102, 110, 114, 116, 
	118, 97, 98, 97, 101, 108, 103, 111, 
	114, 105, 116, 104, 109, 113, 117, 97, 
	116, 105, 111, 110, 102, 117, 110, 99, 
	116, 105, 111, 110, 9, 10, 13, 32, 
	34, 39, 40, 41, 42, 43, 44, 45, 
	46, 47, 58, 59, 60, 61, 62, 91, 
	93, 94, 95, 97, 98, 99, 100, 101, 
	102, 105, 108, 109, 110, 111, 112, 114, 
	115, 116, 119, 123, 125, 48, 57, 65, 
	90, 103, 122, 9, 32, 34, 92, 92, 
	32, 33, 35, 38, 40, 95, 97, 126, 
	39, 42, 43, 45, 47, 94, 42, 47, 
	10, 46, 69, 101, 48, 57, 69, 101, 
	48, 57, 48, 57, 61, 61, 62, 61, 
	95, 48, 57, 65, 90, 97, 122, 95, 
	108, 110, 48, 57, 65, 90, 97, 122, 
	95, 103, 48, 57, 65, 90, 97, 122, 
	95, 111, 48, 57, 65, 90, 97, 122, 
	95, 114, 48, 57, 65, 90, 97, 122, 
	95, 105, 48, 57, 65, 90, 97, 122, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	95, 104, 48, 57, 65, 90, 97, 122, 
	95, 109, 48, 57, 65, 90, 97, 122, 
	95, 100, 110, 48, 57, 65, 90, 97, 
	122, 95, 111, 48, 57, 65, 90, 97, 
	122, 95, 116, 48, 57, 65, 90, 97, 
	122, 95, 97, 48, 57, 65, 90, 98, 
	122, 95, 116, 48, 57, 65, 90, 97, 
	122, 95, 105, 48, 57, 65, 90, 97, 
	122, 95, 111, 48, 57, 65, 90, 97, 
	122, 95, 110, 48, 57, 65, 90, 97, 
	122, 95, 108, 114, 48, 57, 65, 90, 
	97, 122, 95, 111, 48, 57, 65, 90, 
	97, 122, 95, 99, 48, 57, 65, 90, 
	97, 122, 95, 107, 48, 57, 65, 90, 
	97, 122, 95, 101, 48, 57, 65, 90, 
	97, 122, 95, 97, 48, 57, 65, 90, 
	98, 122, 95, 107, 48, 57, 65, 90, 
	97, 122, 95, 108, 111, 48, 57, 65, 
	90, 97, 122, 95, 97, 48, 57, 65, 
	90, 98, 122, 95, 115, 48, 57, 65, 
	90, 97, 122, 95, 115, 48, 57, 65, 
	90, 97, 122, 95, 110, 48, 57, 65, 
	90, 97, 122, 95, 110, 115, 48, 57, 
	65, 90, 97, 122, 95, 101, 48, 57, 
	65, 90, 97, 122, 95, 99, 48, 57, 
	65, 90, 97, 122, 95, 116, 48, 57, 
	65, 90, 97, 122, 95, 111, 48, 57, 
	65, 90, 97, 122, 95, 114, 48, 57, 
	65, 90, 97, 122, 95, 116, 48, 57, 
	65, 90, 97, 122, 95, 97, 114, 48, 
	57, 65, 90, 98, 122, 95, 110, 48, 
	57, 65, 90, 97, 122, 95, 116, 48, 
	57, 65, 90, 97, 122, 95, 97, 48, 
	57, 65, 90, 98, 122, 95, 105, 48, 
	57, 65, 90, 97, 122, 95, 110, 48, 
	57, 65, 90, 97, 122, 95, 101, 48, 
	57, 65, 90, 97, 122, 95, 100, 48, 
	57, 65, 90, 97, 122, 95, 98, 48, 
	57, 65, 90, 97, 122, 95, 121, 48, 
	57, 65, 90, 97, 122, 95, 101, 105, 
	48, 57, 65, 90, 97, 122, 95, 114, 
	48, 57, 65, 90, 97, 122, 95, 115, 
	48, 57, 65, 90, 97, 122, 95, 99, 
	48, 57, 65, 90, 97, 122, 95, 114, 
	48, 57, 65, 90, 97, 122, 95, 101, 
	48, 57, 65, 90, 97, 122, 95, 116, 
	48, 57, 65, 90, 97, 122, 95, 101, 
	48, 57, 65, 90, 97, 122, 95, 97, 
	108, 110, 113, 120, 48, 57, 65, 90, 
	98, 122, 95, 99, 48, 57, 65, 90, 
	97, 122, 95, 104, 48, 57, 65, 90, 
	97, 122, 95, 115, 48, 57, 65, 90, 
	97, 122, 95, 101, 48, 57, 65, 90, 
	97, 122, 95, 105, 119, 48, 57, 65, 
	90, 97, 122, 95, 102, 48, 57, 65, 
	90, 97, 122, 95, 104, 48, 57, 65, 
	90, 97, 122, 95, 101, 48, 57, 65, 
	90, 97, 122, 95, 110, 48, 57, 65, 
	90, 97, 122, 95, 99, 100, 117, 48, 
	57, 65, 90, 97, 122, 95, 97, 48, 
	57, 65, 90, 98, 122, 95, 112, 48, 
	57, 65, 90, 97, 122, 95, 115, 48, 
	57, 65, 90, 97, 122, 95, 117, 48, 
	57, 65, 90, 97, 122, 95, 108, 48, 
	57, 65, 90, 97, 122, 95, 97, 48, 
	57, 65, 90, 98, 122, 95, 116, 48, 
	57, 65, 90, 97, 122, 95, 101, 48, 
	57, 65, 90, 97, 122, 95, 100, 48, 
	57, 65, 90, 97, 122, 32, 95, 9, 
	10, 48, 57, 65, 90, 97, 122, 39, 
	95, 48, 57, 65, 90, 97, 122, 95, 
	111, 48, 57, 65, 90, 97, 122, 95, 
	114, 48, 57, 65, 90, 97, 122, 95, 
	102, 48, 57, 65, 90, 97, 122, 95, 
	104, 48, 57, 65, 90, 97, 122, 95, 
	101, 105, 48, 57, 65, 90, 97, 122, 
	95, 110, 48, 57, 65, 90, 97, 122, 
	95, 108, 48, 57, 65, 90, 97, 122, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	95, 109, 48, 57, 65, 90, 97, 122, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	95, 114, 48, 57, 65, 90, 97, 122, 
	95, 97, 48, 57, 65, 90, 98, 122, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	95, 105, 48, 57, 65, 90, 97, 122, 
	95, 111, 48, 57, 65, 90, 97, 122, 
	95, 110, 48, 57, 65, 90, 97, 122, 
	95, 117, 48, 57, 65, 90, 97, 122, 
	95, 97, 48, 57, 65, 90, 98, 122, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	95, 105, 48, 57, 65, 90, 97, 122, 
	95, 111, 48, 57, 65, 90, 97, 122, 
	95, 110, 48, 57, 65, 90, 97, 122, 
	95, 112, 116, 48, 57, 65, 90, 97, 
	122, 95, 97, 48, 57, 65, 90, 98, 
	122, 95, 110, 48, 57, 65, 90, 97, 
	122, 95, 100, 48, 57, 65, 90, 97, 
	122, 95, 97, 48, 57, 65, 90, 98, 
	122, 95, 98, 48, 57, 65, 90, 97, 
	122, 95, 108, 48, 57, 65, 90, 97, 
	122, 95, 101, 48, 57, 65, 90, 97, 
	122, 95, 101, 48, 57, 65, 90, 97, 
	122, 95, 110, 114, 48, 57, 65, 90, 
	97, 122, 95, 100, 48, 57, 65, 90, 
	97, 122, 95, 115, 48, 57, 65, 90, 
	97, 122, 95, 110, 48, 57, 65, 90, 
	97, 122, 95, 97, 48, 57, 65, 90, 
	98, 122, 95, 108, 48, 57, 65, 90, 
	97, 122, 95, 97, 105, 108, 111, 117, 
	48, 57, 65, 90, 98, 122, 95, 108, 
	48, 57, 65, 90, 97, 122, 95, 115, 
	48, 57, 65, 90, 97, 122, 95, 101, 
	48, 57, 65, 90, 97, 122, 95, 110, 
	48, 57, 65, 90, 97, 122, 95, 97, 
	48, 57, 65, 90, 98, 122, 95, 108, 
	48, 57, 65, 90, 97, 122, 95, 111, 
	48, 57, 65, 90, 97, 122, 95, 119, 
	48, 57, 65, 90, 97, 122, 95, 114, 
	48, 57, 65, 90, 97, 122, 95, 110, 
	48, 57, 65, 90, 97, 122, 95, 99, 
	48, 57, 65, 90, 97, 122, 95, 116, 
	48, 57, 65, 90, 97, 122, 95, 105, 
	48, 57, 65, 90, 97, 122, 95, 111, 
	48, 57, 65, 90, 97, 122, 95, 110, 
	48, 57, 65, 90, 97, 122, 95, 102, 
	109, 110, 48, 57, 65, 90, 97, 122, 
	95, 112, 48, 57, 65, 90, 97, 122, 
	95, 111, 117, 48, 57, 65, 90, 97, 
	122, 95, 114, 48, 57, 65, 90, 97, 
	122, 95, 116, 48, 57, 65, 90, 97, 
	122, 95, 114, 48, 57, 65, 90, 97, 
	122, 95, 101, 48, 57, 65, 90, 97, 
	122, 95, 105, 110, 112, 48, 57, 65, 
	90, 97, 122, 95, 116, 48, 57, 65, 
	90, 97, 122, 95, 105, 48, 57, 65, 
	90, 97, 122, 95, 97, 48, 57, 65, 
	90, 98, 122, 95, 108, 48, 57, 65, 
	90, 97, 122, 32, 95, 9, 10, 48, 
	57, 65, 90, 97, 122, 95, 101, 48, 
	57, 65, 90, 97, 122, 95, 114, 48, 
	57, 65, 90, 97, 122, 95, 117, 48, 
	57, 65, 90, 97, 122, 95, 116, 48, 
	57, 65, 90, 97, 122, 95, 111, 48, 
	57, 65, 90, 97, 122, 95, 111, 48, 
	57, 65, 90, 97, 122, 95, 112, 48, 
	57, 65, 90, 97, 122, 95, 111, 48, 
	57, 65, 90, 97, 122, 95, 100, 48, 
	57, 65, 90, 97, 122, 95, 101, 48, 
	57, 65, 90, 97, 122, 95, 108, 48, 
	57, 65, 90, 97, 122, 95, 111, 48, 
	57, 65, 90, 97, 122, 95, 116, 48, 
	57, 65, 90, 97, 122, 95, 112, 114, 
	117, 48, 57, 65, 90, 97, 122, 95, 
	101, 48, 57, 65, 90, 97, 122, 95, 
	114, 48, 57, 65, 90, 97, 122, 95, 
	97, 48, 57, 65, 90, 98, 122, 95, 
	116, 48, 57, 65, 90, 97, 122, 95, 
	111, 48, 57, 65, 90, 97, 122, 95, 
	114, 48, 57, 65, 90, 97, 122, 32, 
	95, 9, 10, 48, 57, 65, 90, 97, 
	122, 95, 116, 48, 57, 65, 90, 97, 
	122, 95, 101, 112, 48, 57, 65, 90, 
	97, 122, 95, 114, 48, 57, 65, 90, 
	97, 122, 95, 117, 48, 57, 65, 90, 
	97, 122, 95, 116, 48, 57, 65, 90, 
	97, 122, 95, 97, 114, 117, 48, 57, 
	65, 90, 98, 122, 95, 99, 114, 48, 
	57, 65, 90, 97, 122, 95, 107, 48, 
	57, 65, 90, 97, 122, 95, 97, 48, 
	57, 65, 90, 98, 122, 95, 103, 48, 
	57, 65, 90, 97, 122, 95, 101, 48, 
	57, 65, 90, 97, 122, 95, 97, 116, 
	48, 57, 65, 90, 98, 122, 95, 109, 
	48, 57, 65, 90, 97, 122, 95, 101, 
	48, 57, 65, 90, 97, 122, 95, 116, 
	48, 57, 65, 90, 97, 122, 95, 101, 
	48, 57, 65, 90, 97, 122, 95, 114, 
	48, 57, 65, 90, 97, 122, 95, 105, 
	48, 57, 65, 90, 97, 122, 95, 97, 
	48, 57, 65, 90, 98, 122, 95, 108, 
	48, 57, 65, 90, 97, 122, 95, 111, 
	48, 57, 65, 90, 97, 122, 95, 116, 
	48, 57, 65, 90, 97, 122, 95, 101, 
	48, 57, 65, 90, 97, 122, 95, 99, 
	48, 57, 65, 90, 97, 122, 95, 116, 
	48, 57, 65, 90, 97, 122, 95, 101, 
	48, 57, 65, 90, 97, 122, 95, 100, 
	48, 57, 65, 90, 97, 122, 95, 98, 
	114, 48, 57, 65, 90, 97, 122, 95, 
	108, 48, 57, 65, 90, 97, 122, 95, 
	105, 48, 57, 65, 90, 97, 122, 95, 
	99, 48, 57, 65, 90, 97, 122, 95, 
	101, 48, 57, 65, 90, 97, 122, 95, 
	101, 48, 57, 65, 90, 97, 122, 95, 
	99, 100, 112, 116, 48, 57, 65, 90, 
	97, 122, 95, 111, 48, 57, 65, 90, 
	97, 122, 95, 114, 48, 57, 65, 90, 
	97, 122, 95, 100, 48, 57, 65, 90, 
	97, 122, 95, 101, 48, 57, 65, 90, 
	97, 122, 95, 99, 48, 57, 65, 90, 
	97, 122, 95, 108, 48, 57, 65, 90, 
	97, 122, 95, 97, 48, 57, 65, 90, 
	98, 122, 95, 114, 48, 57, 65, 90, 
	97, 122, 95, 101, 48, 57, 65, 90, 
	97, 122, 95, 108, 48, 57, 65, 90, 
	97, 122, 95, 97, 48, 57, 65, 90, 
	98, 122, 95, 99, 48, 57, 65, 90, 
	97, 122, 95, 101, 48, 57, 65, 90, 
	97, 122, 95, 97, 48, 57, 65, 90, 
	98, 122, 95, 98, 48, 57, 65, 90, 
	97, 122, 95, 108, 48, 57, 65, 90, 
	97, 122, 95, 101, 48, 57, 65, 90, 
	97, 122, 95, 117, 48, 57, 65, 90, 
	97, 122, 95, 114, 48, 57, 65, 90, 
	97, 122, 95, 110, 48, 57, 65, 90, 
	97, 122, 95, 116, 48, 57, 65, 90, 
	97, 122, 95, 114, 48, 57, 65, 90, 
	97, 122, 95, 101, 48, 57, 65, 90, 
	97, 122, 95, 97, 48, 57, 65, 90, 
	98, 122, 95, 109, 48, 57, 65, 90, 
	97, 122, 95, 104, 114, 121, 48, 57, 
	65, 90, 97, 122, 95, 101, 48, 57, 
	65, 90, 97, 122, 95, 110, 48, 57, 
	65, 90, 97, 122, 95, 117, 48, 57, 
	65, 90, 97, 122, 95, 101, 48, 57, 
	65, 90, 97, 122, 95, 112, 48, 57, 
	65, 90, 97, 122, 95, 101, 48, 57, 
	65, 90, 97, 122, 95, 104, 105, 48, 
	57, 65, 90, 97, 122, 95, 101, 105, 
	48, 57, 65, 90, 97, 122, 95, 110, 
	48, 57, 65, 90, 97, 122, 95, 108, 
	48, 57, 65, 90, 97, 122, 95, 101, 
	48, 57, 65, 90, 97, 122, 95, 116, 
	48, 57, 65, 90, 97, 122, 95, 104, 
	48, 57, 65, 90, 97, 122, 95, 105, 
	48, 57, 65, 90, 97, 122, 95, 110, 
	48, 57, 65, 90, 97, 122, 0
};

static const char _umodLexer_single_lengths[] = {
	2, 9, 2, 1, 9, 1, 2, 2, 
	0, 6, 3, 1, 2, 9, 2, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 41, 2, 
	2, 1, 1, 5, 2, 1, 3, 2, 
	0, 1, 0, 1, 1, 3, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 6, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 4, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 1, 
	1, 2, 2, 2, 2, 3, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 6, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 4, 2, 
	3, 2, 2, 2, 2, 4, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	4, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 4, 3, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	2, 5, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 4, 2, 2, 2, 2, 
	2, 2, 3, 3, 2, 2, 2, 2, 
	2, 2, 2
};

static const char _umodLexer_range_lengths[] = {
	0, 1, 3, 4, 1, 0, 0, 1, 
	1, 3, 3, 4, 3, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 3, 0, 
	0, 4, 0, 0, 0, 0, 1, 1, 
	1, 0, 1, 0, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 4, 0, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 4, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 4, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3
};

static const short _umodLexer_index_offsets[] = {
	0, 3, 14, 20, 26, 37, 39, 42, 
	46, 48, 58, 65, 71, 77, 88, 91, 
	93, 95, 97, 99, 101, 103, 105, 107, 
	109, 111, 113, 115, 117, 119, 121, 123, 
	125, 127, 129, 131, 133, 135, 137, 182, 
	185, 188, 194, 196, 202, 205, 207, 212, 
	216, 218, 220, 222, 224, 229, 236, 242, 
	248, 254, 260, 266, 272, 278, 285, 291, 
	297, 303, 309, 315, 321, 327, 334, 340, 
	346, 352, 358, 364, 370, 377, 383, 389, 
	395, 401, 408, 414, 420, 426, 432, 438, 
	444, 451, 457, 463, 469, 475, 481, 487, 
	493, 499, 505, 512, 518, 524, 530, 536, 
	542, 548, 554, 564, 570, 576, 582, 588, 
	595, 601, 607, 613, 619, 627, 633, 639, 
	645, 651, 657, 663, 669, 675, 681, 688, 
	690, 695, 701, 707, 713, 719, 726, 732, 
	738, 744, 750, 756, 762, 768, 774, 780, 
	786, 792, 798, 804, 810, 816, 822, 828, 
	835, 841, 847, 853, 859, 865, 871, 877, 
	883, 890, 896, 902, 908, 914, 920, 930, 
	936, 942, 948, 954, 960, 966, 972, 978, 
	984, 990, 996, 1002, 1008, 1014, 1020, 1028, 
	1034, 1041, 1047, 1053, 1059, 1065, 1073, 1079, 
	1085, 1091, 1097, 1104, 1110, 1116, 1122, 1128, 
	1134, 1140, 1146, 1152, 1158, 1164, 1170, 1176, 
	1182, 1190, 1196, 1202, 1208, 1214, 1220, 1226, 
	1233, 1239, 1246, 1252, 1258, 1264, 1272, 1279, 
	1285, 1291, 1297, 1303, 1310, 1316, 1322, 1328, 
	1334, 1340, 1346, 1352, 1358, 1364, 1370, 1376, 
	1382, 1388, 1394, 1400, 1407, 1413, 1419, 1425, 
	1431, 1437, 1446, 1452, 1458, 1464, 1470, 1476, 
	1482, 1488, 1494, 1500, 1506, 1512, 1518, 1524, 
	1530, 1536, 1542, 1548, 1554, 1560, 1566, 1572, 
	1578, 1584, 1590, 1596, 1604, 1610, 1616, 1622, 
	1628, 1634, 1640, 1647, 1654, 1660, 1666, 1672, 
	1678, 1684, 1690
};

static const short _umodLexer_indicies[] = {
	2, 3, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 0, 6, 7, 
	5, 5, 5, 4, 7, 5, 5, 5, 
	5, 8, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 4, 11, 10, 11, 
	12, 10, 14, 14, 15, 13, 15, 13, 
	17, 18, 19, 20, 21, 22, 17, 19, 
	19, 16, 17, 18, 19, 17, 19, 19, 
	16, 24, 23, 23, 23, 23, 4, 25, 
	24, 23, 23, 23, 4, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 4, 
	27, 28, 26, 29, 26, 30, 26, 31, 
	26, 32, 26, 33, 26, 34, 26, 35, 
	26, 36, 26, 37, 26, 38, 26, 39, 
	26, 40, 26, 41, 26, 42, 26, 43, 
	26, 45, 44, 46, 44, 47, 44, 48, 
	44, 49, 44, 50, 44, 51, 44, 52, 
	44, 54, 55, 55, 54, 56, 57, 58, 
	59, 60, 61, 62, 63, 64, 65, 67, 
	68, 69, 70, 71, 73, 74, 75, 72, 
	76, 77, 78, 79, 80, 81, 82, 83, 
	84, 85, 86, 87, 88, 89, 90, 91, 
	92, 93, 66, 72, 72, 53, 54, 54, 
	94, 2, 3, 1, 7, 5, 5, 5, 
	5, 95, 97, 96, 99, 63, 63, 60, 
	75, 98, 10, 101, 100, 102, 101, 104, 
	105, 105, 66, 103, 105, 105, 104, 103, 
	15, 103, 107, 106, 109, 108, 109, 4, 
	72, 72, 72, 72, 4, 72, 110, 111, 
	72, 72, 72, 96, 72, 112, 72, 72, 
	72, 96, 72, 113, 72, 72, 72, 96, 
	72, 114, 72, 72, 72, 96, 72, 115, 
	72, 72, 72, 96, 72, 116, 72, 72, 
	72, 96, 72, 117, 72, 72, 72, 96, 
	72, 118, 72, 72, 72, 96, 72, 119, 
	120, 72, 72, 72, 96, 72, 121, 72, 
	72, 72, 96, 72, 122, 72, 72, 72, 
	96, 72, 123, 72, 72, 72, 96, 72, 
	124, 72, 72, 72, 96, 72, 125, 72, 
	72, 72, 96, 72, 126, 72, 72, 72, 
	96, 72, 127, 72, 72, 72, 96, 72, 
	128, 129, 72, 72, 72, 96, 72, 130, 
	72, 72, 72, 96, 72, 131, 72, 72, 
	72, 96, 72, 132, 72, 72, 72, 96, 
	72, 133, 72, 72, 72, 96, 72, 134, 
	72, 72, 72, 96, 72, 135, 72, 72, 
	72, 96, 72, 136, 137, 72, 72, 72, 
	96, 72, 138, 72, 72, 72, 96, 72, 
	139, 72, 72, 72, 96, 72, 140, 72, 
	72, 72, 96, 72, 141, 72, 72, 72, 
	96, 72, 142, 143, 72, 72, 72, 96, 
	72, 144, 72, 72, 72, 96, 72, 145, 
	72, 72, 72, 96, 72, 146, 72, 72, 
	72, 96, 72, 148, 72, 72, 72, 147, 
	72, 149, 72, 72, 72, 96, 72, 150, 
	72, 72, 72, 96, 72, 151, 152, 72, 
	72, 72, 96, 72, 153, 72, 72, 72, 
	96, 72, 154, 72, 72, 72, 96, 72, 
	155, 72, 72, 72, 96, 72, 156, 72, 
	72, 72, 96, 72, 157, 72, 72, 72, 
	96, 72, 158, 72, 72, 72, 96, 72, 
	159, 72, 72, 72, 96, 72, 160, 72, 
	72, 72, 96, 72, 161, 72, 72, 72, 
	96, 72, 162, 163, 72, 72, 72, 96, 
	72, 164, 72, 72, 72, 96, 72, 165, 
	72, 72, 72, 96, 72, 166, 72, 72, 
	72, 96, 72, 167, 72, 72, 72, 96, 
	72, 168, 72, 72, 72, 96, 72, 169, 
	72, 72, 72, 96, 72, 170, 72, 72, 
	72, 96, 72, 171, 172, 173, 174, 175, 
	72, 72, 72, 96, 72, 176, 72, 72, 
	72, 96, 72, 177, 72, 72, 72, 96, 
	72, 178, 72, 72, 72, 96, 72, 179, 
	72, 72, 72, 96, 72, 181, 182, 72, 
	72, 72, 180, 72, 183, 72, 72, 72, 
	96, 72, 184, 72, 72, 72, 96, 72, 
	185, 72, 72, 72, 96, 72, 186, 72, 
	72, 72, 96, 72, 187, 188, 189, 72, 
	72, 72, 96, 72, 190, 72, 72, 72, 
	96, 72, 191, 72, 72, 72, 96, 72, 
	192, 72, 72, 72, 96, 72, 193, 72, 
	72, 72, 96, 72, 194, 72, 72, 72, 
	96, 72, 195, 72, 72, 72, 96, 72, 
	196, 72, 72, 72, 96, 72, 197, 72, 
	72, 72, 96, 72, 198, 72, 72, 72, 
	96, 200, 72, 200, 72, 72, 72, 199, 
	18, 201, 19, 19, 19, 19, 4, 19, 
	202, 19, 19, 19, 201, 19, 203, 19, 
	19, 19, 201, 19, 204, 19, 19, 19, 
	201, 19, 205, 19, 19, 19, 201, 19, 
	206, 207, 19, 19, 19, 201, 19, 208, 
	19, 19, 19, 201, 19, 209, 19, 19, 
	19, 201, 19, 210, 19, 19, 19, 201, 
	72, 211, 72, 72, 72, 96, 72, 212, 
	72, 72, 72, 96, 72, 213, 72, 72, 
	72, 96, 72, 214, 72, 72, 72, 96, 
	72, 215, 72, 72, 72, 96, 72, 216, 
	72, 72, 72, 96, 72, 217, 72, 72, 
	72, 96, 72, 218, 72, 72, 72, 96, 
	72, 219, 72, 72, 72, 96, 72, 220, 
	72, 72, 72, 96, 72, 221, 72, 72, 
	72, 96, 72, 222, 72, 72, 72, 96, 
	72, 223, 72, 72, 72, 96, 72, 224, 
	72, 72, 72, 96, 72, 225, 226, 72, 
	72, 72, 96, 72, 227, 72, 72, 72, 
	96, 72, 228, 72, 72, 72, 96, 72, 
	229, 72, 72, 72, 96, 72, 230, 72, 
	72, 72, 96, 72, 231, 72, 72, 72, 
	96, 72, 232, 72, 72, 72, 96, 72, 
	233, 72, 72, 72, 96, 72, 234, 72, 
	72, 72, 96, 72, 235, 236, 72, 72, 
	72, 96, 72, 237, 72, 72, 72, 96, 
	72, 238, 72, 72, 72, 96, 72, 239, 
	72, 72, 72, 96, 72, 240, 72, 72, 
	72, 96, 72, 241, 72, 72, 72, 96, 
	72, 242, 243, 244, 245, 246, 72, 72, 
	72, 96, 72, 247, 72, 72, 72, 96, 
	72, 248, 72, 72, 72, 96, 72, 249, 
	72, 72, 72, 96, 72, 250, 72, 72, 
	72, 96, 72, 251, 72, 72, 72, 96, 
	72, 252, 72, 72, 72, 96, 72, 253, 
	72, 72, 72, 96, 72, 254, 72, 72, 
	72, 96, 72, 255, 72, 72, 72, 96, 
	72, 256, 72, 72, 72, 96, 72, 257, 
	72, 72, 72, 96, 72, 258, 72, 72, 
	72, 96, 72, 259, 72, 72, 72, 96, 
	72, 260, 72, 72, 72, 96, 72, 261, 
	72, 72, 72, 96, 72, 262, 263, 264, 
	72, 72, 72, 96, 72, 265, 72, 72, 
	72, 96, 72, 266, 267, 72, 72, 72, 
	96, 72, 268, 72, 72, 72, 96, 72, 
	269, 72, 72, 72, 96, 72, 270, 72, 
	72, 72, 96, 72, 271, 72, 72, 72, 
	96, 72, 273, 274, 275, 72, 72, 72, 
	272, 72, 276, 72, 72, 72, 96, 72, 
	277, 72, 72, 72, 96, 72, 278, 72, 
	72, 72, 96, 72, 279, 72, 72, 72, 
	96, 281, 72, 281, 72, 72, 72, 280, 
	72, 282, 72, 72, 72, 96, 72, 283, 
	72, 72, 72, 96, 72, 284, 72, 72, 
	72, 96, 72, 285, 72, 72, 72, 96, 
	72, 286, 72, 72, 72, 96, 72, 287, 
	72, 72, 72, 96, 72, 288, 72, 72, 
	72, 96, 72, 289, 72, 72, 72, 96, 
	72, 290, 72, 72, 72, 96, 72, 291, 
	72, 72, 72, 96, 72, 292, 72, 72, 
	72, 96, 72, 293, 72, 72, 72, 96, 
	72, 294, 72, 72, 72, 96, 72, 295, 
	296, 297, 72, 72, 72, 96, 72, 298, 
	72, 72, 72, 96, 72, 299, 72, 72, 
	72, 96, 72, 300, 72, 72, 72, 96, 
	72, 301, 72, 72, 72, 96, 72, 302, 
	72, 72, 72, 96, 72, 303, 72, 72, 
	72, 96, 305, 72, 305, 72, 72, 72, 
	304, 72, 306, 72, 72, 72, 96, 72, 
	307, 308, 72, 72, 72, 96, 72, 309, 
	72, 72, 72, 96, 72, 310, 72, 72, 
	72, 96, 72, 311, 72, 72, 72, 96, 
	72, 312, 313, 314, 72, 72, 72, 96, 
	72, 315, 316, 72, 72, 72, 96, 72, 
	317, 72, 72, 72, 96, 72, 318, 72, 
	72, 72, 96, 72, 319, 72, 72, 72, 
	96, 72, 320, 72, 72, 72, 96, 72, 
	321, 322, 72, 72, 72, 96, 72, 323, 
	72, 72, 72, 96, 72, 324, 72, 72, 
	72, 96, 72, 325, 72, 72, 72, 96, 
	72, 326, 72, 72, 72, 96, 72, 327, 
	72, 72, 72, 96, 72, 328, 72, 72, 
	72, 96, 72, 329, 72, 72, 72, 96, 
	72, 330, 72, 72, 72, 96, 72, 331, 
	72, 72, 72, 96, 72, 332, 72, 72, 
	72, 96, 72, 333, 72, 72, 72, 96, 
	72, 334, 72, 72, 72, 96, 72, 335, 
	72, 72, 72, 96, 72, 336, 72, 72, 
	72, 96, 72, 337, 72, 72, 72, 96, 
	72, 338, 339, 72, 72, 72, 96, 72, 
	340, 72, 72, 72, 96, 72, 341, 72, 
	72, 72, 96, 72, 342, 72, 72, 72, 
	96, 72, 343, 72, 72, 72, 96, 72, 
	344, 72, 72, 72, 96, 72, 345, 346, 
	347, 348, 72, 72, 72, 96, 72, 349, 
	72, 72, 72, 96, 72, 350, 72, 72, 
	72, 96, 72, 351, 72, 72, 72, 96, 
	72, 352, 72, 72, 72, 96, 72, 353, 
	72, 72, 72, 96, 72, 354, 72, 72, 
	72, 96, 72, 355, 72, 72, 72, 96, 
	72, 356, 72, 72, 72, 96, 72, 357, 
	72, 72, 72, 96, 72, 358, 72, 72, 
	72, 96, 72, 359, 72, 72, 72, 96, 
	72, 360, 72, 72, 72, 96, 72, 361, 
	72, 72, 72, 96, 72, 362, 72, 72, 
	72, 96, 72, 363, 72, 72, 72, 96, 
	72, 364, 72, 72, 72, 96, 72, 365, 
	72, 72, 72, 96, 72, 366, 72, 72, 
	72, 96, 72, 367, 72, 72, 72, 96, 
	72, 368, 72, 72, 72, 96, 72, 369, 
	72, 72, 72, 96, 72, 370, 72, 72, 
	72, 96, 72, 371, 72, 72, 72, 96, 
	72, 372, 72, 72, 72, 96, 72, 373, 
	72, 72, 72, 96, 72, 374, 375, 376, 
	72, 72, 72, 96, 72, 377, 72, 72, 
	72, 96, 72, 378, 72, 72, 72, 96, 
	72, 379, 72, 72, 72, 96, 72, 380, 
	72, 72, 72, 96, 72, 381, 72, 72, 
	72, 96, 72, 382, 72, 72, 72, 96, 
	72, 383, 384, 72, 72, 72, 96, 72, 
	385, 386, 72, 72, 72, 96, 72, 387, 
	72, 72, 72, 96, 72, 388, 72, 72, 
	72, 96, 72, 389, 72, 72, 72, 96, 
	72, 390, 72, 72, 72, 96, 72, 391, 
	72, 72, 72, 96, 72, 392, 72, 72, 
	72, 96, 72, 393, 72, 72, 72, 96, 
	0
};

static const short _umodLexer_trans_targs[] = {
	38, 0, 38, 1, 38, 2, 42, 4, 
	38, 38, 5, 6, 38, 38, 8, 48, 
	38, 10, 11, 128, 129, 131, 132, 12, 
	13, 127, 38, 15, 23, 16, 17, 18, 
	19, 20, 21, 22, 38, 24, 25, 26, 
	27, 28, 29, 38, 38, 31, 32, 33, 
	34, 35, 36, 37, 38, 38, 39, 38, 
	40, 41, 38, 38, 38, 38, 38, 38, 
	43, 44, 46, 49, 38, 50, 51, 51, 
	52, 38, 38, 38, 53, 69, 76, 98, 
	106, 166, 182, 199, 202, 206, 208, 221, 
	248, 270, 275, 282, 38, 38, 38, 38, 
	38, 3, 38, 38, 38, 45, 38, 38, 
	47, 7, 38, 38, 38, 38, 54, 61, 
	55, 56, 57, 58, 59, 60, 52, 52, 
	62, 63, 64, 65, 66, 67, 68, 52, 
	70, 73, 71, 72, 52, 74, 75, 52, 
	77, 80, 78, 79, 52, 81, 82, 87, 
	83, 84, 85, 38, 86, 52, 88, 89, 
	91, 90, 52, 92, 93, 94, 95, 96, 
	97, 52, 99, 100, 52, 101, 102, 103, 
	104, 105, 52, 107, 109, 116, 145, 151, 
	108, 52, 110, 111, 38, 112, 113, 52, 
	114, 115, 52, 117, 126, 137, 118, 119, 
	120, 121, 122, 123, 124, 125, 52, 38, 
	9, 38, 130, 128, 128, 133, 134, 135, 
	128, 136, 128, 138, 139, 140, 141, 142, 
	143, 144, 52, 146, 147, 148, 149, 150, 
	52, 152, 159, 153, 154, 155, 156, 157, 
	158, 52, 160, 161, 163, 162, 52, 164, 
	165, 52, 167, 170, 173, 175, 176, 168, 
	169, 52, 171, 172, 52, 174, 52, 52, 
	177, 178, 179, 180, 181, 52, 52, 183, 
	189, 184, 185, 187, 186, 52, 188, 52, 
	38, 190, 195, 197, 191, 192, 193, 194, 
	38, 14, 196, 52, 198, 52, 200, 201, 
	52, 203, 204, 205, 52, 207, 52, 209, 
	52, 216, 210, 211, 212, 213, 214, 215, 
	38, 30, 217, 218, 219, 52, 220, 52, 
	222, 236, 243, 223, 227, 224, 225, 226, 
	52, 228, 233, 229, 230, 231, 232, 52, 
	234, 235, 52, 237, 238, 239, 240, 241, 
	242, 52, 244, 247, 245, 246, 52, 52, 
	249, 250, 253, 259, 267, 251, 252, 52, 
	254, 255, 256, 257, 258, 52, 260, 261, 
	262, 263, 264, 265, 266, 52, 268, 269, 
	52, 271, 272, 273, 274, 52, 276, 278, 
	280, 277, 52, 279, 52, 281, 52, 283, 
	287, 284, 285, 52, 286, 52, 288, 289, 
	290, 52
};

static const short _umodLexer_trans_actions[] = {
	95, 0, 13, 0, 97, 0, 276, 0, 
	89, 93, 0, 0, 47, 91, 0, 0, 
	83, 0, 0, 111, 0, 0, 0, 0, 
	0, 111, 85, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 9, 0, 0, 0, 
	0, 0, 0, 7, 87, 0, 0, 0, 
	0, 0, 0, 0, 11, 49, 0, 45, 
	5, 285, 31, 33, 23, 43, 27, 21, 
	0, 5, 5, 0, 29, 0, 282, 279, 
	276, 39, 41, 25, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 35, 37, 77, 81, 
	65, 0, 73, 15, 71, 0, 79, 67, 
	5, 0, 75, 17, 69, 19, 0, 0, 
	0, 0, 0, 0, 0, 0, 114, 117, 
	0, 0, 0, 0, 0, 0, 0, 120, 
	0, 0, 0, 0, 123, 0, 0, 126, 
	0, 0, 0, 0, 129, 0, 0, 0, 
	0, 0, 0, 53, 0, 132, 0, 0, 
	0, 0, 135, 0, 0, 0, 0, 0, 
	0, 138, 0, 0, 141, 0, 0, 0, 
	0, 0, 144, 0, 0, 0, 0, 0, 
	0, 147, 0, 0, 55, 0, 0, 150, 
	0, 0, 153, 0, 159, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 156, 57, 
	0, 51, 0, 102, 99, 0, 0, 0, 
	105, 0, 108, 0, 0, 0, 0, 0, 
	0, 0, 162, 0, 0, 0, 0, 0, 
	165, 0, 0, 0, 0, 0, 0, 0, 
	0, 168, 0, 0, 0, 0, 171, 0, 
	0, 174, 0, 0, 0, 0, 0, 0, 
	0, 177, 0, 0, 180, 0, 183, 186, 
	0, 0, 0, 0, 0, 189, 192, 0, 
	0, 0, 0, 0, 0, 195, 0, 198, 
	59, 0, 0, 0, 0, 0, 0, 5, 
	61, 0, 0, 201, 0, 204, 0, 0, 
	207, 0, 0, 0, 210, 0, 213, 0, 
	216, 0, 0, 0, 0, 0, 0, 5, 
	63, 0, 0, 0, 0, 219, 0, 222, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	225, 0, 0, 0, 0, 0, 0, 228, 
	0, 0, 231, 0, 0, 0, 0, 0, 
	0, 234, 0, 0, 0, 0, 237, 240, 
	0, 0, 0, 0, 0, 0, 0, 243, 
	0, 0, 0, 0, 0, 246, 0, 0, 
	0, 0, 0, 0, 0, 249, 0, 0, 
	252, 0, 0, 0, 0, 255, 0, 0, 
	0, 0, 258, 0, 261, 0, 264, 0, 
	0, 0, 0, 267, 0, 270, 0, 0, 
	0, 273
};

static const short _umodLexer_to_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0
};

static const short _umodLexer_from_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 3, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0
};

static const short _umodLexer_eof_trans[] = {
	1, 1, 5, 9, 5, 10, 10, 14, 
	14, 17, 17, 5, 5, 5, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 45, 45, 
	45, 45, 45, 45, 45, 45, 0, 95, 
	96, 96, 97, 99, 101, 103, 104, 104, 
	104, 107, 109, 5, 5, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 148, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 181, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 200, 202, 
	5, 202, 202, 202, 202, 202, 202, 202, 
	202, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 273, 97, 97, 
	97, 97, 281, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 305, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 97, 
	97, 97, 97
};

static const int umodLexer_start = 38;
static const int umodLexer_first_final = 38;
static const int umodLexer_error = -1;

static const int umodLexer_en_main = 38;


#line 13 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"

// no idea about the origins of this value, ask Flori ;)
int EVIL=0x666;

using namespace umod::lex;

Lexer::Lexer(const char *source, unsigned int length)
    : m_source(source)
    , m_source_end(source + length)
    , m_source_eof(m_source_end)
    , m_ts(nullptr), m_te(nullptr)
    , m_current_state(EVIL), m_act(0)
    , m_position(std::make_pair(1, 1))
{

}

Lexer::Lexer(const std::string &source): Lexer(source.c_str(), source.length())
{

}

Lexer::~Lexer()
{

}

Lexeme *Lexer::consume(void)
{
    
#line 176 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"


    Lexeme::Type type = Lexeme::Type::SPACES;

    if (m_source == m_source_end)
    {
        m_ts = m_te = m_source;
        type = Lexeme::Type::EOI;
    }
    else
    {
        
#line 188 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
        
#line 189 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
        
#line 190 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
        
#line 191 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
        
#line 192 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
        
#line 193 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
        
#line 194 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"

        
#line 999 "lexer.cc"
	{
	(  m_current_state) = umodLexer_start;
	(  m_ts) = 0;
	(  m_te) = 0;
	( m_act) = 0;
	}

#line 196 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
        
#line 1009 "lexer.cc"
	{
	int _klen;
	unsigned int _trans;
	const char *_acts;
	unsigned int _nacts;
	const char *_keys;

	if ( (   m_source) == (  m_source_end) )
		goto _test_eof;
_resume:
	_acts = _umodLexer_actions + _umodLexer_from_state_actions[(  m_current_state)];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 1:
#line 1 "NONE"
	{(  m_ts) = (   m_source);}
	break;
#line 1028 "lexer.cc"
		}
	}

	_keys = _umodLexer_trans_keys + _umodLexer_key_offsets[(  m_current_state)];
	_trans = _umodLexer_index_offsets[(  m_current_state)];

	_klen = _umodLexer_single_lengths[(  m_current_state)];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( (*(   m_source)) < *_mid )
				_upper = _mid - 1;
			else if ( (*(   m_source)) > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (unsigned int)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _umodLexer_range_lengths[(  m_current_state)];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( (*(   m_source)) < _mid[0] )
				_upper = _mid - 2;
			else if ( (*(   m_source)) > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += (unsigned int)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	_trans = _umodLexer_indicies[_trans];
_eof_trans:
	(  m_current_state) = _umodLexer_trans_targs[_trans];

	if ( _umodLexer_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _umodLexer_actions + _umodLexer_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 2:
#line 1 "NONE"
	{(  m_te) = (   m_source)+1;}
	break;
	case 3:
#line 77 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 1;}
	break;
	case 4:
#line 78 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 2;}
	break;
	case 5:
#line 79 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 3;}
	break;
	case 6:
#line 80 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 4;}
	break;
	case 7:
#line 84 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 8;}
	break;
	case 8:
#line 86 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 9;}
	break;
	case 9:
#line 87 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 10;}
	break;
	case 10:
#line 88 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 11;}
	break;
	case 11:
#line 89 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 12;}
	break;
	case 12:
#line 90 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 13;}
	break;
	case 13:
#line 91 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 14;}
	break;
	case 14:
#line 92 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 15;}
	break;
	case 15:
#line 94 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 17;}
	break;
	case 16:
#line 95 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 18;}
	break;
	case 17:
#line 96 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 19;}
	break;
	case 18:
#line 97 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 20;}
	break;
	case 19:
#line 98 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 21;}
	break;
	case 20:
#line 100 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 23;}
	break;
	case 21:
#line 101 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 24;}
	break;
	case 22:
#line 102 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 25;}
	break;
	case 23:
#line 103 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 26;}
	break;
	case 24:
#line 104 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 27;}
	break;
	case 25:
#line 105 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 28;}
	break;
	case 26:
#line 106 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 29;}
	break;
	case 27:
#line 107 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 30;}
	break;
	case 28:
#line 108 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 31;}
	break;
	case 29:
#line 109 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 32;}
	break;
	case 30:
#line 110 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 33;}
	break;
	case 31:
#line 111 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 34;}
	break;
	case 32:
#line 112 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 35;}
	break;
	case 33:
#line 113 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 36;}
	break;
	case 34:
#line 114 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 37;}
	break;
	case 35:
#line 115 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 38;}
	break;
	case 36:
#line 116 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 39;}
	break;
	case 37:
#line 119 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 42;}
	break;
	case 38:
#line 120 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 43;}
	break;
	case 39:
#line 121 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 44;}
	break;
	case 40:
#line 122 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 45;}
	break;
	case 41:
#line 123 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 46;}
	break;
	case 42:
#line 125 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 48;}
	break;
	case 43:
#line 126 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 49;}
	break;
	case 44:
#line 127 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 50;}
	break;
	case 45:
#line 128 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 51;}
	break;
	case 46:
#line 129 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 52;}
	break;
	case 47:
#line 130 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 53;}
	break;
	case 48:
#line 131 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 54;}
	break;
	case 49:
#line 132 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 55;}
	break;
	case 50:
#line 133 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 56;}
	break;
	case 51:
#line 134 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 57;}
	break;
	case 52:
#line 135 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 58;}
	break;
	case 53:
#line 136 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 59;}
	break;
	case 54:
#line 137 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 60;}
	break;
	case 55:
#line 138 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 61;}
	break;
	case 56:
#line 139 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 62;}
	break;
	case 57:
#line 140 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 63;}
	break;
	case 58:
#line 141 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 64;}
	break;
	case 59:
#line 142 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 65;}
	break;
	case 60:
#line 143 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 66;}
	break;
	case 61:
#line 144 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 67;}
	break;
	case 62:
#line 146 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 68;}
	break;
	case 63:
#line 152 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 73;}
	break;
	case 64:
#line 167 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 87;}
	break;
	case 65:
#line 174 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 92;}
	break;
	case 66:
#line 81 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::INITIAL_EQUATION; {(   m_source)++; goto _out; } }}
	break;
	case 67:
#line 82 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::INITIAL_ALGORITHM; {(   m_source)++; goto _out; } }}
	break;
	case 68:
#line 83 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::OPERATOR_FUNCTION; {(   m_source)++; goto _out; } }}
	break;
	case 69:
#line 147 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::STRING; {(   m_source)++; goto _out; } }}
	break;
	case 70:
#line 150 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::DOT_STAR; {(   m_source)++; goto _out; }}}
	break;
	case 71:
#line 151 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::ASSIGN_OP; {(   m_source)++; goto _out; }}}
	break;
	case 72:
#line 152 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::REL_OP; {(   m_source)++; goto _out; }}}
	break;
	case 73:
#line 153 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::ADD_OP_PARTIAL; {(   m_source)++; goto _out; }}}
	break;
	case 74:
#line 154 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::MUL_OP_PARTIAL; {(   m_source)++; goto _out; }}}
	break;
	case 75:
#line 155 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::EXP_OP; {(   m_source)++; goto _out; }}}
	break;
	case 76:
#line 158 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::COMMA; {(   m_source)++; goto _out; }}}
	break;
	case 77:
#line 159 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::SEMICOLON; {(   m_source)++; goto _out; }}}
	break;
	case 78:
#line 161 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::OPAREN; {(   m_source)++; goto _out; }}}
	break;
	case 79:
#line 162 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::CPAREN; {(   m_source)++; goto _out; }}}
	break;
	case 80:
#line 163 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::OBRACE; {(   m_source)++; goto _out; }}}
	break;
	case 81:
#line 164 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::CBRACE; {(   m_source)++; goto _out; }}}
	break;
	case 82:
#line 165 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::OBRACKET; {(   m_source)++; goto _out; }}}
	break;
	case 83:
#line 166 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::CBRACKET; {(   m_source)++; goto _out; }}}
	break;
	case 84:
#line 168 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::PLUS; {(   m_source)++; goto _out; }}}
	break;
	case 85:
#line 171 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::NEWLINE; {(   m_source)++; goto _out; } }}
	break;
	case 86:
#line 173 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ {(   m_source)++; goto _out; } }}
	break;
	case 87:
#line 174 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ {(   m_source)++; goto _out; } }}
	break;
	case 88:
#line 84 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::END_IDENT; {(   m_source)++; goto _out; } }}
	break;
	case 89:
#line 93 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::CONNECT; {(   m_source)++; goto _out; }}}
	break;
	case 90:
#line 99 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::ELSE; {(   m_source)++; goto _out; }}}
	break;
	case 91:
#line 103 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::END; {(   m_source)++; goto _out; }}}
	break;
	case 92:
#line 117 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::IN; {(   m_source)++; goto _out; }}}
	break;
	case 93:
#line 118 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::INITIAL; {(   m_source)++; goto _out; }}}
	break;
	case 94:
#line 124 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::OPERATOR; {(   m_source)++; goto _out; }}}
	break;
	case 95:
#line 146 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::IDENT; {(   m_source)++; goto _out; } }}
	break;
	case 96:
#line 148 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::UNSIGNED_NUMBER; {(   m_source)++; goto _out; } }}
	break;
	case 97:
#line 152 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::REL_OP; {(   m_source)++; goto _out; }}}
	break;
	case 98:
#line 154 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::MUL_OP_PARTIAL; {(   m_source)++; goto _out; }}}
	break;
	case 99:
#line 157 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::DOT; {(   m_source)++; goto _out; }}}
	break;
	case 100:
#line 160 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::COLON; {(   m_source)++; goto _out; }}}
	break;
	case 101:
#line 172 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::SPACES; {(   m_source)++; goto _out; } }}
	break;
	case 102:
#line 173 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ {(   m_source)++; goto _out; } }}
	break;
	case 103:
#line 174 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ {(   m_source)++; goto _out; } }}
	break;
	case 104:
#line 103 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{{(   m_source) = (((  m_te)))-1;}{ type = Lexeme::Type::END; {(   m_source)++; goto _out; }}}
	break;
	case 105:
#line 118 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{{(   m_source) = (((  m_te)))-1;}{ type = Lexeme::Type::INITIAL; {(   m_source)++; goto _out; }}}
	break;
	case 106:
#line 124 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{{(   m_source) = (((  m_te)))-1;}{ type = Lexeme::Type::OPERATOR; {(   m_source)++; goto _out; }}}
	break;
	case 107:
#line 146 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{{(   m_source) = (((  m_te)))-1;}{ type = Lexeme::Type::IDENT; {(   m_source)++; goto _out; } }}
	break;
	case 108:
#line 148 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{{(   m_source) = (((  m_te)))-1;}{ type = Lexeme::Type::UNSIGNED_NUMBER; {(   m_source)++; goto _out; } }}
	break;
	case 109:
#line 154 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{{(   m_source) = (((  m_te)))-1;}{ type = Lexeme::Type::MUL_OP_PARTIAL; {(   m_source)++; goto _out; }}}
	break;
	case 110:
#line 174 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{{(   m_source) = (((  m_te)))-1;}{ {(   m_source)++; goto _out; } }}
	break;
	case 111:
#line 1 "NONE"
	{	switch( ( m_act) ) {
	case 1:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::END_IF; {(   m_source)++; goto _out; } }
	break;
	case 2:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::END_FOR; {(   m_source)++; goto _out; } }
	break;
	case 3:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::END_WHEN; {(   m_source)++; goto _out; } }
	break;
	case 4:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::END_WHILE; {(   m_source)++; goto _out; } }
	break;
	case 8:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::END_IDENT; {(   m_source)++; goto _out; } }
	break;
	case 9:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::ALGORITHM; {(   m_source)++; goto _out; }}
	break;
	case 10:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::AND; {(   m_source)++; goto _out; }}
	break;
	case 11:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::ANNOTATION; {(   m_source)++; goto _out; }}
	break;
	case 12:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::BLOCK; {(   m_source)++; goto _out; }}
	break;
	case 13:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::BREAK; {(   m_source)++; goto _out; }}
	break;
	case 14:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::CLASS; {(   m_source)++; goto _out; }}
	break;
	case 15:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::CONNECTOR; {(   m_source)++; goto _out; }}
	break;
	case 17:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::CONSTANT; {(   m_source)++; goto _out; }}
	break;
	case 18:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::CONSTRAINEDBY; {(   m_source)++; goto _out; }}
	break;
	case 19:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::DER; {(   m_source)++; goto _out; }}
	break;
	case 20:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::DISCRETE; {(   m_source)++; goto _out; }}
	break;
	case 21:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::EACH; {(   m_source)++; goto _out; }}
	break;
	case 23:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::ELSEIF; {(   m_source)++; goto _out; }}
	break;
	case 24:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::ELSEWHEN; {(   m_source)++; goto _out; }}
	break;
	case 25:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::ENCAPSULATED; {(   m_source)++; goto _out; }}
	break;
	case 26:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::END; {(   m_source)++; goto _out; }}
	break;
	case 27:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::ENUMERATION; {(   m_source)++; goto _out; }}
	break;
	case 28:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::EQUATION; {(   m_source)++; goto _out; }}
	break;
	case 29:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::EXPANDABLE; {(   m_source)++; goto _out; }}
	break;
	case 30:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::EXTENDS; {(   m_source)++; goto _out; }}
	break;
	case 31:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::EXTERNAL; {(   m_source)++; goto _out; }}
	break;
	case 32:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::FALSE; {(   m_source)++; goto _out; }}
	break;
	case 33:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::FINAL; {(   m_source)++; goto _out; }}
	break;
	case 34:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::FLOW; {(   m_source)++; goto _out; }}
	break;
	case 35:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::FOR; {(   m_source)++; goto _out; }}
	break;
	case 36:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::FUNCTION; {(   m_source)++; goto _out; }}
	break;
	case 37:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::IF; {(   m_source)++; goto _out; }}
	break;
	case 38:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::IMPORT; {(   m_source)++; goto _out; }}
	break;
	case 39:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::IMPURE; {(   m_source)++; goto _out; }}
	break;
	case 42:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::INNER; {(   m_source)++; goto _out; }}
	break;
	case 43:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::INPUT; {(   m_source)++; goto _out; }}
	break;
	case 44:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::LOOP; {(   m_source)++; goto _out; }}
	break;
	case 45:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::MODEL; {(   m_source)++; goto _out; }}
	break;
	case 46:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::NOT; {(   m_source)++; goto _out; }}
	break;
	case 48:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::OR; {(   m_source)++; goto _out; }}
	break;
	case 49:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::OUTER; {(   m_source)++; goto _out; }}
	break;
	case 50:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::OUTPUT; {(   m_source)++; goto _out; }}
	break;
	case 51:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::PACKAGE; {(   m_source)++; goto _out; }}
	break;
	case 52:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::PARAMETER; {(   m_source)++; goto _out; }}
	break;
	case 53:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::PARTIAL; {(   m_source)++; goto _out; }}
	break;
	case 54:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::PROTECTED; {(   m_source)++; goto _out; }}
	break;
	case 55:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::PUBLIC; {(   m_source)++; goto _out; }}
	break;
	case 56:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::PURE; {(   m_source)++; goto _out; }}
	break;
	case 57:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::RECORD; {(   m_source)++; goto _out; }}
	break;
	case 58:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::REDECLARE; {(   m_source)++; goto _out; }}
	break;
	case 59:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::REPLACEABLE; {(   m_source)++; goto _out; }}
	break;
	case 60:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::RETURN; {(   m_source)++; goto _out; }}
	break;
	case 61:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::STREAM; {(   m_source)++; goto _out; }}
	break;
	case 62:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::THEN; {(   m_source)++; goto _out; }}
	break;
	case 63:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::TRUE; {(   m_source)++; goto _out; }}
	break;
	case 64:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::TYPE; {(   m_source)++; goto _out; }}
	break;
	case 65:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::WHEN; {(   m_source)++; goto _out; }}
	break;
	case 66:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::WHILE; {(   m_source)++; goto _out; }}
	break;
	case 67:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::WITHIN; {(   m_source)++; goto _out; }}
	break;
	case 68:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::IDENT; {(   m_source)++; goto _out; } }
	break;
	case 73:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::REL_OP; {(   m_source)++; goto _out; }}
	break;
	case 87:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::EQUAL; {(   m_source)++; goto _out; }}
	break;
	case 92:
	{{(   m_source) = (((  m_te)))-1;} {(   m_source)++; goto _out; } }
	break;
	}
	}
	break;
#line 1725 "lexer.cc"
		}
	}

_again:
	_acts = _umodLexer_actions + _umodLexer_to_state_actions[(  m_current_state)];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 0:
#line 1 "NONE"
	{(  m_ts) = 0;}
	break;
#line 1738 "lexer.cc"
		}
	}

	if ( ++(   m_source) != (  m_source_end) )
		goto _resume;
	_test_eof: {}
	if ( (   m_source) == ( m_source_eof) )
	{
	if ( _umodLexer_eof_trans[(  m_current_state)] > 0 ) {
		_trans = _umodLexer_eof_trans[(  m_current_state)] - 1;
		goto _eof_trans;
	}
	}

	_out: {}
	}

#line 197 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
    }

    unsigned int size = m_te - m_ts;
    Lexeme::pos_t position = m_position;

    if (type == Lexeme::Type::NEWLINE)
    {
        m_position.first += 1;
        m_position.second = size;
    }
    else
    {
        m_position.second += size;
    }

    return new Lexeme(type, std::string(m_ts, size), position);
}
