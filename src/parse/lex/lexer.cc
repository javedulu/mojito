
#line 1 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
#include <stddef.h>
#include <string>
#include <utility>
#include "lexer.h"
#include "lexeme.h"

// NOTE : if the lemon-parser is properly done then all the #define in lemon-parser.h should be equal
//        to total no of tokens
//        lemon-parser.h is generated by lemon based on whats used in parser , so if all the cases are
//              considered then there should be no token not # defined failsafe

#line 12 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"

#line 17 "lexer.cc"
static const char _umodLexer_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	69, 1, 70, 1, 71, 1, 72, 1, 
	73, 1, 74, 1, 75, 1, 76, 1, 
	77, 1, 78, 1, 79, 1, 80, 1, 
	81, 1, 82, 1, 83, 1, 84, 1, 
	85, 1, 86, 1, 87, 1, 88, 1, 
	89, 1, 90, 1, 91, 1, 92, 1, 
	93, 1, 94, 1, 95, 1, 96, 1, 
	97, 1, 98, 1, 99, 1, 100, 1, 
	101, 1, 102, 1, 103, 1, 104, 1, 
	105, 1, 106, 1, 107, 1, 108, 1, 
	109, 1, 110, 2, 2, 3, 2, 2, 
	4, 2, 2, 5, 2, 2, 6, 2, 
	2, 7, 2, 2, 8, 2, 2, 9, 
	2, 2, 10, 2, 2, 11, 2, 2, 
	12, 2, 2, 13, 2, 2, 14, 2, 
	2, 15, 2, 2, 16, 2, 2, 17, 
	2, 2, 18, 2, 2, 19, 2, 2, 
	20, 2, 2, 21, 2, 2, 22, 2, 
	2, 23, 2, 2, 24, 2, 2, 25, 
	2, 2, 26, 2, 2, 27, 2, 2, 
	28, 2, 2, 29, 2, 2, 30, 2, 
	2, 31, 2, 2, 32, 2, 2, 33, 
	2, 2, 34, 2, 2, 35, 2, 2, 
	36, 2, 2, 37, 2, 2, 38, 2, 
	2, 39, 2, 2, 40, 2, 2, 41, 
	2, 2, 42, 2, 2, 43, 2, 2, 
	44, 2, 2, 45, 2, 2, 46, 2, 
	2, 47, 2, 2, 48, 2, 2, 49, 
	2, 2, 50, 2, 2, 51, 2, 2, 
	52, 2, 2, 53, 2, 2, 54, 2, 
	2, 55, 2, 2, 56, 2, 2, 57, 
	2, 2, 58, 2, 2, 59, 2, 2, 
	60, 2, 2, 61, 2, 2, 62, 2, 
	2, 63, 2, 2, 64, 2, 2, 65, 
	2, 2, 66, 2, 2, 67, 2, 2, 
	68
};

static const short _umodLexer_key_offsets[] = {
	0, 2, 4, 6, 8, 10, 14, 16, 
	17, 19, 30, 34, 35, 36, 37, 38, 
	39, 40, 41, 42, 43, 44, 45, 46, 
	47, 48, 49, 52, 53, 54, 55, 56, 
	57, 58, 59, 107, 109, 111, 119, 121, 
	124, 128, 130, 137, 139, 140, 145, 146, 
	148, 149, 159, 168, 177, 186, 195, 204, 
	213, 222, 232, 241, 250, 259, 268, 277, 
	286, 295, 305, 314, 323, 332, 341, 350, 
	359, 369, 378, 387, 396, 405, 415, 424, 
	433, 442, 451, 460, 469, 479, 488, 497, 
	506, 515, 524, 533, 542, 551, 560, 570, 
	579, 588, 597, 606, 615, 624, 633, 646, 
	655, 664, 673, 682, 692, 701, 710, 719, 
	728, 739, 748, 757, 766, 775, 784, 793, 
	802, 811, 820, 830, 838, 847, 856, 865, 
	874, 884, 893, 902, 911, 920, 929, 938, 
	947, 956, 965, 974, 983, 992, 1001, 1010, 
	1019, 1028, 1037, 1047, 1056, 1065, 1074, 1083, 
	1092, 1101, 1110, 1119, 1129, 1138, 1147, 1156, 
	1165, 1174, 1187, 1196, 1205, 1214, 1223, 1232, 
	1241, 1250, 1259, 1268, 1277, 1286, 1295, 1304, 
	1313, 1322, 1333, 1342, 1352, 1361, 1370, 1379, 
	1388, 1399, 1408, 1417, 1426, 1435, 1445, 1454, 
	1463, 1472, 1481, 1490, 1499, 1508, 1517, 1526, 
	1535, 1544, 1553, 1562, 1573, 1582, 1591, 1600, 
	1609, 1618, 1627, 1637, 1646, 1656, 1665, 1674, 
	1683, 1694, 1704, 1713, 1722, 1731, 1740, 1750, 
	1759, 1768, 1777, 1786, 1795, 1804, 1813, 1822, 
	1831, 1840, 1849, 1858, 1867, 1876, 1885, 1895, 
	1904, 1913, 1922, 1931, 1940, 1952, 1961, 1970, 
	1979, 1988, 1997, 2006, 2015, 2024, 2033, 2042, 
	2051, 2060, 2069, 2078, 2087, 2096, 2105, 2114, 
	2123, 2132, 2141, 2150, 2159, 2168, 2177, 2188, 
	2197, 2206, 2215, 2224, 2233, 2242, 2252, 2262, 
	2271, 2280, 2289, 2298, 2307, 2316
};

static const char _umodLexer_trans_keys[] = {
	34, 92, 34, 92, 39, 92, 39, 92, 
	48, 57, 43, 45, 48, 57, 48, 57, 
	42, 42, 47, 9, 32, 36, 95, 102, 
	105, 119, 65, 90, 97, 122, 9, 32, 
	97, 101, 108, 103, 111, 114, 105, 116, 
	104, 109, 113, 117, 97, 116, 105, 111, 
	110, 9, 32, 102, 117, 110, 99, 116, 
	105, 111, 110, 9, 10, 13, 32, 34, 
	36, 39, 40, 41, 42, 43, 44, 45, 
	46, 47, 58, 59, 60, 61, 62, 91, 
	93, 94, 95, 97, 98, 99, 100, 101, 
	102, 105, 108, 109, 110, 111, 112, 114, 
	115, 116, 119, 123, 125, 48, 57, 65, 
	90, 103, 122, 9, 32, 34, 92, 36, 
	95, 48, 57, 65, 90, 97, 122, 39, 
	92, 46, 48, 57, 69, 101, 48, 57, 
	48, 57, 42, 43, 45, 47, 94, 48, 
	57, 42, 47, 10, 46, 69, 101, 48, 
	57, 61, 61, 62, 61, 36, 95, 108, 
	110, 48, 57, 65, 90, 97, 122, 36, 
	95, 103, 48, 57, 65, 90, 97, 122, 
	36, 95, 111, 48, 57, 65, 90, 97, 
	122, 36, 95, 114, 48, 57, 65, 90, 
	97, 122, 36, 95, 105, 48, 57, 65, 
	90, 97, 122, 36, 95, 116, 48, 57, 
	65, 90, 97, 122, 36, 95, 104, 48, 
	57, 65, 90, 97, 122, 36, 95, 109, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	100, 110, 48, 57, 65, 90, 97, 122, 
	36, 95, 111, 48, 57, 65, 90, 97, 
	122, 36, 95, 116, 48, 57, 65, 90, 
	97, 122, 36, 95, 97, 48, 57, 65, 
	90, 98, 122, 36, 95, 116, 48, 57, 
	65, 90, 97, 122, 36, 95, 105, 48, 
	57, 65, 90, 97, 122, 36, 95, 111, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	110, 48, 57, 65, 90, 97, 122, 36, 
	95, 108, 114, 48, 57, 65, 90, 97, 
	122, 36, 95, 111, 48, 57, 65, 90, 
	97, 122, 36, 95, 99, 48, 57, 65, 
	90, 97, 122, 36, 95, 107, 48, 57, 
	65, 90, 97, 122, 36, 95, 101, 48, 
	57, 65, 90, 97, 122, 36, 95, 97, 
	48, 57, 65, 90, 98, 122, 36, 95, 
	107, 48, 57, 65, 90, 97, 122, 36, 
	95, 108, 111, 48, 57, 65, 90, 97, 
	122, 36, 95, 97, 48, 57, 65, 90, 
	98, 122, 36, 95, 115, 48, 57, 65, 
	90, 97, 122, 36, 95, 115, 48, 57, 
	65, 90, 97, 122, 36, 95, 110, 48, 
	57, 65, 90, 97, 122, 36, 95, 110, 
	115, 48, 57, 65, 90, 97, 122, 36, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	36, 95, 99, 48, 57, 65, 90, 97, 
	122, 36, 95, 116, 48, 57, 65, 90, 
	97, 122, 36, 95, 111, 48, 57, 65, 
	90, 97, 122, 36, 95, 114, 48, 57, 
	65, 90, 97, 122, 36, 95, 116, 48, 
	57, 65, 90, 97, 122, 36, 95, 97, 
	114, 48, 57, 65, 90, 98, 122, 36, 
	95, 110, 48, 57, 65, 90, 97, 122, 
	36, 95, 116, 48, 57, 65, 90, 97, 
	122, 36, 95, 97, 48, 57, 65, 90, 
	98, 122, 36, 95, 105, 48, 57, 65, 
	90, 97, 122, 36, 95, 110, 48, 57, 
	65, 90, 97, 122, 36, 95, 101, 48, 
	57, 65, 90, 97, 122, 36, 95, 100, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	98, 48, 57, 65, 90, 97, 122, 36, 
	95, 121, 48, 57, 65, 90, 97, 122, 
	36, 95, 101, 105, 48, 57, 65, 90, 
	97, 122, 36, 95, 114, 48, 57, 65, 
	90, 97, 122, 36, 95, 115, 48, 57, 
	65, 90, 97, 122, 36, 95, 99, 48, 
	57, 65, 90, 97, 122, 36, 95, 114, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	101, 48, 57, 65, 90, 97, 122, 36, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	36, 95, 101, 48, 57, 65, 90, 97, 
	122, 36, 95, 97, 108, 110, 113, 120, 
	48, 57, 65, 90, 98, 122, 36, 95, 
	99, 48, 57, 65, 90, 97, 122, 36, 
	95, 104, 48, 57, 65, 90, 97, 122, 
	36, 95, 115, 48, 57, 65, 90, 97, 
	122, 36, 95, 101, 48, 57, 65, 90, 
	97, 122, 36, 95, 105, 119, 48, 57, 
	65, 90, 97, 122, 36, 95, 102, 48, 
	57, 65, 90, 97, 122, 36, 95, 104, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	101, 48, 57, 65, 90, 97, 122, 36, 
	95, 110, 48, 57, 65, 90, 97, 122, 
	36, 95, 99, 100, 117, 48, 57, 65, 
	90, 97, 122, 36, 95, 97, 48, 57, 
	65, 90, 98, 122, 36, 95, 112, 48, 
	57, 65, 90, 97, 122, 36, 95, 115, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	117, 48, 57, 65, 90, 97, 122, 36, 
	95, 108, 48, 57, 65, 90, 97, 122, 
	36, 95, 97, 48, 57, 65, 90, 98, 
	122, 36, 95, 116, 48, 57, 65, 90, 
	97, 122, 36, 95, 101, 48, 57, 65, 
	90, 97, 122, 36, 95, 100, 48, 57, 
	65, 90, 97, 122, 9, 32, 36, 95, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	111, 48, 57, 65, 90, 97, 122, 36, 
	95, 114, 48, 57, 65, 90, 97, 122, 
	36, 95, 102, 48, 57, 65, 90, 97, 
	122, 36, 95, 104, 48, 57, 65, 90, 
	97, 122, 36, 95, 101, 105, 48, 57, 
	65, 90, 97, 122, 36, 95, 110, 48, 
	57, 65, 90, 97, 122, 36, 95, 108, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	101, 48, 57, 65, 90, 97, 122, 36, 
	95, 109, 48, 57, 65, 90, 97, 122, 
	36, 95, 101, 48, 57, 65, 90, 97, 
	122, 36, 95, 114, 48, 57, 65, 90, 
	97, 122, 36, 95, 97, 48, 57, 65, 
	90, 98, 122, 36, 95, 116, 48, 57, 
	65, 90, 97, 122, 36, 95, 105, 48, 
	57, 65, 90, 97, 122, 36, 95, 111, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	110, 48, 57, 65, 90, 97, 122, 36, 
	95, 117, 48, 57, 65, 90, 97, 122, 
	36, 95, 97, 48, 57, 65, 90, 98, 
	122, 36, 95, 116, 48, 57, 65, 90, 
	97, 122, 36, 95, 105, 48, 57, 65, 
	90, 97, 122, 36, 95, 111, 48, 57, 
	65, 90, 97, 122, 36, 95, 110, 48, 
	57, 65, 90, 97, 122, 36, 95, 112, 
	116, 48, 57, 65, 90, 97, 122, 36, 
	95, 97, 48, 57, 65, 90, 98, 122, 
	36, 95, 110, 48, 57, 65, 90, 97, 
	122, 36, 95, 100, 48, 57, 65, 90, 
	97, 122, 36, 95, 97, 48, 57, 65, 
	90, 98, 122, 36, 95, 98, 48, 57, 
	65, 90, 97, 122, 36, 95, 108, 48, 
	57, 65, 90, 97, 122, 36, 95, 101, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	101, 48, 57, 65, 90, 97, 122, 36, 
	95, 110, 114, 48, 57, 65, 90, 97, 
	122, 36, 95, 100, 48, 57, 65, 90, 
	97, 122, 36, 95, 115, 48, 57, 65, 
	90, 97, 122, 36, 95, 110, 48, 57, 
	65, 90, 97, 122, 36, 95, 97, 48, 
	57, 65, 90, 98, 122, 36, 95, 108, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	97, 105, 108, 111, 117, 48, 57, 65, 
	90, 98, 122, 36, 95, 108, 48, 57, 
	65, 90, 97, 122, 36, 95, 115, 48, 
	57, 65, 90, 97, 122, 36, 95, 101, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	110, 48, 57, 65, 90, 97, 122, 36, 
	95, 97, 48, 57, 65, 90, 98, 122, 
	36, 95, 108, 48, 57, 65, 90, 97, 
	122, 36, 95, 111, 48, 57, 65, 90, 
	97, 122, 36, 95, 119, 48, 57, 65, 
	90, 97, 122, 36, 95, 114, 48, 57, 
	65, 90, 97, 122, 36, 95, 110, 48, 
	57, 65, 90, 97, 122, 36, 95, 99, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	116, 48, 57, 65, 90, 97, 122, 36, 
	95, 105, 48, 57, 65, 90, 97, 122, 
	36, 95, 111, 48, 57, 65, 90, 97, 
	122, 36, 95, 110, 48, 57, 65, 90, 
	97, 122, 36, 95, 102, 109, 110, 48, 
	57, 65, 90, 97, 122, 36, 95, 112, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	111, 117, 48, 57, 65, 90, 97, 122, 
	36, 95, 114, 48, 57, 65, 90, 97, 
	122, 36, 95, 116, 48, 57, 65, 90, 
	97, 122, 36, 95, 114, 48, 57, 65, 
	90, 97, 122, 36, 95, 101, 48, 57, 
	65, 90, 97, 122, 36, 95, 105, 110, 
	112, 48, 57, 65, 90, 97, 122, 36, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	36, 95, 105, 48, 57, 65, 90, 97, 
	122, 36, 95, 97, 48, 57, 65, 90, 
	98, 122, 36, 95, 108, 48, 57, 65, 
	90, 97, 122, 9, 32, 36, 95, 48, 
	57, 65, 90, 97, 122, 36, 95, 101, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	114, 48, 57, 65, 90, 97, 122, 36, 
	95, 117, 48, 57, 65, 90, 97, 122, 
	36, 95, 116, 48, 57, 65, 90, 97, 
	122, 36, 95, 111, 48, 57, 65, 90, 
	97, 122, 36, 95, 111, 48, 57, 65, 
	90, 97, 122, 36, 95, 112, 48, 57, 
	65, 90, 97, 122, 36, 95, 111, 48, 
	57, 65, 90, 97, 122, 36, 95, 100, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	101, 48, 57, 65, 90, 97, 122, 36, 
	95, 108, 48, 57, 65, 90, 97, 122, 
	36, 95, 111, 48, 57, 65, 90, 97, 
	122, 36, 95, 116, 48, 57, 65, 90, 
	97, 122, 36, 95, 112, 114, 117, 48, 
	57, 65, 90, 97, 122, 36, 95, 101, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	114, 48, 57, 65, 90, 97, 122, 36, 
	95, 97, 48, 57, 65, 90, 98, 122, 
	36, 95, 116, 48, 57, 65, 90, 97, 
	122, 36, 95, 111, 48, 57, 65, 90, 
	97, 122, 36, 95, 114, 48, 57, 65, 
	90, 97, 122, 9, 32, 36, 95, 48, 
	57, 65, 90, 97, 122, 36, 95, 116, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	101, 112, 48, 57, 65, 90, 97, 122, 
	36, 95, 114, 48, 57, 65, 90, 97, 
	122, 36, 95, 117, 48, 57, 65, 90, 
	97, 122, 36, 95, 116, 48, 57, 65, 
	90, 97, 122, 36, 95, 97, 114, 117, 
	48, 57, 65, 90, 98, 122, 36, 95, 
	99, 114, 48, 57, 65, 90, 97, 122, 
	36, 95, 107, 48, 57, 65, 90, 97, 
	122, 36, 95, 97, 48, 57, 65, 90, 
	98, 122, 36, 95, 103, 48, 57, 65, 
	90, 97, 122, 36, 95, 101, 48, 57, 
	65, 90, 97, 122, 36, 95, 97, 116, 
	48, 57, 65, 90, 98, 122, 36, 95, 
	109, 48, 57, 65, 90, 97, 122, 36, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	36, 95, 116, 48, 57, 65, 90, 97, 
	122, 36, 95, 101, 48, 57, 65, 90, 
	97, 122, 36, 95, 114, 48, 57, 65, 
	90, 97, 122, 36, 95, 105, 48, 57, 
	65, 90, 97, 122, 36, 95, 97, 48, 
	57, 65, 90, 98, 122, 36, 95, 108, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	111, 48, 57, 65, 90, 97, 122, 36, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	36, 95, 101, 48, 57, 65, 90, 97, 
	122, 36, 95, 99, 48, 57, 65, 90, 
	97, 122, 36, 95, 116, 48, 57, 65, 
	90, 97, 122, 36, 95, 101, 48, 57, 
	65, 90, 97, 122, 36, 95, 100, 48, 
	57, 65, 90, 97, 122, 36, 95, 98, 
	114, 48, 57, 65, 90, 97, 122, 36, 
	95, 108, 48, 57, 65, 90, 97, 122, 
	36, 95, 105, 48, 57, 65, 90, 97, 
	122, 36, 95, 99, 48, 57, 65, 90, 
	97, 122, 36, 95, 101, 48, 57, 65, 
	90, 97, 122, 36, 95, 101, 48, 57, 
	65, 90, 97, 122, 36, 95, 99, 100, 
	112, 116, 48, 57, 65, 90, 97, 122, 
	36, 95, 111, 48, 57, 65, 90, 97, 
	122, 36, 95, 114, 48, 57, 65, 90, 
	97, 122, 36, 95, 100, 48, 57, 65, 
	90, 97, 122, 36, 95, 101, 48, 57, 
	65, 90, 97, 122, 36, 95, 99, 48, 
	57, 65, 90, 97, 122, 36, 95, 108, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	97, 48, 57, 65, 90, 98, 122, 36, 
	95, 114, 48, 57, 65, 90, 97, 122, 
	36, 95, 101, 48, 57, 65, 90, 97, 
	122, 36, 95, 108, 48, 57, 65, 90, 
	97, 122, 36, 95, 97, 48, 57, 65, 
	90, 98, 122, 36, 95, 99, 48, 57, 
	65, 90, 97, 122, 36, 95, 101, 48, 
	57, 65, 90, 97, 122, 36, 95, 97, 
	48, 57, 65, 90, 98, 122, 36, 95, 
	98, 48, 57, 65, 90, 97, 122, 36, 
	95, 108, 48, 57, 65, 90, 97, 122, 
	36, 95, 101, 48, 57, 65, 90, 97, 
	122, 36, 95, 117, 48, 57, 65, 90, 
	97, 122, 36, 95, 114, 48, 57, 65, 
	90, 97, 122, 36, 95, 110, 48, 57, 
	65, 90, 97, 122, 36, 95, 116, 48, 
	57, 65, 90, 97, 122, 36, 95, 114, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	101, 48, 57, 65, 90, 97, 122, 36, 
	95, 97, 48, 57, 65, 90, 98, 122, 
	36, 95, 109, 48, 57, 65, 90, 97, 
	122, 36, 95, 104, 114, 121, 48, 57, 
	65, 90, 97, 122, 36, 95, 101, 48, 
	57, 65, 90, 97, 122, 36, 95, 110, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	117, 48, 57, 65, 90, 97, 122, 36, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	36, 95, 112, 48, 57, 65, 90, 97, 
	122, 36, 95, 101, 48, 57, 65, 90, 
	97, 122, 36, 95, 104, 105, 48, 57, 
	65, 90, 97, 122, 36, 95, 101, 105, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	110, 48, 57, 65, 90, 97, 122, 36, 
	95, 108, 48, 57, 65, 90, 97, 122, 
	36, 95, 101, 48, 57, 65, 90, 97, 
	122, 36, 95, 116, 48, 57, 65, 90, 
	97, 122, 36, 95, 104, 48, 57, 65, 
	90, 97, 122, 36, 95, 105, 48, 57, 
	65, 90, 97, 122, 36, 95, 110, 48, 
	57, 65, 90, 97, 122, 0
};

static const char _umodLexer_single_lengths[] = {
	2, 2, 2, 2, 0, 2, 0, 1, 
	2, 7, 4, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 3, 1, 1, 1, 1, 1, 
	1, 1, 42, 2, 2, 2, 2, 1, 
	2, 0, 5, 2, 1, 3, 1, 0, 
	1, 4, 3, 3, 3, 3, 3, 3, 
	3, 4, 3, 3, 3, 3, 3, 3, 
	3, 4, 3, 3, 3, 3, 3, 3, 
	4, 3, 3, 3, 3, 4, 3, 3, 
	3, 3, 3, 3, 4, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 4, 3, 
	3, 3, 3, 3, 3, 3, 7, 3, 
	3, 3, 3, 4, 3, 3, 3, 3, 
	5, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 4, 2, 3, 3, 3, 3, 
	4, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 4, 3, 3, 3, 3, 3, 
	3, 3, 3, 4, 3, 3, 3, 3, 
	3, 7, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 5, 3, 4, 3, 3, 3, 3, 
	5, 3, 3, 3, 3, 4, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 5, 3, 3, 3, 3, 
	3, 3, 4, 3, 4, 3, 3, 3, 
	5, 4, 3, 3, 3, 3, 4, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 4, 3, 
	3, 3, 3, 3, 6, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 5, 3, 
	3, 3, 3, 3, 3, 4, 4, 3, 
	3, 3, 3, 3, 3, 3
};

static const char _umodLexer_range_lengths[] = {
	0, 0, 0, 0, 1, 1, 1, 0, 
	0, 2, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 3, 0, 0, 3, 0, 1, 
	1, 1, 1, 0, 0, 1, 0, 1, 
	0, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3
};

static const short _umodLexer_index_offsets[] = {
	0, 3, 6, 9, 12, 14, 18, 20, 
	22, 25, 35, 40, 42, 44, 46, 48, 
	50, 52, 54, 56, 58, 60, 62, 64, 
	66, 68, 70, 74, 76, 78, 80, 82, 
	84, 86, 88, 134, 137, 140, 146, 149, 
	152, 156, 158, 165, 168, 170, 175, 177, 
	179, 181, 189, 196, 203, 210, 217, 224, 
	231, 238, 246, 253, 260, 267, 274, 281, 
	288, 295, 303, 310, 317, 324, 331, 338, 
	345, 353, 360, 367, 374, 381, 389, 396, 
	403, 410, 417, 424, 431, 439, 446, 453, 
	460, 467, 474, 481, 488, 495, 502, 510, 
	517, 524, 531, 538, 545, 552, 559, 570, 
	577, 584, 591, 598, 606, 613, 620, 627, 
	634, 643, 650, 657, 664, 671, 678, 685, 
	692, 699, 706, 714, 720, 727, 734, 741, 
	748, 756, 763, 770, 777, 784, 791, 798, 
	805, 812, 819, 826, 833, 840, 847, 854, 
	861, 868, 875, 883, 890, 897, 904, 911, 
	918, 925, 932, 939, 947, 954, 961, 968, 
	975, 982, 993, 1000, 1007, 1014, 1021, 1028, 
	1035, 1042, 1049, 1056, 1063, 1070, 1077, 1084, 
	1091, 1098, 1107, 1114, 1122, 1129, 1136, 1143, 
	1150, 1159, 1166, 1173, 1180, 1187, 1195, 1202, 
	1209, 1216, 1223, 1230, 1237, 1244, 1251, 1258, 
	1265, 1272, 1279, 1286, 1295, 1302, 1309, 1316, 
	1323, 1330, 1337, 1345, 1352, 1360, 1367, 1374, 
	1381, 1390, 1398, 1405, 1412, 1419, 1426, 1434, 
	1441, 1448, 1455, 1462, 1469, 1476, 1483, 1490, 
	1497, 1504, 1511, 1518, 1525, 1532, 1539, 1547, 
	1554, 1561, 1568, 1575, 1582, 1592, 1599, 1606, 
	1613, 1620, 1627, 1634, 1641, 1648, 1655, 1662, 
	1669, 1676, 1683, 1690, 1697, 1704, 1711, 1718, 
	1725, 1732, 1739, 1746, 1753, 1760, 1767, 1776, 
	1783, 1790, 1797, 1804, 1811, 1818, 1826, 1834, 
	1841, 1848, 1855, 1862, 1869, 1876
};

static const short _umodLexer_indicies[] = {
	2, 3, 1, 4, 3, 1, 2, 6, 
	5, 7, 6, 5, 8, 0, 10, 10, 
	11, 9, 11, 9, 14, 13, 14, 15, 
	13, 17, 17, 18, 18, 19, 20, 21, 
	18, 18, 16, 23, 23, 24, 25, 22, 
	26, 22, 27, 22, 28, 22, 29, 22, 
	30, 22, 31, 22, 32, 22, 33, 22, 
	34, 22, 35, 22, 36, 22, 37, 22, 
	38, 22, 39, 22, 40, 22, 42, 42, 
	43, 41, 44, 41, 45, 41, 46, 41, 
	47, 41, 48, 41, 49, 41, 50, 41, 
	52, 53, 53, 52, 54, 55, 56, 57, 
	58, 59, 60, 61, 62, 63, 64, 66, 
	67, 68, 69, 70, 71, 72, 73, 55, 
	74, 75, 76, 77, 78, 79, 80, 81, 
	82, 83, 84, 85, 86, 87, 88, 89, 
	90, 91, 65, 55, 55, 51, 52, 52, 
	92, 2, 3, 1, 55, 55, 55, 55, 
	55, 0, 2, 6, 5, 93, 94, 0, 
	96, 96, 8, 95, 11, 95, 98, 99, 
	99, 59, 73, 8, 97, 13, 101, 100, 
	102, 101, 8, 96, 96, 65, 95, 104, 
	103, 106, 105, 106, 0, 55, 55, 108, 
	109, 55, 55, 55, 107, 55, 55, 110, 
	55, 55, 55, 107, 55, 55, 111, 55, 
	55, 55, 107, 55, 55, 112, 55, 55, 
	55, 107, 55, 55, 113, 55, 55, 55, 
	107, 55, 55, 114, 55, 55, 55, 107, 
	55, 55, 115, 55, 55, 55, 107, 55, 
	55, 116, 55, 55, 55, 107, 55, 55, 
	117, 118, 55, 55, 55, 107, 55, 55, 
	119, 55, 55, 55, 107, 55, 55, 120, 
	55, 55, 55, 107, 55, 55, 121, 55, 
	55, 55, 107, 55, 55, 122, 55, 55, 
	55, 107, 55, 55, 123, 55, 55, 55, 
	107, 55, 55, 124, 55, 55, 55, 107, 
	55, 55, 125, 55, 55, 55, 107, 55, 
	55, 126, 127, 55, 55, 55, 107, 55, 
	55, 128, 55, 55, 55, 107, 55, 55, 
	129, 55, 55, 55, 107, 55, 55, 130, 
	55, 55, 55, 107, 55, 55, 131, 55, 
	55, 55, 107, 55, 55, 132, 55, 55, 
	55, 107, 55, 55, 133, 55, 55, 55, 
	107, 55, 55, 134, 135, 55, 55, 55, 
	107, 55, 55, 136, 55, 55, 55, 107, 
	55, 55, 137, 55, 55, 55, 107, 55, 
	55, 138, 55, 55, 55, 107, 55, 55, 
	139, 55, 55, 55, 107, 55, 55, 140, 
	141, 55, 55, 55, 107, 55, 55, 142, 
	55, 55, 55, 107, 55, 55, 143, 55, 
	55, 55, 107, 55, 55, 144, 55, 55, 
	55, 107, 55, 55, 146, 55, 55, 55, 
	145, 55, 55, 147, 55, 55, 55, 107, 
	55, 55, 148, 55, 55, 55, 107, 55, 
	55, 149, 150, 55, 55, 55, 107, 55, 
	55, 151, 55, 55, 55, 107, 55, 55, 
	152, 55, 55, 55, 107, 55, 55, 153, 
	55, 55, 55, 107, 55, 55, 154, 55, 
	55, 55, 107, 55, 55, 155, 55, 55, 
	55, 107, 55, 55, 156, 55, 55, 55, 
	107, 55, 55, 157, 55, 55, 55, 107, 
	55, 55, 158, 55, 55, 55, 107, 55, 
	55, 159, 55, 55, 55, 107, 55, 55, 
	160, 161, 55, 55, 55, 107, 55, 55, 
	162, 55, 55, 55, 107, 55, 55, 163, 
	55, 55, 55, 107, 55, 55, 164, 55, 
	55, 55, 107, 55, 55, 165, 55, 55, 
	55, 107, 55, 55, 166, 55, 55, 55, 
	107, 55, 55, 167, 55, 55, 55, 107, 
	55, 55, 168, 55, 55, 55, 107, 55, 
	55, 169, 170, 171, 172, 173, 55, 55, 
	55, 107, 55, 55, 174, 55, 55, 55, 
	107, 55, 55, 175, 55, 55, 55, 107, 
	55, 55, 176, 55, 55, 55, 107, 55, 
	55, 177, 55, 55, 55, 107, 55, 55, 
	179, 180, 55, 55, 55, 178, 55, 55, 
	181, 55, 55, 55, 107, 55, 55, 182, 
	55, 55, 55, 107, 55, 55, 183, 55, 
	55, 55, 107, 55, 55, 184, 55, 55, 
	55, 107, 55, 55, 185, 186, 187, 55, 
	55, 55, 107, 55, 55, 188, 55, 55, 
	55, 107, 55, 55, 189, 55, 55, 55, 
	107, 55, 55, 190, 55, 55, 55, 107, 
	55, 55, 191, 55, 55, 55, 107, 55, 
	55, 192, 55, 55, 55, 107, 55, 55, 
	193, 55, 55, 55, 107, 55, 55, 194, 
	55, 55, 55, 107, 55, 55, 195, 55, 
	55, 55, 107, 55, 55, 196, 55, 55, 
	55, 107, 17, 17, 55, 55, 55, 55, 
	55, 197, 18, 18, 18, 18, 18, 0, 
	18, 18, 199, 18, 18, 18, 198, 18, 
	18, 200, 18, 18, 18, 198, 18, 18, 
	201, 18, 18, 18, 198, 18, 18, 202, 
	18, 18, 18, 198, 18, 18, 203, 204, 
	18, 18, 18, 198, 18, 18, 205, 18, 
	18, 18, 198, 18, 18, 206, 18, 18, 
	18, 198, 18, 18, 207, 18, 18, 18, 
	198, 55, 55, 208, 55, 55, 55, 107, 
	55, 55, 209, 55, 55, 55, 107, 55, 
	55, 210, 55, 55, 55, 107, 55, 55, 
	211, 55, 55, 55, 107, 55, 55, 212, 
	55, 55, 55, 107, 55, 55, 213, 55, 
	55, 55, 107, 55, 55, 214, 55, 55, 
	55, 107, 55, 55, 215, 55, 55, 55, 
	107, 55, 55, 216, 55, 55, 55, 107, 
	55, 55, 217, 55, 55, 55, 107, 55, 
	55, 218, 55, 55, 55, 107, 55, 55, 
	219, 55, 55, 55, 107, 55, 55, 220, 
	55, 55, 55, 107, 55, 55, 221, 55, 
	55, 55, 107, 55, 55, 222, 223, 55, 
	55, 55, 107, 55, 55, 224, 55, 55, 
	55, 107, 55, 55, 225, 55, 55, 55, 
	107, 55, 55, 226, 55, 55, 55, 107, 
	55, 55, 227, 55, 55, 55, 107, 55, 
	55, 228, 55, 55, 55, 107, 55, 55, 
	229, 55, 55, 55, 107, 55, 55, 230, 
	55, 55, 55, 107, 55, 55, 231, 55, 
	55, 55, 107, 55, 55, 232, 233, 55, 
	55, 55, 107, 55, 55, 234, 55, 55, 
	55, 107, 55, 55, 235, 55, 55, 55, 
	107, 55, 55, 236, 55, 55, 55, 107, 
	55, 55, 237, 55, 55, 55, 107, 55, 
	55, 238, 55, 55, 55, 107, 55, 55, 
	239, 240, 241, 242, 243, 55, 55, 55, 
	107, 55, 55, 244, 55, 55, 55, 107, 
	55, 55, 245, 55, 55, 55, 107, 55, 
	55, 246, 55, 55, 55, 107, 55, 55, 
	247, 55, 55, 55, 107, 55, 55, 248, 
	55, 55, 55, 107, 55, 55, 249, 55, 
	55, 55, 107, 55, 55, 250, 55, 55, 
	55, 107, 55, 55, 251, 55, 55, 55, 
	107, 55, 55, 252, 55, 55, 55, 107, 
	55, 55, 253, 55, 55, 55, 107, 55, 
	55, 254, 55, 55, 55, 107, 55, 55, 
	255, 55, 55, 55, 107, 55, 55, 256, 
	55, 55, 55, 107, 55, 55, 257, 55, 
	55, 55, 107, 55, 55, 258, 55, 55, 
	55, 107, 55, 55, 259, 260, 261, 55, 
	55, 55, 107, 55, 55, 262, 55, 55, 
	55, 107, 55, 55, 263, 264, 55, 55, 
	55, 107, 55, 55, 265, 55, 55, 55, 
	107, 55, 55, 266, 55, 55, 55, 107, 
	55, 55, 267, 55, 55, 55, 107, 55, 
	55, 268, 55, 55, 55, 107, 55, 55, 
	270, 271, 272, 55, 55, 55, 269, 55, 
	55, 273, 55, 55, 55, 107, 55, 55, 
	274, 55, 55, 55, 107, 55, 55, 275, 
	55, 55, 55, 107, 55, 55, 276, 55, 
	55, 55, 107, 23, 23, 55, 55, 55, 
	55, 55, 277, 55, 55, 278, 55, 55, 
	55, 107, 55, 55, 279, 55, 55, 55, 
	107, 55, 55, 280, 55, 55, 55, 107, 
	55, 55, 281, 55, 55, 55, 107, 55, 
	55, 282, 55, 55, 55, 107, 55, 55, 
	283, 55, 55, 55, 107, 55, 55, 284, 
	55, 55, 55, 107, 55, 55, 285, 55, 
	55, 55, 107, 55, 55, 286, 55, 55, 
	55, 107, 55, 55, 287, 55, 55, 55, 
	107, 55, 55, 288, 55, 55, 55, 107, 
	55, 55, 289, 55, 55, 55, 107, 55, 
	55, 290, 55, 55, 55, 107, 55, 55, 
	291, 292, 293, 55, 55, 55, 107, 55, 
	55, 294, 55, 55, 55, 107, 55, 55, 
	295, 55, 55, 55, 107, 55, 55, 296, 
	55, 55, 55, 107, 55, 55, 297, 55, 
	55, 55, 107, 55, 55, 298, 55, 55, 
	55, 107, 55, 55, 299, 55, 55, 55, 
	107, 42, 42, 55, 55, 55, 55, 55, 
	300, 55, 55, 301, 55, 55, 55, 107, 
	55, 55, 302, 303, 55, 55, 55, 107, 
	55, 55, 304, 55, 55, 55, 107, 55, 
	55, 305, 55, 55, 55, 107, 55, 55, 
	306, 55, 55, 55, 107, 55, 55, 307, 
	308, 309, 55, 55, 55, 107, 55, 55, 
	310, 311, 55, 55, 55, 107, 55, 55, 
	312, 55, 55, 55, 107, 55, 55, 313, 
	55, 55, 55, 107, 55, 55, 314, 55, 
	55, 55, 107, 55, 55, 315, 55, 55, 
	55, 107, 55, 55, 316, 317, 55, 55, 
	55, 107, 55, 55, 318, 55, 55, 55, 
	107, 55, 55, 319, 55, 55, 55, 107, 
	55, 55, 320, 55, 55, 55, 107, 55, 
	55, 321, 55, 55, 55, 107, 55, 55, 
	322, 55, 55, 55, 107, 55, 55, 323, 
	55, 55, 55, 107, 55, 55, 324, 55, 
	55, 55, 107, 55, 55, 325, 55, 55, 
	55, 107, 55, 55, 326, 55, 55, 55, 
	107, 55, 55, 327, 55, 55, 55, 107, 
	55, 55, 328, 55, 55, 55, 107, 55, 
	55, 329, 55, 55, 55, 107, 55, 55, 
	330, 55, 55, 55, 107, 55, 55, 331, 
	55, 55, 55, 107, 55, 55, 332, 55, 
	55, 55, 107, 55, 55, 333, 334, 55, 
	55, 55, 107, 55, 55, 335, 55, 55, 
	55, 107, 55, 55, 336, 55, 55, 55, 
	107, 55, 55, 337, 55, 55, 55, 107, 
	55, 55, 338, 55, 55, 55, 107, 55, 
	55, 339, 55, 55, 55, 107, 55, 55, 
	340, 341, 342, 343, 55, 55, 55, 107, 
	55, 55, 344, 55, 55, 55, 107, 55, 
	55, 345, 55, 55, 55, 107, 55, 55, 
	346, 55, 55, 55, 107, 55, 55, 347, 
	55, 55, 55, 107, 55, 55, 348, 55, 
	55, 55, 107, 55, 55, 349, 55, 55, 
	55, 107, 55, 55, 350, 55, 55, 55, 
	107, 55, 55, 351, 55, 55, 55, 107, 
	55, 55, 352, 55, 55, 55, 107, 55, 
	55, 353, 55, 55, 55, 107, 55, 55, 
	354, 55, 55, 55, 107, 55, 55, 355, 
	55, 55, 55, 107, 55, 55, 356, 55, 
	55, 55, 107, 55, 55, 357, 55, 55, 
	55, 107, 55, 55, 358, 55, 55, 55, 
	107, 55, 55, 359, 55, 55, 55, 107, 
	55, 55, 360, 55, 55, 55, 107, 55, 
	55, 361, 55, 55, 55, 107, 55, 55, 
	362, 55, 55, 55, 107, 55, 55, 363, 
	55, 55, 55, 107, 55, 55, 364, 55, 
	55, 55, 107, 55, 55, 365, 55, 55, 
	55, 107, 55, 55, 366, 55, 55, 55, 
	107, 55, 55, 367, 55, 55, 55, 107, 
	55, 55, 368, 55, 55, 55, 107, 55, 
	55, 369, 370, 371, 55, 55, 55, 107, 
	55, 55, 372, 55, 55, 55, 107, 55, 
	55, 373, 55, 55, 55, 107, 55, 55, 
	374, 55, 55, 55, 107, 55, 55, 375, 
	55, 55, 55, 107, 55, 55, 376, 55, 
	55, 55, 107, 55, 55, 377, 55, 55, 
	55, 107, 55, 55, 378, 379, 55, 55, 
	55, 107, 55, 55, 380, 381, 55, 55, 
	55, 107, 55, 55, 382, 55, 55, 55, 
	107, 55, 55, 383, 55, 55, 55, 107, 
	55, 55, 384, 55, 55, 55, 107, 55, 
	55, 385, 55, 55, 55, 107, 55, 55, 
	386, 55, 55, 55, 107, 55, 55, 387, 
	55, 55, 55, 107, 55, 55, 388, 55, 
	55, 55, 107, 0
};

static const short _umodLexer_trans_targs[] = {
	34, 0, 34, 1, 36, 2, 3, 38, 
	40, 34, 6, 41, 34, 7, 8, 34, 
	34, 9, 123, 124, 126, 127, 34, 10, 
	11, 19, 12, 13, 14, 15, 16, 17, 
	18, 34, 20, 21, 22, 23, 24, 25, 
	34, 34, 26, 27, 28, 29, 30, 31, 
	32, 33, 34, 34, 35, 34, 36, 37, 
	38, 34, 34, 34, 39, 34, 39, 42, 
	43, 45, 46, 34, 47, 48, 48, 34, 
	34, 34, 49, 65, 72, 94, 102, 161, 
	177, 194, 197, 201, 203, 216, 243, 265, 
	270, 277, 34, 34, 34, 4, 39, 34, 
	5, 34, 34, 34, 34, 44, 34, 34, 
	34, 34, 34, 34, 50, 57, 51, 52, 
	53, 54, 55, 56, 37, 37, 58, 59, 
	60, 61, 62, 63, 64, 37, 66, 69, 
	67, 68, 37, 70, 71, 37, 73, 76, 
	74, 75, 37, 77, 78, 83, 79, 80, 
	81, 34, 82, 37, 84, 85, 87, 86, 
	37, 88, 89, 90, 91, 92, 93, 37, 
	95, 96, 37, 97, 98, 99, 100, 101, 
	37, 103, 105, 112, 140, 146, 104, 37, 
	106, 107, 34, 108, 109, 37, 110, 111, 
	37, 113, 122, 132, 114, 115, 116, 117, 
	118, 119, 120, 121, 37, 34, 34, 125, 
	123, 123, 128, 129, 130, 123, 131, 123, 
	133, 134, 135, 136, 137, 138, 139, 37, 
	141, 142, 143, 144, 145, 37, 147, 154, 
	148, 149, 150, 151, 152, 153, 37, 155, 
	156, 158, 157, 37, 159, 160, 37, 162, 
	165, 168, 170, 171, 163, 164, 37, 166, 
	167, 37, 169, 37, 37, 172, 173, 174, 
	175, 176, 37, 37, 178, 184, 179, 180, 
	182, 181, 37, 183, 37, 34, 185, 190, 
	192, 186, 187, 188, 189, 34, 191, 37, 
	193, 37, 195, 196, 37, 198, 199, 200, 
	37, 202, 37, 204, 37, 211, 205, 206, 
	207, 208, 209, 210, 34, 212, 213, 214, 
	37, 215, 37, 217, 231, 238, 218, 222, 
	219, 220, 221, 37, 223, 228, 224, 225, 
	226, 227, 37, 229, 230, 37, 232, 233, 
	234, 235, 236, 237, 37, 239, 242, 240, 
	241, 37, 37, 244, 245, 248, 254, 262, 
	246, 247, 37, 249, 250, 251, 252, 253, 
	37, 255, 256, 257, 258, 259, 260, 261, 
	37, 263, 264, 37, 266, 267, 268, 269, 
	37, 271, 273, 275, 272, 37, 274, 37, 
	276, 37, 278, 282, 279, 280, 37, 281, 
	37, 283, 284, 285, 37
};

static const short _umodLexer_trans_actions[] = {
	89, 0, 13, 0, 268, 0, 0, 268, 
	5, 85, 0, 0, 87, 0, 0, 45, 
	79, 0, 103, 0, 0, 0, 81, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 9, 0, 0, 0, 0, 0, 0, 
	7, 83, 0, 0, 0, 0, 0, 0, 
	0, 0, 11, 47, 0, 43, 286, 265, 
	286, 31, 33, 23, 283, 27, 277, 0, 
	5, 5, 0, 29, 0, 280, 274, 39, 
	41, 25, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 35, 37, 75, 0, 271, 65, 
	0, 71, 15, 21, 69, 0, 77, 73, 
	17, 67, 19, 63, 0, 0, 0, 0, 
	0, 0, 0, 0, 106, 109, 0, 0, 
	0, 0, 0, 0, 0, 112, 0, 0, 
	0, 0, 115, 0, 0, 118, 0, 0, 
	0, 0, 121, 0, 0, 0, 0, 0, 
	0, 51, 0, 124, 0, 0, 0, 0, 
	127, 0, 0, 0, 0, 0, 0, 130, 
	0, 0, 133, 0, 0, 0, 0, 0, 
	136, 0, 0, 0, 0, 0, 0, 139, 
	0, 0, 53, 0, 0, 142, 0, 0, 
	145, 0, 5, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 148, 55, 49, 0, 
	94, 91, 0, 0, 0, 97, 0, 100, 
	0, 0, 0, 0, 0, 0, 0, 151, 
	0, 0, 0, 0, 0, 154, 0, 0, 
	0, 0, 0, 0, 0, 0, 157, 0, 
	0, 0, 0, 160, 0, 0, 163, 0, 
	0, 0, 0, 0, 0, 0, 166, 0, 
	0, 169, 0, 172, 175, 0, 0, 0, 
	0, 0, 178, 181, 0, 0, 0, 0, 
	0, 0, 184, 0, 187, 57, 0, 0, 
	0, 0, 0, 0, 5, 59, 0, 190, 
	0, 193, 0, 0, 196, 0, 0, 0, 
	199, 0, 202, 0, 205, 0, 0, 0, 
	0, 0, 0, 5, 61, 0, 0, 0, 
	208, 0, 211, 0, 0, 0, 0, 0, 
	0, 0, 0, 214, 0, 0, 0, 0, 
	0, 0, 217, 0, 0, 220, 0, 0, 
	0, 0, 0, 0, 223, 0, 0, 0, 
	0, 226, 229, 0, 0, 0, 0, 0, 
	0, 0, 232, 0, 0, 0, 0, 0, 
	235, 0, 0, 0, 0, 0, 0, 0, 
	238, 0, 0, 241, 0, 0, 0, 0, 
	244, 0, 0, 0, 0, 247, 0, 250, 
	0, 253, 0, 0, 0, 0, 256, 0, 
	259, 0, 0, 0, 262
};

static const short _umodLexer_to_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0
};

static const short _umodLexer_from_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 3, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0
};

static const short _umodLexer_eof_trans[] = {
	1, 1, 1, 1, 1, 10, 10, 13, 
	13, 17, 23, 23, 23, 23, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 23, 42, 42, 42, 42, 42, 42, 
	42, 42, 0, 93, 1, 1, 1, 1, 
	96, 96, 98, 101, 103, 96, 104, 106, 
	1, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 146, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 179, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 198, 1, 199, 199, 199, 199, 
	199, 199, 199, 199, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	270, 108, 108, 108, 108, 278, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 301, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108, 108, 108, 
	108, 108, 108, 108, 108, 108
};

static const int umodLexer_start = 34;
static const int umodLexer_first_final = 34;
static const int umodLexer_error = -1;

static const int umodLexer_en_main = 34;


#line 13 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"

// no idea about the origins of this value, ask Flori ;)
int EVIL=0x666;

using namespace umod::lex;

Lexer::Lexer(const char *source, unsigned int length)
    : m_source(source)
    , m_source_end(source + length)
    , m_source_eof(m_source_end)
    , m_ts(nullptr), m_te(nullptr)
    , m_current_state(EVIL), m_act(0)
    , m_position(std::make_pair(1, 1))
{

}

Lexer::Lexer(const std::string &source): Lexer(source.c_str(), source.length())
{

}

Lexer::~Lexer()
{

}

Lexeme *Lexer::consume(void)
{
    
#line 175 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"


    Lexeme::Type type;

    if (m_source == m_source_end)
    {
        m_ts = m_te = m_source;
        type = Lexeme::Type::EOI;
    }
    else
    {
        
#line 187 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
        
#line 188 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
        
#line 189 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
        
#line 190 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
        
#line 191 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
        
#line 192 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
        
#line 193 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"

        
#line 1034 "lexer.cc"
	{
	(  m_current_state) = umodLexer_start;
	(  m_ts) = 0;
	(  m_te) = 0;
	( m_act) = 0;
	}

#line 195 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
        
#line 1044 "lexer.cc"
	{
	int _klen;
	unsigned int _trans;
	const char *_acts;
	unsigned int _nacts;
	const char *_keys;

	if ( (   m_source) == (  m_source_end) )
		goto _test_eof;
_resume:
	_acts = _umodLexer_actions + _umodLexer_from_state_actions[(  m_current_state)];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 1:
#line 1 "NONE"
	{(  m_ts) = (   m_source);}
	break;
#line 1063 "lexer.cc"
		}
	}

	_keys = _umodLexer_trans_keys + _umodLexer_key_offsets[(  m_current_state)];
	_trans = _umodLexer_index_offsets[(  m_current_state)];

	_klen = _umodLexer_single_lengths[(  m_current_state)];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( (*(   m_source)) < *_mid )
				_upper = _mid - 1;
			else if ( (*(   m_source)) > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (unsigned int)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _umodLexer_range_lengths[(  m_current_state)];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( (*(   m_source)) < _mid[0] )
				_upper = _mid - 2;
			else if ( (*(   m_source)) > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += (unsigned int)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	_trans = _umodLexer_indicies[_trans];
_eof_trans:
	(  m_current_state) = _umodLexer_trans_targs[_trans];

	if ( _umodLexer_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _umodLexer_actions + _umodLexer_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 2:
#line 1 "NONE"
	{(  m_te) = (   m_source)+1;}
	break;
	case 3:
#line 75 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 1;}
	break;
	case 4:
#line 76 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 2;}
	break;
	case 5:
#line 77 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 3;}
	break;
	case 6:
#line 78 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 4;}
	break;
	case 7:
#line 82 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 8;}
	break;
	case 8:
#line 84 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 9;}
	break;
	case 9:
#line 85 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 10;}
	break;
	case 10:
#line 86 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 11;}
	break;
	case 11:
#line 87 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 12;}
	break;
	case 12:
#line 88 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 13;}
	break;
	case 13:
#line 89 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 14;}
	break;
	case 14:
#line 90 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 15;}
	break;
	case 15:
#line 92 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 17;}
	break;
	case 16:
#line 93 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 18;}
	break;
	case 17:
#line 94 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 19;}
	break;
	case 18:
#line 95 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 20;}
	break;
	case 19:
#line 96 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 21;}
	break;
	case 20:
#line 98 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 23;}
	break;
	case 21:
#line 99 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 24;}
	break;
	case 22:
#line 100 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 25;}
	break;
	case 23:
#line 102 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 27;}
	break;
	case 24:
#line 103 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 28;}
	break;
	case 25:
#line 104 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 29;}
	break;
	case 26:
#line 105 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 30;}
	break;
	case 27:
#line 106 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 31;}
	break;
	case 28:
#line 107 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 32;}
	break;
	case 29:
#line 108 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 33;}
	break;
	case 30:
#line 109 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 34;}
	break;
	case 31:
#line 110 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 35;}
	break;
	case 32:
#line 111 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 36;}
	break;
	case 33:
#line 112 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 37;}
	break;
	case 34:
#line 113 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 38;}
	break;
	case 35:
#line 114 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 39;}
	break;
	case 36:
#line 117 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 42;}
	break;
	case 37:
#line 118 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 43;}
	break;
	case 38:
#line 119 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 44;}
	break;
	case 39:
#line 120 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 45;}
	break;
	case 40:
#line 121 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 46;}
	break;
	case 41:
#line 123 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 48;}
	break;
	case 42:
#line 124 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 49;}
	break;
	case 43:
#line 125 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 50;}
	break;
	case 44:
#line 126 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 51;}
	break;
	case 45:
#line 127 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 52;}
	break;
	case 46:
#line 128 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 53;}
	break;
	case 47:
#line 129 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 54;}
	break;
	case 48:
#line 130 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 55;}
	break;
	case 49:
#line 131 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 56;}
	break;
	case 50:
#line 132 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 57;}
	break;
	case 51:
#line 133 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 58;}
	break;
	case 52:
#line 134 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 59;}
	break;
	case 53:
#line 135 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 60;}
	break;
	case 54:
#line 136 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 61;}
	break;
	case 55:
#line 137 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 62;}
	break;
	case 56:
#line 138 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 63;}
	break;
	case 57:
#line 139 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 64;}
	break;
	case 58:
#line 140 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 65;}
	break;
	case 59:
#line 141 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 66;}
	break;
	case 60:
#line 142 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 67;}
	break;
	case 61:
#line 145 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 68;}
	break;
	case 62:
#line 146 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 69;}
	break;
	case 63:
#line 147 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 70;}
	break;
	case 64:
#line 151 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 73;}
	break;
	case 65:
#line 152 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 74;}
	break;
	case 66:
#line 166 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 87;}
	break;
	case 67:
#line 167 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 88;}
	break;
	case 68:
#line 173 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 92;}
	break;
	case 69:
#line 79 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::INITIAL_EQUATION; {(   m_source)++; goto _out; } }}
	break;
	case 70:
#line 80 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::INITIAL_ALGORITHM; {(   m_source)++; goto _out; } }}
	break;
	case 71:
#line 81 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::OPERATOR_FUNCTION; {(   m_source)++; goto _out; } }}
	break;
	case 72:
#line 146 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::STRING; {(   m_source)++; goto _out; } }}
	break;
	case 73:
#line 149 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::DOT_STAR; {(   m_source)++; goto _out; }}}
	break;
	case 74:
#line 150 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::ASSIGN_OP; {(   m_source)++; goto _out; }}}
	break;
	case 75:
#line 151 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::REL_OP; {(   m_source)++; goto _out; }}}
	break;
	case 76:
#line 152 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::ADD_OP_PARTIAL; {(   m_source)++; goto _out; }}}
	break;
	case 77:
#line 153 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::MUL_OP_PARTIAL; {(   m_source)++; goto _out; }}}
	break;
	case 78:
#line 154 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::EXP_OP; {(   m_source)++; goto _out; }}}
	break;
	case 79:
#line 157 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::COMMA; {(   m_source)++; goto _out; }}}
	break;
	case 80:
#line 158 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::SEMICOLON; {(   m_source)++; goto _out; }}}
	break;
	case 81:
#line 160 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::OPAREN; {(   m_source)++; goto _out; }}}
	break;
	case 82:
#line 161 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::CPAREN; {(   m_source)++; goto _out; }}}
	break;
	case 83:
#line 162 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::OBRACE; {(   m_source)++; goto _out; }}}
	break;
	case 84:
#line 163 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::CBRACE; {(   m_source)++; goto _out; }}}
	break;
	case 85:
#line 164 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::OBRACKET; {(   m_source)++; goto _out; }}}
	break;
	case 86:
#line 165 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::CBRACKET; {(   m_source)++; goto _out; }}}
	break;
	case 87:
#line 170 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::NEWLINE; {(   m_source)++; goto _out; } }}
	break;
	case 88:
#line 172 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ {(   m_source)++; goto _out; } }}
	break;
	case 89:
#line 173 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ {(   m_source)++; goto _out; } }}
	break;
	case 90:
#line 82 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::END_IDENT; {(   m_source)++; goto _out; } }}
	break;
	case 91:
#line 91 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::CONNECT; {(   m_source)++; goto _out; }}}
	break;
	case 92:
#line 97 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::ELSE; {(   m_source)++; goto _out; }}}
	break;
	case 93:
#line 101 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::END; {(   m_source)++; goto _out; }}}
	break;
	case 94:
#line 115 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::IN; {(   m_source)++; goto _out; }}}
	break;
	case 95:
#line 116 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::INITIAL; {(   m_source)++; goto _out; }}}
	break;
	case 96:
#line 122 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::OPERATOR; {(   m_source)++; goto _out; }}}
	break;
	case 97:
#line 145 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::IDENT; {(   m_source)++; goto _out; } }}
	break;
	case 98:
#line 147 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::UNSIGNED_NUMBER; {(   m_source)++; goto _out; } }}
	break;
	case 99:
#line 151 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::REL_OP; {(   m_source)++; goto _out; }}}
	break;
	case 100:
#line 153 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::MUL_OP_PARTIAL; {(   m_source)++; goto _out; }}}
	break;
	case 101:
#line 156 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::DOT; {(   m_source)++; goto _out; }}}
	break;
	case 102:
#line 159 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::COLON; {(   m_source)++; goto _out; }}}
	break;
	case 103:
#line 171 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::SPACES; {(   m_source)++; goto _out; } }}
	break;
	case 104:
#line 172 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ {(   m_source)++; goto _out; } }}
	break;
	case 105:
#line 101 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{{(   m_source) = (((  m_te)))-1;}{ type = Lexeme::Type::END; {(   m_source)++; goto _out; }}}
	break;
	case 106:
#line 116 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{{(   m_source) = (((  m_te)))-1;}{ type = Lexeme::Type::INITIAL; {(   m_source)++; goto _out; }}}
	break;
	case 107:
#line 122 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{{(   m_source) = (((  m_te)))-1;}{ type = Lexeme::Type::OPERATOR; {(   m_source)++; goto _out; }}}
	break;
	case 108:
#line 147 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{{(   m_source) = (((  m_te)))-1;}{ type = Lexeme::Type::UNSIGNED_NUMBER; {(   m_source)++; goto _out; } }}
	break;
	case 109:
#line 153 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{{(   m_source) = (((  m_te)))-1;}{ type = Lexeme::Type::MUL_OP_PARTIAL; {(   m_source)++; goto _out; }}}
	break;
	case 110:
#line 1 "NONE"
	{	switch( ( m_act) ) {
	case 1:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::END_IF; {(   m_source)++; goto _out; } }
	break;
	case 2:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::END_FOR; {(   m_source)++; goto _out; } }
	break;
	case 3:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::END_WHEN; {(   m_source)++; goto _out; } }
	break;
	case 4:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::END_WHILE; {(   m_source)++; goto _out; } }
	break;
	case 8:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::END_IDENT; {(   m_source)++; goto _out; } }
	break;
	case 9:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::ALGORITHM; {(   m_source)++; goto _out; }}
	break;
	case 10:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::AND; {(   m_source)++; goto _out; }}
	break;
	case 11:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::ANNOTATION; {(   m_source)++; goto _out; }}
	break;
	case 12:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::BLOCK; {(   m_source)++; goto _out; }}
	break;
	case 13:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::BREAK; {(   m_source)++; goto _out; }}
	break;
	case 14:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::CLASS; {(   m_source)++; goto _out; }}
	break;
	case 15:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::CONNECTOR; {(   m_source)++; goto _out; }}
	break;
	case 17:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::CONSTANT; {(   m_source)++; goto _out; }}
	break;
	case 18:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::CONSTRAINEDBY; {(   m_source)++; goto _out; }}
	break;
	case 19:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::DER; {(   m_source)++; goto _out; }}
	break;
	case 20:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::DISCRETE; {(   m_source)++; goto _out; }}
	break;
	case 21:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::EACH; {(   m_source)++; goto _out; }}
	break;
	case 23:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::ELSEIF; {(   m_source)++; goto _out; }}
	break;
	case 24:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::ELSEWHEN; {(   m_source)++; goto _out; }}
	break;
	case 25:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::ENCAPSULATED; {(   m_source)++; goto _out; }}
	break;
	case 27:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::ENUMERATION; {(   m_source)++; goto _out; }}
	break;
	case 28:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::EQUATION; {(   m_source)++; goto _out; }}
	break;
	case 29:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::EXPANDABLE; {(   m_source)++; goto _out; }}
	break;
	case 30:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::EXTENDS; {(   m_source)++; goto _out; }}
	break;
	case 31:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::EXTERNAL; {(   m_source)++; goto _out; }}
	break;
	case 32:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::FALSE; {(   m_source)++; goto _out; }}
	break;
	case 33:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::FINAL; {(   m_source)++; goto _out; }}
	break;
	case 34:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::FLOW; {(   m_source)++; goto _out; }}
	break;
	case 35:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::FOR; {(   m_source)++; goto _out; }}
	break;
	case 36:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::FUNCTION; {(   m_source)++; goto _out; }}
	break;
	case 37:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::IF; {(   m_source)++; goto _out; }}
	break;
	case 38:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::IMPORT; {(   m_source)++; goto _out; }}
	break;
	case 39:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::IMPURE; {(   m_source)++; goto _out; }}
	break;
	case 42:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::INNER; {(   m_source)++; goto _out; }}
	break;
	case 43:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::INPUT; {(   m_source)++; goto _out; }}
	break;
	case 44:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::LOOP; {(   m_source)++; goto _out; }}
	break;
	case 45:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::MODEL; {(   m_source)++; goto _out; }}
	break;
	case 46:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::NOT; {(   m_source)++; goto _out; }}
	break;
	case 48:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::OR; {(   m_source)++; goto _out; }}
	break;
	case 49:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::OUTER; {(   m_source)++; goto _out; }}
	break;
	case 50:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::OUTPUT; {(   m_source)++; goto _out; }}
	break;
	case 51:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::PACKAGE; {(   m_source)++; goto _out; }}
	break;
	case 52:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::PARAMETER; {(   m_source)++; goto _out; }}
	break;
	case 53:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::PARTIAL; {(   m_source)++; goto _out; }}
	break;
	case 54:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::PROTECTED; {(   m_source)++; goto _out; }}
	break;
	case 55:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::PUBLIC; {(   m_source)++; goto _out; }}
	break;
	case 56:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::PURE; {(   m_source)++; goto _out; }}
	break;
	case 57:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::RECORD; {(   m_source)++; goto _out; }}
	break;
	case 58:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::REDECLARE; {(   m_source)++; goto _out; }}
	break;
	case 59:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::REPLACEABLE; {(   m_source)++; goto _out; }}
	break;
	case 60:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::RETURN; {(   m_source)++; goto _out; }}
	break;
	case 61:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::STREAM; {(   m_source)++; goto _out; }}
	break;
	case 62:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::THEN; {(   m_source)++; goto _out; }}
	break;
	case 63:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::TRUE; {(   m_source)++; goto _out; }}
	break;
	case 64:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::TYPE; {(   m_source)++; goto _out; }}
	break;
	case 65:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::WHEN; {(   m_source)++; goto _out; }}
	break;
	case 66:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::WHILE; {(   m_source)++; goto _out; }}
	break;
	case 67:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::WITHIN; {(   m_source)++; goto _out; }}
	break;
	case 68:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::IDENT; {(   m_source)++; goto _out; } }
	break;
	case 69:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::STRING; {(   m_source)++; goto _out; } }
	break;
	case 70:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::UNSIGNED_NUMBER; {(   m_source)++; goto _out; } }
	break;
	case 73:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::REL_OP; {(   m_source)++; goto _out; }}
	break;
	case 74:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::ADD_OP_PARTIAL; {(   m_source)++; goto _out; }}
	break;
	case 87:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::EQUAL; {(   m_source)++; goto _out; }}
	break;
	case 88:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::PLUS; {(   m_source)++; goto _out; }}
	break;
	case 92:
	{{(   m_source) = (((  m_te)))-1;} {(   m_source)++; goto _out; } }
	break;
	}
	}
	break;
#line 1765 "lexer.cc"
		}
	}

_again:
	_acts = _umodLexer_actions + _umodLexer_to_state_actions[(  m_current_state)];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 0:
#line 1 "NONE"
	{(  m_ts) = 0;}
	break;
#line 1778 "lexer.cc"
		}
	}

	if ( ++(   m_source) != (  m_source_end) )
		goto _resume;
	_test_eof: {}
	if ( (   m_source) == ( m_source_eof) )
	{
	if ( _umodLexer_eof_trans[(  m_current_state)] > 0 ) {
		_trans = _umodLexer_eof_trans[(  m_current_state)] - 1;
		goto _eof_trans;
	}
	}

	_out: {}
	}

#line 196 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
    }

    unsigned int size = m_te - m_ts;
    Lexeme::pos_t position = m_position;

    if (type == Lexeme::Type::NEWLINE)
    {
        m_position.first += 1;
        m_position.second = size;
    }
    else
    {
        m_position.second += size;
    }

    return new Lexeme(type, std::string(m_ts, size), position);
}
