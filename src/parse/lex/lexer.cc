
#line 1 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
#include <stddef.h>
#include <string>
#include <utility>
#include "lexer.h"
#include "lexeme.h"

// NOTE : if the lemon-parser is properly done then all the #define in lemon-parser.h should be equal
//        to total no of tokens
//        lemon-parser.h is generated by lemon based on whats used in parser , so if all the cases are
//              considered then there should be no token not # defined failsafe

#line 12 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"

#line 17 "lexer.cc"
static const char _umodLexer_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	67, 1, 68, 1, 69, 1, 70, 1, 
	71, 1, 72, 1, 73, 1, 74, 1, 
	75, 1, 76, 1, 77, 1, 78, 1, 
	79, 1, 80, 1, 81, 1, 82, 1, 
	83, 1, 84, 1, 85, 1, 86, 1, 
	87, 1, 88, 1, 89, 1, 90, 1, 
	91, 1, 92, 1, 93, 1, 94, 1, 
	95, 1, 96, 1, 97, 1, 98, 1, 
	99, 1, 100, 1, 101, 1, 102, 1, 
	103, 1, 104, 1, 105, 1, 106, 1, 
	107, 1, 108, 1, 109, 1, 110, 1, 
	111, 2, 2, 3, 2, 2, 4, 2, 
	2, 5, 2, 2, 6, 2, 2, 7, 
	2, 2, 8, 2, 2, 9, 2, 2, 
	10, 2, 2, 11, 2, 2, 12, 2, 
	2, 13, 2, 2, 14, 2, 2, 15, 
	2, 2, 16, 2, 2, 17, 2, 2, 
	18, 2, 2, 19, 2, 2, 20, 2, 
	2, 21, 2, 2, 22, 2, 2, 23, 
	2, 2, 24, 2, 2, 25, 2, 2, 
	26, 2, 2, 27, 2, 2, 28, 2, 
	2, 29, 2, 2, 30, 2, 2, 31, 
	2, 2, 32, 2, 2, 33, 2, 2, 
	34, 2, 2, 35, 2, 2, 36, 2, 
	2, 37, 2, 2, 38, 2, 2, 39, 
	2, 2, 40, 2, 2, 41, 2, 2, 
	42, 2, 2, 43, 2, 2, 44, 2, 
	2, 45, 2, 2, 46, 2, 2, 47, 
	2, 2, 48, 2, 2, 49, 2, 2, 
	50, 2, 2, 51, 2, 2, 52, 2, 
	2, 53, 2, 2, 54, 2, 2, 55, 
	2, 2, 56, 2, 2, 57, 2, 2, 
	58, 2, 2, 59, 2, 2, 60, 2, 
	2, 61, 2, 2, 62, 2, 2, 63, 
	2, 2, 64, 2, 2, 65, 2, 2, 
	66
};

static const short _umodLexer_key_offsets[] = {
	0, 2, 4, 6, 8, 10, 14, 16, 
	17, 19, 70, 72, 74, 82, 84, 85, 
	90, 94, 96, 99, 104, 106, 109, 110, 
	115, 117, 118, 119, 130, 139, 148, 157, 
	166, 175, 184, 193, 203, 212, 221, 230, 
	239, 248, 257, 266, 275, 284, 293, 302, 
	312, 321, 330, 339, 348, 357, 366, 376, 
	385, 394, 403, 412, 422, 431, 440, 449, 
	458, 467, 476, 486, 495, 504, 513, 522, 
	531, 540, 549, 558, 567, 577, 586, 595, 
	604, 613, 622, 631, 640, 653, 662, 671, 
	680, 689, 699, 708, 717, 726, 735, 746, 
	755, 764, 773, 782, 791, 800, 809, 818, 
	827, 836, 845, 854, 863, 872, 881, 890, 
	899, 908, 917, 926, 935, 944, 953, 963, 
	972, 981, 990, 999, 1008, 1017, 1026, 1035, 
	1045, 1054, 1063, 1072, 1081, 1090, 1103, 1112, 
	1121, 1130, 1139, 1148, 1157, 1166, 1175, 1184, 
	1193, 1202, 1211, 1220, 1229, 1238, 1249, 1258, 
	1268, 1277, 1286, 1295, 1304, 1315, 1324, 1333, 
	1342, 1351, 1360, 1369, 1378, 1387, 1396, 1405, 
	1414, 1423, 1432, 1441, 1450, 1459, 1468, 1479, 
	1488, 1497, 1506, 1515, 1524, 1533, 1542, 1552, 
	1561, 1570, 1579, 1590, 1600, 1609, 1618, 1627, 
	1636, 1646, 1655, 1664, 1673, 1682, 1691, 1700, 
	1709, 1718, 1727, 1736, 1745, 1754, 1763, 1772, 
	1781, 1791, 1800, 1809, 1818, 1827, 1836, 1848, 
	1857, 1866, 1875, 1884, 1893, 1902, 1911, 1920, 
	1929, 1938, 1947, 1956, 1965, 1974, 1983, 1992, 
	2001, 2010, 2019, 2028, 2037, 2046, 2055, 2064, 
	2073, 2084, 2093, 2102, 2111, 2120, 2129, 2138, 
	2148, 2158, 2167, 2176, 2185, 2194, 2203, 2212
};

static const char _umodLexer_trans_keys[] = {
	34, 92, 34, 92, 39, 92, 39, 92, 
	48, 57, 43, 45, 48, 57, 48, 57, 
	42, 42, 47, 9, 10, 13, 32, 33, 
	34, 36, 39, 40, 41, 42, 43, 44, 
	45, 46, 47, 58, 59, 60, 61, 62, 
	63, 91, 93, 94, 95, 97, 98, 99, 
	100, 101, 102, 105, 108, 109, 110, 111, 
	112, 114, 115, 116, 119, 123, 125, 126, 
	48, 57, 65, 90, 103, 122, 9, 32, 
	34, 92, 36, 95, 48, 57, 65, 90, 
	97, 122, 39, 92, 61, 43, 46, 61, 
	48, 57, 69, 101, 48, 57, 48, 57, 
	46, 48, 57, 45, 46, 61, 48, 57, 
	48, 57, 42, 47, 61, 10, 46, 69, 
	101, 48, 57, 61, 62, 61, 61, 36, 
	95, 108, 110, 115, 48, 57, 65, 90, 
	97, 122, 36, 95, 103, 48, 57, 65, 
	90, 97, 122, 36, 95, 111, 48, 57, 
	65, 90, 97, 122, 36, 95, 114, 48, 
	57, 65, 90, 97, 122, 36, 95, 105, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	116, 48, 57, 65, 90, 97, 122, 36, 
	95, 104, 48, 57, 65, 90, 97, 122, 
	36, 95, 109, 48, 57, 65, 90, 97, 
	122, 36, 95, 100, 110, 48, 57, 65, 
	90, 97, 122, 36, 95, 111, 48, 57, 
	65, 90, 97, 122, 36, 95, 116, 48, 
	57, 65, 90, 97, 122, 36, 95, 97, 
	48, 57, 65, 90, 98, 122, 36, 95, 
	116, 48, 57, 65, 90, 97, 122, 36, 
	95, 105, 48, 57, 65, 90, 97, 122, 
	36, 95, 111, 48, 57, 65, 90, 97, 
	122, 36, 95, 110, 48, 57, 65, 90, 
	97, 122, 36, 95, 115, 48, 57, 65, 
	90, 97, 122, 36, 95, 101, 48, 57, 
	65, 90, 97, 122, 36, 95, 114, 48, 
	57, 65, 90, 97, 122, 36, 95, 116, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	108, 114, 48, 57, 65, 90, 97, 122, 
	36, 95, 111, 48, 57, 65, 90, 97, 
	122, 36, 95, 99, 48, 57, 65, 90, 
	97, 122, 36, 95, 107, 48, 57, 65, 
	90, 97, 122, 36, 95, 101, 48, 57, 
	65, 90, 97, 122, 36, 95, 97, 48, 
	57, 65, 90, 98, 122, 36, 95, 107, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	108, 111, 48, 57, 65, 90, 97, 122, 
	36, 95, 97, 48, 57, 65, 90, 98, 
	122, 36, 95, 115, 48, 57, 65, 90, 
	97, 122, 36, 95, 115, 48, 57, 65, 
	90, 97, 122, 36, 95, 110, 48, 57, 
	65, 90, 97, 122, 36, 95, 110, 115, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	101, 48, 57, 65, 90, 97, 122, 36, 
	95, 99, 48, 57, 65, 90, 97, 122, 
	36, 95, 116, 48, 57, 65, 90, 97, 
	122, 36, 95, 111, 48, 57, 65, 90, 
	97, 122, 36, 95, 114, 48, 57, 65, 
	90, 97, 122, 36, 95, 116, 48, 57, 
	65, 90, 97, 122, 36, 95, 97, 114, 
	48, 57, 65, 90, 98, 122, 36, 95, 
	110, 48, 57, 65, 90, 97, 122, 36, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	36, 95, 97, 48, 57, 65, 90, 98, 
	122, 36, 95, 105, 48, 57, 65, 90, 
	97, 122, 36, 95, 110, 48, 57, 65, 
	90, 97, 122, 36, 95, 101, 48, 57, 
	65, 90, 97, 122, 36, 95, 100, 48, 
	57, 65, 90, 97, 122, 36, 95, 98, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	121, 48, 57, 65, 90, 97, 122, 36, 
	95, 101, 105, 48, 57, 65, 90, 97, 
	122, 36, 95, 114, 48, 57, 65, 90, 
	97, 122, 36, 95, 115, 48, 57, 65, 
	90, 97, 122, 36, 95, 99, 48, 57, 
	65, 90, 97, 122, 36, 95, 114, 48, 
	57, 65, 90, 97, 122, 36, 95, 101, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	116, 48, 57, 65, 90, 97, 122, 36, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	36, 95, 97, 108, 110, 113, 120, 48, 
	57, 65, 90, 98, 122, 36, 95, 99, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	104, 48, 57, 65, 90, 97, 122, 36, 
	95, 115, 48, 57, 65, 90, 97, 122, 
	36, 95, 101, 48, 57, 65, 90, 97, 
	122, 36, 95, 105, 119, 48, 57, 65, 
	90, 97, 122, 36, 95, 102, 48, 57, 
	65, 90, 97, 122, 36, 95, 104, 48, 
	57, 65, 90, 97, 122, 36, 95, 101, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	110, 48, 57, 65, 90, 97, 122, 36, 
	95, 99, 100, 117, 48, 57, 65, 90, 
	97, 122, 36, 95, 97, 48, 57, 65, 
	90, 98, 122, 36, 95, 112, 48, 57, 
	65, 90, 97, 122, 36, 95, 115, 48, 
	57, 65, 90, 97, 122, 36, 95, 117, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	108, 48, 57, 65, 90, 97, 122, 36, 
	95, 97, 48, 57, 65, 90, 98, 122, 
	36, 95, 116, 48, 57, 65, 90, 97, 
	122, 36, 95, 101, 48, 57, 65, 90, 
	97, 122, 36, 95, 100, 48, 57, 65, 
	90, 97, 122, 36, 95, 109, 48, 57, 
	65, 90, 97, 122, 36, 95, 101, 48, 
	57, 65, 90, 97, 122, 36, 95, 114, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	97, 48, 57, 65, 90, 98, 122, 36, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	36, 95, 105, 48, 57, 65, 90, 97, 
	122, 36, 95, 111, 48, 57, 65, 90, 
	97, 122, 36, 95, 110, 48, 57, 65, 
	90, 97, 122, 36, 95, 117, 48, 57, 
	65, 90, 97, 122, 36, 95, 97, 48, 
	57, 65, 90, 98, 122, 36, 95, 116, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	105, 48, 57, 65, 90, 97, 122, 36, 
	95, 111, 48, 57, 65, 90, 97, 122, 
	36, 95, 110, 48, 57, 65, 90, 97, 
	122, 36, 95, 112, 116, 48, 57, 65, 
	90, 97, 122, 36, 95, 97, 48, 57, 
	65, 90, 98, 122, 36, 95, 110, 48, 
	57, 65, 90, 97, 122, 36, 95, 100, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	97, 48, 57, 65, 90, 98, 122, 36, 
	95, 98, 48, 57, 65, 90, 97, 122, 
	36, 95, 108, 48, 57, 65, 90, 97, 
	122, 36, 95, 101, 48, 57, 65, 90, 
	97, 122, 36, 95, 101, 48, 57, 65, 
	90, 97, 122, 36, 95, 110, 114, 48, 
	57, 65, 90, 97, 122, 36, 95, 100, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	115, 48, 57, 65, 90, 97, 122, 36, 
	95, 110, 48, 57, 65, 90, 97, 122, 
	36, 95, 97, 48, 57, 65, 90, 98, 
	122, 36, 95, 108, 48, 57, 65, 90, 
	97, 122, 36, 95, 97, 105, 108, 111, 
	117, 48, 57, 65, 90, 98, 122, 36, 
	95, 108, 48, 57, 65, 90, 97, 122, 
	36, 95, 115, 48, 57, 65, 90, 97, 
	122, 36, 95, 101, 48, 57, 65, 90, 
	97, 122, 36, 95, 110, 48, 57, 65, 
	90, 97, 122, 36, 95, 97, 48, 57, 
	65, 90, 98, 122, 36, 95, 108, 48, 
	57, 65, 90, 97, 122, 36, 95, 111, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	119, 48, 57, 65, 90, 97, 122, 36, 
	95, 114, 48, 57, 65, 90, 97, 122, 
	36, 95, 110, 48, 57, 65, 90, 97, 
	122, 36, 95, 99, 48, 57, 65, 90, 
	97, 122, 36, 95, 116, 48, 57, 65, 
	90, 97, 122, 36, 95, 105, 48, 57, 
	65, 90, 97, 122, 36, 95, 111, 48, 
	57, 65, 90, 97, 122, 36, 95, 110, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	102, 109, 110, 48, 57, 65, 90, 97, 
	122, 36, 95, 112, 48, 57, 65, 90, 
	97, 122, 36, 95, 111, 117, 48, 57, 
	65, 90, 97, 122, 36, 95, 114, 48, 
	57, 65, 90, 97, 122, 36, 95, 116, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	114, 48, 57, 65, 90, 97, 122, 36, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	36, 95, 105, 110, 112, 48, 57, 65, 
	90, 97, 122, 36, 95, 116, 48, 57, 
	65, 90, 97, 122, 36, 95, 105, 48, 
	57, 65, 90, 97, 122, 36, 95, 97, 
	48, 57, 65, 90, 98, 122, 36, 95, 
	108, 48, 57, 65, 90, 97, 122, 36, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	36, 95, 114, 48, 57, 65, 90, 97, 
	122, 36, 95, 117, 48, 57, 65, 90, 
	97, 122, 36, 95, 116, 48, 57, 65, 
	90, 97, 122, 36, 95, 111, 48, 57, 
	65, 90, 97, 122, 36, 95, 111, 48, 
	57, 65, 90, 97, 122, 36, 95, 112, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	111, 48, 57, 65, 90, 97, 122, 36, 
	95, 100, 48, 57, 65, 90, 97, 122, 
	36, 95, 101, 48, 57, 65, 90, 97, 
	122, 36, 95, 108, 48, 57, 65, 90, 
	97, 122, 36, 95, 111, 48, 57, 65, 
	90, 97, 122, 36, 95, 116, 48, 57, 
	65, 90, 97, 122, 36, 95, 112, 114, 
	117, 48, 57, 65, 90, 97, 122, 36, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	36, 95, 114, 48, 57, 65, 90, 97, 
	122, 36, 95, 97, 48, 57, 65, 90, 
	98, 122, 36, 95, 116, 48, 57, 65, 
	90, 97, 122, 36, 95, 111, 48, 57, 
	65, 90, 97, 122, 36, 95, 114, 48, 
	57, 65, 90, 97, 122, 36, 95, 116, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	101, 112, 48, 57, 65, 90, 97, 122, 
	36, 95, 114, 48, 57, 65, 90, 97, 
	122, 36, 95, 117, 48, 57, 65, 90, 
	97, 122, 36, 95, 116, 48, 57, 65, 
	90, 97, 122, 36, 95, 97, 114, 117, 
	48, 57, 65, 90, 98, 122, 36, 95, 
	99, 114, 48, 57, 65, 90, 97, 122, 
	36, 95, 107, 48, 57, 65, 90, 97, 
	122, 36, 95, 97, 48, 57, 65, 90, 
	98, 122, 36, 95, 103, 48, 57, 65, 
	90, 97, 122, 36, 95, 101, 48, 57, 
	65, 90, 97, 122, 36, 95, 97, 116, 
	48, 57, 65, 90, 98, 122, 36, 95, 
	109, 48, 57, 65, 90, 97, 122, 36, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	36, 95, 116, 48, 57, 65, 90, 97, 
	122, 36, 95, 101, 48, 57, 65, 90, 
	97, 122, 36, 95, 114, 48, 57, 65, 
	90, 97, 122, 36, 95, 105, 48, 57, 
	65, 90, 97, 122, 36, 95, 97, 48, 
	57, 65, 90, 98, 122, 36, 95, 108, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	111, 48, 57, 65, 90, 97, 122, 36, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	36, 95, 101, 48, 57, 65, 90, 97, 
	122, 36, 95, 99, 48, 57, 65, 90, 
	97, 122, 36, 95, 116, 48, 57, 65, 
	90, 97, 122, 36, 95, 101, 48, 57, 
	65, 90, 97, 122, 36, 95, 100, 48, 
	57, 65, 90, 97, 122, 36, 95, 98, 
	114, 48, 57, 65, 90, 97, 122, 36, 
	95, 108, 48, 57, 65, 90, 97, 122, 
	36, 95, 105, 48, 57, 65, 90, 97, 
	122, 36, 95, 99, 48, 57, 65, 90, 
	97, 122, 36, 95, 101, 48, 57, 65, 
	90, 97, 122, 36, 95, 101, 48, 57, 
	65, 90, 97, 122, 36, 95, 99, 100, 
	112, 116, 48, 57, 65, 90, 97, 122, 
	36, 95, 111, 48, 57, 65, 90, 97, 
	122, 36, 95, 114, 48, 57, 65, 90, 
	97, 122, 36, 95, 100, 48, 57, 65, 
	90, 97, 122, 36, 95, 101, 48, 57, 
	65, 90, 97, 122, 36, 95, 99, 48, 
	57, 65, 90, 97, 122, 36, 95, 108, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	97, 48, 57, 65, 90, 98, 122, 36, 
	95, 114, 48, 57, 65, 90, 97, 122, 
	36, 95, 101, 48, 57, 65, 90, 97, 
	122, 36, 95, 108, 48, 57, 65, 90, 
	97, 122, 36, 95, 97, 48, 57, 65, 
	90, 98, 122, 36, 95, 99, 48, 57, 
	65, 90, 97, 122, 36, 95, 101, 48, 
	57, 65, 90, 97, 122, 36, 95, 97, 
	48, 57, 65, 90, 98, 122, 36, 95, 
	98, 48, 57, 65, 90, 97, 122, 36, 
	95, 108, 48, 57, 65, 90, 97, 122, 
	36, 95, 101, 48, 57, 65, 90, 97, 
	122, 36, 95, 117, 48, 57, 65, 90, 
	97, 122, 36, 95, 114, 48, 57, 65, 
	90, 97, 122, 36, 95, 110, 48, 57, 
	65, 90, 97, 122, 36, 95, 116, 48, 
	57, 65, 90, 97, 122, 36, 95, 114, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	101, 48, 57, 65, 90, 97, 122, 36, 
	95, 97, 48, 57, 65, 90, 98, 122, 
	36, 95, 109, 48, 57, 65, 90, 97, 
	122, 36, 95, 104, 114, 121, 48, 57, 
	65, 90, 97, 122, 36, 95, 101, 48, 
	57, 65, 90, 97, 122, 36, 95, 110, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	117, 48, 57, 65, 90, 97, 122, 36, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	36, 95, 112, 48, 57, 65, 90, 97, 
	122, 36, 95, 101, 48, 57, 65, 90, 
	97, 122, 36, 95, 104, 105, 48, 57, 
	65, 90, 97, 122, 36, 95, 101, 105, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	110, 48, 57, 65, 90, 97, 122, 36, 
	95, 108, 48, 57, 65, 90, 97, 122, 
	36, 95, 101, 48, 57, 65, 90, 97, 
	122, 36, 95, 116, 48, 57, 65, 90, 
	97, 122, 36, 95, 104, 48, 57, 65, 
	90, 97, 122, 36, 95, 105, 48, 57, 
	65, 90, 97, 122, 36, 95, 110, 48, 
	57, 65, 90, 97, 122, 0
};

static const char _umodLexer_single_lengths[] = {
	2, 2, 2, 2, 0, 2, 0, 1, 
	2, 45, 2, 2, 2, 2, 1, 3, 
	2, 0, 1, 3, 0, 3, 1, 3, 
	2, 1, 1, 5, 3, 3, 3, 3, 
	3, 3, 3, 4, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 4, 
	3, 3, 3, 3, 3, 3, 4, 3, 
	3, 3, 3, 4, 3, 3, 3, 3, 
	3, 3, 4, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 4, 3, 3, 3, 
	3, 3, 3, 3, 7, 3, 3, 3, 
	3, 4, 3, 3, 3, 3, 5, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 4, 3, 
	3, 3, 3, 3, 3, 3, 3, 4, 
	3, 3, 3, 3, 3, 7, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 5, 3, 4, 
	3, 3, 3, 3, 5, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 5, 3, 
	3, 3, 3, 3, 3, 3, 4, 3, 
	3, 3, 5, 4, 3, 3, 3, 3, 
	4, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	4, 3, 3, 3, 3, 3, 6, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	5, 3, 3, 3, 3, 3, 3, 4, 
	4, 3, 3, 3, 3, 3, 3, 3
};

static const char _umodLexer_range_lengths[] = {
	0, 0, 0, 0, 1, 1, 1, 0, 
	0, 3, 0, 0, 3, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 1, 
	0, 0, 0, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3
};

static const short _umodLexer_index_offsets[] = {
	0, 3, 6, 9, 12, 14, 18, 20, 
	22, 25, 74, 77, 80, 86, 89, 91, 
	96, 100, 102, 105, 110, 112, 116, 118, 
	123, 126, 128, 130, 139, 146, 153, 160, 
	167, 174, 181, 188, 196, 203, 210, 217, 
	224, 231, 238, 245, 252, 259, 266, 273, 
	281, 288, 295, 302, 309, 316, 323, 331, 
	338, 345, 352, 359, 367, 374, 381, 388, 
	395, 402, 409, 417, 424, 431, 438, 445, 
	452, 459, 466, 473, 480, 488, 495, 502, 
	509, 516, 523, 530, 537, 548, 555, 562, 
	569, 576, 584, 591, 598, 605, 612, 621, 
	628, 635, 642, 649, 656, 663, 670, 677, 
	684, 691, 698, 705, 712, 719, 726, 733, 
	740, 747, 754, 761, 768, 775, 782, 790, 
	797, 804, 811, 818, 825, 832, 839, 846, 
	854, 861, 868, 875, 882, 889, 900, 907, 
	914, 921, 928, 935, 942, 949, 956, 963, 
	970, 977, 984, 991, 998, 1005, 1014, 1021, 
	1029, 1036, 1043, 1050, 1057, 1066, 1073, 1080, 
	1087, 1094, 1101, 1108, 1115, 1122, 1129, 1136, 
	1143, 1150, 1157, 1164, 1171, 1178, 1185, 1194, 
	1201, 1208, 1215, 1222, 1229, 1236, 1243, 1251, 
	1258, 1265, 1272, 1281, 1289, 1296, 1303, 1310, 
	1317, 1325, 1332, 1339, 1346, 1353, 1360, 1367, 
	1374, 1381, 1388, 1395, 1402, 1409, 1416, 1423, 
	1430, 1438, 1445, 1452, 1459, 1466, 1473, 1483, 
	1490, 1497, 1504, 1511, 1518, 1525, 1532, 1539, 
	1546, 1553, 1560, 1567, 1574, 1581, 1588, 1595, 
	1602, 1609, 1616, 1623, 1630, 1637, 1644, 1651, 
	1658, 1667, 1674, 1681, 1688, 1695, 1702, 1709, 
	1717, 1725, 1732, 1739, 1746, 1753, 1760, 1767
};

static const short _umodLexer_indicies[] = {
	2, 3, 1, 4, 3, 1, 2, 6, 
	5, 7, 6, 5, 8, 0, 9, 9, 
	10, 0, 10, 0, 13, 12, 13, 14, 
	12, 16, 17, 17, 16, 18, 19, 20, 
	21, 22, 23, 24, 25, 26, 27, 28, 
	29, 31, 32, 33, 34, 35, 36, 37, 
	38, 39, 20, 40, 41, 42, 43, 44, 
	45, 46, 47, 48, 49, 50, 51, 52, 
	53, 54, 55, 56, 57, 58, 30, 20, 
	20, 15, 16, 16, 59, 2, 3, 1, 
	20, 20, 20, 20, 20, 0, 2, 6, 
	5, 61, 60, 63, 64, 66, 65, 62, 
	68, 68, 8, 67, 10, 67, 64, 65, 
	69, 71, 64, 72, 65, 70, 8, 73, 
	12, 75, 76, 74, 77, 75, 8, 68, 
	68, 30, 69, 79, 80, 78, 82, 81, 
	84, 83, 20, 20, 86, 87, 88, 20, 
	20, 20, 85, 20, 20, 89, 20, 20, 
	20, 85, 20, 20, 90, 20, 20, 20, 
	85, 20, 20, 91, 20, 20, 20, 85, 
	20, 20, 92, 20, 20, 20, 85, 20, 
	20, 93, 20, 20, 20, 85, 20, 20, 
	94, 20, 20, 20, 85, 20, 20, 95, 
	20, 20, 20, 85, 20, 20, 96, 97, 
	20, 20, 20, 85, 20, 20, 98, 20, 
	20, 20, 85, 20, 20, 99, 20, 20, 
	20, 85, 20, 20, 100, 20, 20, 20, 
	85, 20, 20, 101, 20, 20, 20, 85, 
	20, 20, 102, 20, 20, 20, 85, 20, 
	20, 103, 20, 20, 20, 85, 20, 20, 
	104, 20, 20, 20, 85, 20, 20, 105, 
	20, 20, 20, 85, 20, 20, 106, 20, 
	20, 20, 85, 20, 20, 107, 20, 20, 
	20, 85, 20, 20, 108, 20, 20, 20, 
	85, 20, 20, 109, 110, 20, 20, 20, 
	85, 20, 20, 111, 20, 20, 20, 85, 
	20, 20, 112, 20, 20, 20, 85, 20, 
	20, 113, 20, 20, 20, 85, 20, 20, 
	114, 20, 20, 20, 85, 20, 20, 115, 
	20, 20, 20, 85, 20, 20, 116, 20, 
	20, 20, 85, 20, 20, 117, 118, 20, 
	20, 20, 85, 20, 20, 119, 20, 20, 
	20, 85, 20, 20, 120, 20, 20, 20, 
	85, 20, 20, 121, 20, 20, 20, 85, 
	20, 20, 122, 20, 20, 20, 85, 20, 
	20, 123, 124, 20, 20, 20, 85, 20, 
	20, 125, 20, 20, 20, 85, 20, 20, 
	126, 20, 20, 20, 85, 20, 20, 127, 
	20, 20, 20, 85, 20, 20, 129, 20, 
	20, 20, 128, 20, 20, 130, 20, 20, 
	20, 85, 20, 20, 131, 20, 20, 20, 
	85, 20, 20, 132, 133, 20, 20, 20, 
	85, 20, 20, 134, 20, 20, 20, 85, 
	20, 20, 135, 20, 20, 20, 85, 20, 
	20, 136, 20, 20, 20, 85, 20, 20, 
	137, 20, 20, 20, 85, 20, 20, 138, 
	20, 20, 20, 85, 20, 20, 139, 20, 
	20, 20, 85, 20, 20, 140, 20, 20, 
	20, 85, 20, 20, 141, 20, 20, 20, 
	85, 20, 20, 142, 20, 20, 20, 85, 
	20, 20, 143, 144, 20, 20, 20, 85, 
	20, 20, 145, 20, 20, 20, 85, 20, 
	20, 146, 20, 20, 20, 85, 20, 20, 
	147, 20, 20, 20, 85, 20, 20, 148, 
	20, 20, 20, 85, 20, 20, 149, 20, 
	20, 20, 85, 20, 20, 150, 20, 20, 
	20, 85, 20, 20, 151, 20, 20, 20, 
	85, 20, 20, 152, 153, 154, 155, 156, 
	20, 20, 20, 85, 20, 20, 157, 20, 
	20, 20, 85, 20, 20, 158, 20, 20, 
	20, 85, 20, 20, 159, 20, 20, 20, 
	85, 20, 20, 160, 20, 20, 20, 85, 
	20, 20, 162, 163, 20, 20, 20, 161, 
	20, 20, 164, 20, 20, 20, 85, 20, 
	20, 165, 20, 20, 20, 85, 20, 20, 
	166, 20, 20, 20, 85, 20, 20, 167, 
	20, 20, 20, 85, 20, 20, 168, 169, 
	170, 20, 20, 20, 85, 20, 20, 171, 
	20, 20, 20, 85, 20, 20, 172, 20, 
	20, 20, 85, 20, 20, 173, 20, 20, 
	20, 85, 20, 20, 174, 20, 20, 20, 
	85, 20, 20, 175, 20, 20, 20, 85, 
	20, 20, 176, 20, 20, 20, 85, 20, 
	20, 177, 20, 20, 20, 85, 20, 20, 
	178, 20, 20, 20, 85, 20, 20, 179, 
	20, 20, 20, 85, 20, 20, 180, 20, 
	20, 20, 85, 20, 20, 181, 20, 20, 
	20, 85, 20, 20, 182, 20, 20, 20, 
	85, 20, 20, 183, 20, 20, 20, 85, 
	20, 20, 184, 20, 20, 20, 85, 20, 
	20, 185, 20, 20, 20, 85, 20, 20, 
	186, 20, 20, 20, 85, 20, 20, 187, 
	20, 20, 20, 85, 20, 20, 188, 20, 
	20, 20, 85, 20, 20, 189, 20, 20, 
	20, 85, 20, 20, 190, 20, 20, 20, 
	85, 20, 20, 191, 20, 20, 20, 85, 
	20, 20, 192, 20, 20, 20, 85, 20, 
	20, 193, 20, 20, 20, 85, 20, 20, 
	194, 195, 20, 20, 20, 85, 20, 20, 
	196, 20, 20, 20, 85, 20, 20, 197, 
	20, 20, 20, 85, 20, 20, 198, 20, 
	20, 20, 85, 20, 20, 199, 20, 20, 
	20, 85, 20, 20, 200, 20, 20, 20, 
	85, 20, 20, 201, 20, 20, 20, 85, 
	20, 20, 202, 20, 20, 20, 85, 20, 
	20, 203, 20, 20, 20, 85, 20, 20, 
	204, 205, 20, 20, 20, 85, 20, 20, 
	206, 20, 20, 20, 85, 20, 20, 207, 
	20, 20, 20, 85, 20, 20, 208, 20, 
	20, 20, 85, 20, 20, 209, 20, 20, 
	20, 85, 20, 20, 210, 20, 20, 20, 
	85, 20, 20, 211, 212, 213, 214, 215, 
	20, 20, 20, 85, 20, 20, 216, 20, 
	20, 20, 85, 20, 20, 217, 20, 20, 
	20, 85, 20, 20, 218, 20, 20, 20, 
	85, 20, 20, 219, 20, 20, 20, 85, 
	20, 20, 220, 20, 20, 20, 85, 20, 
	20, 221, 20, 20, 20, 85, 20, 20, 
	222, 20, 20, 20, 85, 20, 20, 223, 
	20, 20, 20, 85, 20, 20, 224, 20, 
	20, 20, 85, 20, 20, 225, 20, 20, 
	20, 85, 20, 20, 226, 20, 20, 20, 
	85, 20, 20, 227, 20, 20, 20, 85, 
	20, 20, 228, 20, 20, 20, 85, 20, 
	20, 229, 20, 20, 20, 85, 20, 20, 
	230, 20, 20, 20, 85, 20, 20, 231, 
	232, 233, 20, 20, 20, 85, 20, 20, 
	234, 20, 20, 20, 85, 20, 20, 235, 
	236, 20, 20, 20, 85, 20, 20, 237, 
	20, 20, 20, 85, 20, 20, 238, 20, 
	20, 20, 85, 20, 20, 239, 20, 20, 
	20, 85, 20, 20, 240, 20, 20, 20, 
	85, 20, 20, 242, 243, 244, 20, 20, 
	20, 241, 20, 20, 245, 20, 20, 20, 
	85, 20, 20, 246, 20, 20, 20, 85, 
	20, 20, 247, 20, 20, 20, 85, 20, 
	20, 248, 20, 20, 20, 85, 20, 20, 
	249, 20, 20, 20, 85, 20, 20, 250, 
	20, 20, 20, 85, 20, 20, 251, 20, 
	20, 20, 85, 20, 20, 252, 20, 20, 
	20, 85, 20, 20, 253, 20, 20, 20, 
	85, 20, 20, 254, 20, 20, 20, 85, 
	20, 20, 255, 20, 20, 20, 85, 20, 
	20, 256, 20, 20, 20, 85, 20, 20, 
	257, 20, 20, 20, 85, 20, 20, 258, 
	20, 20, 20, 85, 20, 20, 259, 20, 
	20, 20, 85, 20, 20, 260, 20, 20, 
	20, 85, 20, 20, 261, 20, 20, 20, 
	85, 20, 20, 262, 263, 264, 20, 20, 
	20, 85, 20, 20, 265, 20, 20, 20, 
	85, 20, 20, 266, 20, 20, 20, 85, 
	20, 20, 267, 20, 20, 20, 85, 20, 
	20, 268, 20, 20, 20, 85, 20, 20, 
	269, 20, 20, 20, 85, 20, 20, 270, 
	20, 20, 20, 85, 20, 20, 271, 20, 
	20, 20, 85, 20, 20, 272, 273, 20, 
	20, 20, 85, 20, 20, 274, 20, 20, 
	20, 85, 20, 20, 275, 20, 20, 20, 
	85, 20, 20, 276, 20, 20, 20, 85, 
	20, 20, 277, 278, 279, 20, 20, 20, 
	85, 20, 20, 280, 281, 20, 20, 20, 
	85, 20, 20, 282, 20, 20, 20, 85, 
	20, 20, 283, 20, 20, 20, 85, 20, 
	20, 284, 20, 20, 20, 85, 20, 20, 
	285, 20, 20, 20, 85, 20, 20, 286, 
	287, 20, 20, 20, 85, 20, 20, 288, 
	20, 20, 20, 85, 20, 20, 289, 20, 
	20, 20, 85, 20, 20, 290, 20, 20, 
	20, 85, 20, 20, 291, 20, 20, 20, 
	85, 20, 20, 292, 20, 20, 20, 85, 
	20, 20, 293, 20, 20, 20, 85, 20, 
	20, 294, 20, 20, 20, 85, 20, 20, 
	295, 20, 20, 20, 85, 20, 20, 296, 
	20, 20, 20, 85, 20, 20, 297, 20, 
	20, 20, 85, 20, 20, 298, 20, 20, 
	20, 85, 20, 20, 299, 20, 20, 20, 
	85, 20, 20, 300, 20, 20, 20, 85, 
	20, 20, 301, 20, 20, 20, 85, 20, 
	20, 302, 20, 20, 20, 85, 20, 20, 
	303, 304, 20, 20, 20, 85, 20, 20, 
	305, 20, 20, 20, 85, 20, 20, 306, 
	20, 20, 20, 85, 20, 20, 307, 20, 
	20, 20, 85, 20, 20, 308, 20, 20, 
	20, 85, 20, 20, 309, 20, 20, 20, 
	85, 20, 20, 310, 311, 312, 313, 20, 
	20, 20, 85, 20, 20, 314, 20, 20, 
	20, 85, 20, 20, 315, 20, 20, 20, 
	85, 20, 20, 316, 20, 20, 20, 85, 
	20, 20, 317, 20, 20, 20, 85, 20, 
	20, 318, 20, 20, 20, 85, 20, 20, 
	319, 20, 20, 20, 85, 20, 20, 320, 
	20, 20, 20, 85, 20, 20, 321, 20, 
	20, 20, 85, 20, 20, 322, 20, 20, 
	20, 85, 20, 20, 323, 20, 20, 20, 
	85, 20, 20, 324, 20, 20, 20, 85, 
	20, 20, 325, 20, 20, 20, 85, 20, 
	20, 326, 20, 20, 20, 85, 20, 20, 
	327, 20, 20, 20, 85, 20, 20, 328, 
	20, 20, 20, 85, 20, 20, 329, 20, 
	20, 20, 85, 20, 20, 330, 20, 20, 
	20, 85, 20, 20, 331, 20, 20, 20, 
	85, 20, 20, 332, 20, 20, 20, 85, 
	20, 20, 333, 20, 20, 20, 85, 20, 
	20, 334, 20, 20, 20, 85, 20, 20, 
	335, 20, 20, 20, 85, 20, 20, 336, 
	20, 20, 20, 85, 20, 20, 337, 20, 
	20, 20, 85, 20, 20, 338, 20, 20, 
	20, 85, 20, 20, 339, 340, 341, 20, 
	20, 20, 85, 20, 20, 342, 20, 20, 
	20, 85, 20, 20, 343, 20, 20, 20, 
	85, 20, 20, 344, 20, 20, 20, 85, 
	20, 20, 345, 20, 20, 20, 85, 20, 
	20, 346, 20, 20, 20, 85, 20, 20, 
	347, 20, 20, 20, 85, 20, 20, 348, 
	349, 20, 20, 20, 85, 20, 20, 350, 
	351, 20, 20, 20, 85, 20, 20, 352, 
	20, 20, 20, 85, 20, 20, 353, 20, 
	20, 20, 85, 20, 20, 354, 20, 20, 
	20, 85, 20, 20, 355, 20, 20, 20, 
	85, 20, 20, 356, 20, 20, 20, 85, 
	20, 20, 357, 20, 20, 20, 85, 20, 
	20, 358, 20, 20, 20, 85, 0
};

static const unsigned char _umodLexer_trans_targs[] = {
	9, 0, 9, 1, 11, 2, 3, 13, 
	16, 6, 17, 9, 7, 8, 9, 9, 
	10, 9, 9, 11, 12, 13, 9, 9, 
	14, 15, 9, 19, 20, 21, 23, 9, 
	9, 24, 25, 26, 9, 9, 9, 9, 
	27, 47, 54, 76, 84, 133, 149, 165, 
	168, 172, 174, 186, 213, 235, 240, 247, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	4, 18, 9, 9, 5, 9, 9, 9, 
	9, 9, 9, 22, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 28, 35, 
	43, 29, 30, 31, 32, 33, 34, 12, 
	12, 36, 37, 38, 39, 40, 41, 42, 
	12, 44, 45, 46, 12, 48, 51, 49, 
	50, 12, 52, 53, 12, 55, 58, 56, 
	57, 12, 59, 60, 65, 61, 62, 63, 
	9, 64, 12, 66, 67, 69, 68, 12, 
	70, 71, 72, 73, 74, 75, 12, 77, 
	78, 12, 79, 80, 81, 82, 83, 12, 
	85, 87, 94, 112, 118, 86, 12, 88, 
	89, 9, 90, 91, 12, 92, 93, 12, 
	95, 12, 104, 96, 97, 98, 99, 100, 
	101, 102, 103, 12, 105, 106, 107, 108, 
	109, 110, 111, 12, 113, 114, 115, 116, 
	117, 12, 119, 126, 120, 121, 122, 123, 
	124, 125, 12, 127, 128, 130, 129, 12, 
	131, 132, 12, 134, 137, 140, 142, 143, 
	135, 136, 12, 138, 139, 12, 141, 12, 
	12, 144, 145, 146, 147, 148, 12, 12, 
	150, 156, 151, 152, 154, 153, 12, 155, 
	12, 9, 157, 161, 163, 158, 159, 160, 
	12, 162, 12, 164, 12, 166, 167, 12, 
	169, 170, 171, 12, 173, 12, 175, 12, 
	181, 176, 177, 178, 179, 180, 12, 182, 
	183, 184, 12, 185, 12, 187, 201, 208, 
	188, 192, 189, 190, 191, 12, 193, 198, 
	194, 195, 196, 197, 12, 199, 200, 12, 
	202, 203, 204, 205, 206, 207, 12, 209, 
	212, 210, 211, 12, 12, 214, 215, 218, 
	224, 232, 216, 217, 12, 219, 220, 221, 
	222, 223, 12, 225, 226, 227, 228, 229, 
	230, 231, 12, 233, 234, 12, 236, 237, 
	238, 239, 12, 241, 243, 245, 242, 12, 
	244, 12, 246, 12, 248, 252, 249, 250, 
	12, 251, 12, 253, 254, 255, 12
};

static const short _umodLexer_trans_actions[] = {
	95, 0, 55, 0, 283, 0, 0, 283, 
	280, 0, 0, 93, 0, 0, 57, 59, 
	0, 53, 7, 286, 277, 286, 9, 11, 
	0, 97, 19, 100, 0, 5, 274, 27, 
	29, 0, 0, 0, 39, 41, 43, 45, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	47, 49, 51, 83, 61, 13, 63, 15, 
	0, 274, 17, 89, 0, 85, 65, 21, 
	23, 67, 69, 0, 25, 91, 71, 31, 
	33, 73, 35, 75, 37, 87, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 103, 
	106, 0, 0, 0, 0, 0, 0, 0, 
	109, 0, 0, 0, 112, 0, 0, 0, 
	0, 115, 0, 0, 118, 0, 0, 0, 
	0, 121, 0, 0, 0, 0, 0, 0, 
	77, 0, 124, 0, 0, 0, 0, 127, 
	0, 0, 0, 0, 0, 0, 130, 0, 
	0, 133, 0, 0, 0, 0, 0, 136, 
	0, 0, 0, 0, 0, 0, 139, 0, 
	0, 79, 0, 0, 142, 0, 0, 145, 
	0, 151, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 148, 0, 0, 0, 0, 
	0, 0, 0, 154, 0, 0, 0, 0, 
	0, 157, 0, 0, 0, 0, 0, 0, 
	0, 0, 160, 0, 0, 0, 0, 163, 
	0, 0, 166, 0, 0, 0, 0, 0, 
	0, 0, 169, 0, 0, 172, 0, 175, 
	178, 0, 0, 0, 0, 0, 181, 184, 
	0, 0, 0, 0, 0, 0, 187, 0, 
	190, 81, 0, 0, 0, 0, 0, 0, 
	193, 0, 196, 0, 199, 0, 0, 202, 
	0, 0, 0, 205, 0, 208, 0, 214, 
	0, 0, 0, 0, 0, 0, 211, 0, 
	0, 0, 217, 0, 220, 0, 0, 0, 
	0, 0, 0, 0, 0, 223, 0, 0, 
	0, 0, 0, 0, 226, 0, 0, 229, 
	0, 0, 0, 0, 0, 0, 232, 0, 
	0, 0, 0, 235, 238, 0, 0, 0, 
	0, 0, 0, 0, 241, 0, 0, 0, 
	0, 0, 244, 0, 0, 0, 0, 0, 
	0, 0, 247, 0, 0, 250, 0, 0, 
	0, 0, 253, 0, 0, 0, 0, 256, 
	0, 259, 0, 262, 0, 0, 0, 0, 
	265, 0, 268, 0, 0, 0, 271
};

static const short _umodLexer_to_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
};

static const short _umodLexer_from_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 3, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
};

static const short _umodLexer_eof_trans[] = {
	1, 1, 1, 1, 1, 1, 1, 12, 
	12, 0, 60, 1, 1, 1, 61, 63, 
	68, 68, 70, 71, 74, 75, 78, 70, 
	79, 82, 84, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 129, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 162, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 242, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86
};

static const int umodLexer_start = 9;
static const int umodLexer_first_final = 9;
static const int umodLexer_error = -1;

static const int umodLexer_en_main = 9;


#line 13 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"

// no idea about the origins of this value, ask Flori ;)
int EVIL=0x666;

using namespace umod::lex;

Lexer::Lexer(const char *source, unsigned int length)
    : m_source(source)
    , m_source_end(source + length)
    , m_source_eof(m_source_end)
    , m_ts(nullptr), m_te(nullptr)
    , m_current_state(EVIL), m_act(0)
    , m_position(std::make_pair(1, 1))
{

}

Lexer::Lexer(const std::string &source): Lexer(source.c_str(), source.length())
{
}

Lexer::~Lexer()
{

}

Lexeme *Lexer::consume(void)
{
    
#line 160 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"


    Lexeme::Type type;

    if (m_source == m_source_end)
    {
        m_ts = m_te = m_source;
        type = Lexeme::Type::EOI;
    }
    else
    {
        
#line 172 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
        
#line 173 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
        
#line 174 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
        
#line 175 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
        
#line 176 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
        
#line 177 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
        
#line 178 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"

        
#line 970 "lexer.cc"
	{
	(  m_current_state) = umodLexer_start;
	(  m_ts) = 0;
	(  m_te) = 0;
	( m_act) = 0;
	}

#line 180 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
        
#line 980 "lexer.cc"
	{
	int _klen;
	unsigned int _trans;
	const char *_acts;
	unsigned int _nacts;
	const char *_keys;

	if ( (   m_source) == (  m_source_end) )
		goto _test_eof;
_resume:
	_acts = _umodLexer_actions + _umodLexer_from_state_actions[(  m_current_state)];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 1:
#line 1 "NONE"
	{(  m_ts) = (   m_source);}
	break;
#line 999 "lexer.cc"
		}
	}

	_keys = _umodLexer_trans_keys + _umodLexer_key_offsets[(  m_current_state)];
	_trans = _umodLexer_index_offsets[(  m_current_state)];

	_klen = _umodLexer_single_lengths[(  m_current_state)];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( (*(   m_source)) < *_mid )
				_upper = _mid - 1;
			else if ( (*(   m_source)) > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (unsigned int)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _umodLexer_range_lengths[(  m_current_state)];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( (*(   m_source)) < _mid[0] )
				_upper = _mid - 2;
			else if ( (*(   m_source)) > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += (unsigned int)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	_trans = _umodLexer_indicies[_trans];
_eof_trans:
	(  m_current_state) = _umodLexer_trans_targs[_trans];

	if ( _umodLexer_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _umodLexer_actions + _umodLexer_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 2:
#line 1 "NONE"
	{(  m_te) = (   m_source)+1;}
	break;
	case 3:
#line 65 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 6;}
	break;
	case 4:
#line 69 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 10;}
	break;
	case 5:
#line 88 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 29;}
	break;
	case 6:
#line 89 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 30;}
	break;
	case 7:
#line 90 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 31;}
	break;
	case 8:
#line 91 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 32;}
	break;
	case 9:
#line 92 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 33;}
	break;
	case 10:
#line 93 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 34;}
	break;
	case 11:
#line 94 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 35;}
	break;
	case 12:
#line 96 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 37;}
	break;
	case 13:
#line 97 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 38;}
	break;
	case 14:
#line 98 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 39;}
	break;
	case 15:
#line 99 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 40;}
	break;
	case 16:
#line 100 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 41;}
	break;
	case 17:
#line 101 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 42;}
	break;
	case 18:
#line 103 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 44;}
	break;
	case 19:
#line 104 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 45;}
	break;
	case 20:
#line 105 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 46;}
	break;
	case 21:
#line 106 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 47;}
	break;
	case 22:
#line 107 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 48;}
	break;
	case 23:
#line 108 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 49;}
	break;
	case 24:
#line 109 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 50;}
	break;
	case 25:
#line 110 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 51;}
	break;
	case 26:
#line 111 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 52;}
	break;
	case 27:
#line 112 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 53;}
	break;
	case 28:
#line 113 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 54;}
	break;
	case 29:
#line 114 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 55;}
	break;
	case 30:
#line 115 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 56;}
	break;
	case 31:
#line 116 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 57;}
	break;
	case 32:
#line 117 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 58;}
	break;
	case 33:
#line 118 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 59;}
	break;
	case 34:
#line 119 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 60;}
	break;
	case 35:
#line 121 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 62;}
	break;
	case 36:
#line 122 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 63;}
	break;
	case 37:
#line 123 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 64;}
	break;
	case 38:
#line 124 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 65;}
	break;
	case 39:
#line 125 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 66;}
	break;
	case 40:
#line 126 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 67;}
	break;
	case 41:
#line 127 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 68;}
	break;
	case 42:
#line 128 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 69;}
	break;
	case 43:
#line 129 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 70;}
	break;
	case 44:
#line 130 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 71;}
	break;
	case 45:
#line 131 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 72;}
	break;
	case 46:
#line 132 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 73;}
	break;
	case 47:
#line 133 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 74;}
	break;
	case 48:
#line 134 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 75;}
	break;
	case 49:
#line 135 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 76;}
	break;
	case 50:
#line 136 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 77;}
	break;
	case 51:
#line 137 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 78;}
	break;
	case 52:
#line 138 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 79;}
	break;
	case 53:
#line 139 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 80;}
	break;
	case 54:
#line 140 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 81;}
	break;
	case 55:
#line 141 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 82;}
	break;
	case 56:
#line 142 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 83;}
	break;
	case 57:
#line 143 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 84;}
	break;
	case 58:
#line 144 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 85;}
	break;
	case 59:
#line 145 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 86;}
	break;
	case 60:
#line 146 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 87;}
	break;
	case 61:
#line 147 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 88;}
	break;
	case 62:
#line 153 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 94;}
	break;
	case 63:
#line 154 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 95;}
	break;
	case 64:
#line 155 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 96;}
	break;
	case 65:
#line 156 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 97;}
	break;
	case 66:
#line 158 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{( m_act) = 99;}
	break;
	case 67:
#line 60 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::NEGATE; {(   m_source)++; goto _out; } }}
	break;
	case 68:
#line 61 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::LPAREN; {(   m_source)++; goto _out; } }}
	break;
	case 69:
#line 62 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::RPAREN; {(   m_source)++; goto _out; } }}
	break;
	case 70:
#line 64 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::MULASSIGN; {(   m_source)++; goto _out; } }}
	break;
	case 71:
#line 66 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::INCREMENTATION; {(   m_source)++; goto _out; } }}
	break;
	case 72:
#line 67 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::PLUSASSIGN; {(   m_source)++; goto _out; } }}
	break;
	case 73:
#line 68 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::COMMA; {(   m_source)++; goto _out; } }}
	break;
	case 74:
#line 70 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::DECREMENTATION; {(   m_source)++; goto _out; } }}
	break;
	case 75:
#line 71 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::MINUSASSIGN; {(   m_source)++; goto _out; } }}
	break;
	case 76:
#line 74 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::DIVASSIGN; {(   m_source)++; goto _out; } }}
	break;
	case 77:
#line 75 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::COLON; {(   m_source)++; goto _out; } }}
	break;
	case 78:
#line 76 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::SEMICOLON; {(   m_source)++; goto _out; } }}
	break;
	case 79:
#line 78 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::LESSEROREQUAL; {(   m_source)++; goto _out; } }}
	break;
	case 80:
#line 79 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::NOTEQUAL; {(   m_source)++; goto _out; } }}
	break;
	case 81:
#line 81 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::EQUAL; {(   m_source)++; goto _out; } }}
	break;
	case 82:
#line 83 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::GREATEROREQUAL; {(   m_source)++; goto _out; } }}
	break;
	case 83:
#line 84 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::QUESTIONMARK; {(   m_source)++; goto _out; } }}
	break;
	case 84:
#line 85 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::LBRACKET; {(   m_source)++; goto _out; } }}
	break;
	case 85:
#line 86 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::RBRACKET; {(   m_source)++; goto _out; } }}
	break;
	case 86:
#line 87 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::EXPONENT; {(   m_source)++; goto _out; } }}
	break;
	case 87:
#line 148 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::LBRACE; {(   m_source)++; goto _out; } }}
	break;
	case 88:
#line 149 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::RBRACE; {(   m_source)++; goto _out; } }}
	break;
	case 89:
#line 150 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::INV; {(   m_source)++; goto _out; } }}
	break;
	case 90:
#line 152 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::NEWLINE; {(   m_source)++; goto _out; } }}
	break;
	case 91:
#line 156 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::STRING; {(   m_source)++; goto _out; } }}
	break;
	case 92:
#line 157 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::COMMENT; {(   m_source)++; goto _out; } }}
	break;
	case 93:
#line 158 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ {(   m_source)++; goto _out; } }}
	break;
	case 94:
#line 63 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::MUL; {(   m_source)++; goto _out; } }}
	break;
	case 95:
#line 65 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::PLUS; {(   m_source)++; goto _out; } }}
	break;
	case 96:
#line 69 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::MINUS; {(   m_source)++; goto _out; } }}
	break;
	case 97:
#line 72 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::DOT; {(   m_source)++; goto _out; } }}
	break;
	case 98:
#line 73 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::DIV; {(   m_source)++; goto _out; } }}
	break;
	case 99:
#line 77 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::LESSER; {(   m_source)++; goto _out; } }}
	break;
	case 100:
#line 80 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::ASSIGN; {(   m_source)++; goto _out; } }}
	break;
	case 101:
#line 82 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::GREATER; {(   m_source)++; goto _out; } }}
	break;
	case 102:
#line 95 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::CONNECT; {(   m_source)++; goto _out; } }}
	break;
	case 103:
#line 102 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::ELSE; {(   m_source)++; goto _out; } }}
	break;
	case 104:
#line 120 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::IN; {(   m_source)++; goto _out; } }}
	break;
	case 105:
#line 151 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::SPACES; {(   m_source)++; goto _out; } }}
	break;
	case 106:
#line 153 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::NUMBER; {(   m_source)++; goto _out; } }}
	break;
	case 107:
#line 154 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::IDENT; {(   m_source)++; goto _out; } }}
	break;
	case 108:
#line 155 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::FLOAT; {(   m_source)++; goto _out; } }}
	break;
	case 109:
#line 157 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::COMMENT; {(   m_source)++; goto _out; } }}
	break;
	case 110:
#line 73 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
	{{(   m_source) = (((  m_te)))-1;}{ type = Lexeme::Type::DIV; {(   m_source)++; goto _out; } }}
	break;
	case 111:
#line 1 "NONE"
	{	switch( ( m_act) ) {
	case 6:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::PLUS; {(   m_source)++; goto _out; } }
	break;
	case 10:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::MINUS; {(   m_source)++; goto _out; } }
	break;
	case 29:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::ALGORITHM; {(   m_source)++; goto _out; } }
	break;
	case 30:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::AND; {(   m_source)++; goto _out; } }
	break;
	case 31:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::ANNOTATION; {(   m_source)++; goto _out; } }
	break;
	case 32:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::ASSERT; {(   m_source)++; goto _out; } }
	break;
	case 33:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::BLOCK; {(   m_source)++; goto _out; } }
	break;
	case 34:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::BREAK; {(   m_source)++; goto _out; } }
	break;
	case 35:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::CLASS; {(   m_source)++; goto _out; } }
	break;
	case 37:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::CONNECTOR; {(   m_source)++; goto _out; } }
	break;
	case 38:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::CONSTANT; {(   m_source)++; goto _out; } }
	break;
	case 39:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::CONSTRAINEDBY; {(   m_source)++; goto _out; } }
	break;
	case 40:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::DER; {(   m_source)++; goto _out; } }
	break;
	case 41:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::DISCRETE; {(   m_source)++; goto _out; } }
	break;
	case 42:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::EACH; {(   m_source)++; goto _out; } }
	break;
	case 44:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::ELSEIF; {(   m_source)++; goto _out; } }
	break;
	case 45:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::ELSEWHEN; {(   m_source)++; goto _out; } }
	break;
	case 46:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::ENCAPSULATED; {(   m_source)++; goto _out; } }
	break;
	case 47:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::END; {(   m_source)++; goto _out; } }
	break;
	case 48:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::ENUMERATION; {(   m_source)++; goto _out; } }
	break;
	case 49:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::EQUATION; {(   m_source)++; goto _out; } }
	break;
	case 50:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::EXPANDABLE; {(   m_source)++; goto _out; } }
	break;
	case 51:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::EXTENDS; {(   m_source)++; goto _out; } }
	break;
	case 52:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::EXTERNAL; {(   m_source)++; goto _out; } }
	break;
	case 53:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::FALSE; {(   m_source)++; goto _out; } }
	break;
	case 54:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::FINAL; {(   m_source)++; goto _out; } }
	break;
	case 55:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::FLOW; {(   m_source)++; goto _out; } }
	break;
	case 56:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::FOR; {(   m_source)++; goto _out; } }
	break;
	case 57:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::FUNCTION; {(   m_source)++; goto _out; } }
	break;
	case 58:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::IF; {(   m_source)++; goto _out; } }
	break;
	case 59:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::IMPORT; {(   m_source)++; goto _out; } }
	break;
	case 60:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::IMPURE; {(   m_source)++; goto _out; } }
	break;
	case 62:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::INITIAL; {(   m_source)++; goto _out; } }
	break;
	case 63:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::INNER; {(   m_source)++; goto _out; } }
	break;
	case 64:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::INPUT; {(   m_source)++; goto _out; } }
	break;
	case 65:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::LOOP; {(   m_source)++; goto _out; } }
	break;
	case 66:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::MODEL; {(   m_source)++; goto _out; } }
	break;
	case 67:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::NOT; {(   m_source)++; goto _out; } }
	break;
	case 68:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::OPERATOR; {(   m_source)++; goto _out; } }
	break;
	case 69:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::OR; {(   m_source)++; goto _out; } }
	break;
	case 70:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::OUTER; {(   m_source)++; goto _out; } }
	break;
	case 71:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::OUTPUT; {(   m_source)++; goto _out; } }
	break;
	case 72:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::PACKAGE; {(   m_source)++; goto _out; } }
	break;
	case 73:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::PARAMETER; {(   m_source)++; goto _out; } }
	break;
	case 74:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::PARTIAL; {(   m_source)++; goto _out; } }
	break;
	case 75:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::PROTECTED; {(   m_source)++; goto _out; } }
	break;
	case 76:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::PUBLIC; {(   m_source)++; goto _out; } }
	break;
	case 77:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::PURE; {(   m_source)++; goto _out; } }
	break;
	case 78:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::RECORD; {(   m_source)++; goto _out; } }
	break;
	case 79:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::REDECLARE; {(   m_source)++; goto _out; } }
	break;
	case 80:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::REPLACEABLE; {(   m_source)++; goto _out; } }
	break;
	case 81:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::RETURN; {(   m_source)++; goto _out; } }
	break;
	case 82:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::STREAM; {(   m_source)++; goto _out; } }
	break;
	case 83:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::THEN; {(   m_source)++; goto _out; } }
	break;
	case 84:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::TRUE; {(   m_source)++; goto _out; } }
	break;
	case 85:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::TYPE; {(   m_source)++; goto _out; } }
	break;
	case 86:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::WHEN; {(   m_source)++; goto _out; } }
	break;
	case 87:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::WHILE; {(   m_source)++; goto _out; } }
	break;
	case 88:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::WITHIN; {(   m_source)++; goto _out; } }
	break;
	case 94:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::NUMBER; {(   m_source)++; goto _out; } }
	break;
	case 95:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::IDENT; {(   m_source)++; goto _out; } }
	break;
	case 96:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::FLOAT; {(   m_source)++; goto _out; } }
	break;
	case 97:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::STRING; {(   m_source)++; goto _out; } }
	break;
	case 99:
	{{(   m_source) = (((  m_te)))-1;} {(   m_source)++; goto _out; } }
	break;
	}
	}
	break;
#line 1699 "lexer.cc"
		}
	}

_again:
	_acts = _umodLexer_actions + _umodLexer_to_state_actions[(  m_current_state)];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 0:
#line 1 "NONE"
	{(  m_ts) = 0;}
	break;
#line 1712 "lexer.cc"
		}
	}

	if ( ++(   m_source) != (  m_source_end) )
		goto _resume;
	_test_eof: {}
	if ( (   m_source) == ( m_source_eof) )
	{
	if ( _umodLexer_eof_trans[(  m_current_state)] > 0 ) {
		_trans = _umodLexer_eof_trans[(  m_current_state)] - 1;
		goto _eof_trans;
	}
	}

	_out: {}
	}

#line 181 "/Users/phryne/Desktop/uModelica/src/parse/lex/lexer.rl"
    }

    unsigned int size = m_te - m_ts;
    Lexeme::pos_t position = m_position;

    if (type == Lexeme::Type::NEWLINE)
    {
        m_position.first += 1;
        m_position.second = size;
    }
    else
    {
        m_position.second += size;
    }

    return new Lexeme(type, std::string(m_ts, size), position);
}

