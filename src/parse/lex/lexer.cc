
#line 1 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
#include <stddef.h>
#include <string>
#include <utility>
#include "lexer.h"
#include "lexeme.h"

// NOTE : if the lemon-parser is properly done then all the #define in lemon-parser.h should be equal
//        to total no of tokens
//        lemon-parser.h is generated by lemon based on whats used in parser , so if all the cases are
//              considered then there should be no token not # defined failsafe

#line 12 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"

#line 17 "lexer.cc"
static const char _umodLexer_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	66, 1, 67, 1, 68, 1, 69, 1, 
	70, 1, 71, 1, 72, 1, 73, 1, 
	74, 1, 75, 1, 76, 1, 77, 1, 
	78, 1, 79, 1, 80, 1, 81, 1, 
	82, 1, 83, 1, 84, 1, 85, 1, 
	86, 1, 87, 1, 88, 1, 89, 1, 
	90, 1, 91, 1, 92, 1, 93, 1, 
	94, 1, 95, 1, 96, 1, 97, 1, 
	98, 1, 99, 1, 100, 1, 101, 1, 
	102, 1, 103, 1, 104, 1, 105, 1, 
	106, 1, 107, 1, 108, 1, 109, 1, 
	110, 1, 111, 2, 2, 3, 2, 2, 
	4, 2, 2, 5, 2, 2, 6, 2, 
	2, 7, 2, 2, 8, 2, 2, 9, 
	2, 2, 10, 2, 2, 11, 2, 2, 
	12, 2, 2, 13, 2, 2, 14, 2, 
	2, 15, 2, 2, 16, 2, 2, 17, 
	2, 2, 18, 2, 2, 19, 2, 2, 
	20, 2, 2, 21, 2, 2, 22, 2, 
	2, 23, 2, 2, 24, 2, 2, 25, 
	2, 2, 26, 2, 2, 27, 2, 2, 
	28, 2, 2, 29, 2, 2, 30, 2, 
	2, 31, 2, 2, 32, 2, 2, 33, 
	2, 2, 34, 2, 2, 35, 2, 2, 
	36, 2, 2, 37, 2, 2, 38, 2, 
	2, 39, 2, 2, 40, 2, 2, 41, 
	2, 2, 42, 2, 2, 43, 2, 2, 
	44, 2, 2, 45, 2, 2, 46, 2, 
	2, 47, 2, 2, 48, 2, 2, 49, 
	2, 2, 50, 2, 2, 51, 2, 2, 
	52, 2, 2, 53, 2, 2, 54, 2, 
	2, 55, 2, 2, 56, 2, 2, 57, 
	2, 2, 58, 2, 2, 59, 2, 2, 
	60, 2, 2, 61, 2, 2, 62, 2, 
	2, 63, 2, 2, 64, 2, 2, 65
	
};

static const short _umodLexer_key_offsets[] = {
	0, 2, 13, 21, 30, 41, 42, 44, 
	48, 50, 61, 70, 78, 89, 93, 94, 
	95, 96, 97, 98, 99, 100, 101, 102, 
	103, 104, 105, 106, 107, 108, 111, 112, 
	113, 114, 115, 116, 117, 118, 165, 167, 
	169, 178, 179, 184, 186, 187, 192, 196, 
	198, 199, 201, 202, 209, 218, 226, 234, 
	242, 250, 258, 266, 274, 283, 291, 299, 
	307, 315, 323, 331, 339, 348, 356, 364, 
	372, 380, 388, 396, 405, 413, 421, 429, 
	437, 446, 454, 462, 470, 478, 486, 494, 
	503, 511, 519, 527, 535, 543, 551, 559, 
	567, 575, 584, 592, 600, 608, 616, 624, 
	632, 640, 652, 660, 668, 676, 684, 693, 
	701, 709, 717, 725, 735, 743, 751, 759, 
	767, 775, 783, 791, 799, 807, 816, 817, 
	824, 832, 840, 848, 856, 865, 873, 881, 
	889, 897, 905, 913, 921, 929, 937, 945, 
	953, 961, 969, 977, 985, 993, 1001, 1010, 
	1018, 1026, 1034, 1042, 1050, 1058, 1066, 1074, 
	1083, 1091, 1099, 1107, 1115, 1123, 1135, 1143, 
	1151, 1159, 1167, 1175, 1183, 1191, 1199, 1207, 
	1215, 1223, 1231, 1239, 1247, 1255, 1265, 1273, 
	1282, 1290, 1298, 1306, 1314, 1324, 1332, 1340, 
	1348, 1356, 1365, 1373, 1381, 1389, 1397, 1405, 
	1413, 1421, 1429, 1437, 1445, 1453, 1461, 1469, 
	1479, 1487, 1495, 1503, 1511, 1519, 1527, 1536, 
	1544, 1553, 1561, 1569, 1577, 1587, 1596, 1604, 
	1612, 1620, 1628, 1637, 1645, 1653, 1661, 1669, 
	1677, 1685, 1693, 1701, 1709, 1717, 1725, 1733, 
	1741, 1749, 1757, 1766, 1774, 1782, 1790, 1798, 
	1806, 1817, 1825, 1833, 1841, 1849, 1857, 1865, 
	1873, 1881, 1889, 1897, 1905, 1913, 1921, 1929, 
	1937, 1945, 1953, 1961, 1969, 1977, 1985, 1993, 
	2001, 2009, 2017, 2027, 2035, 2043, 2051, 2059, 
	2067, 2075, 2084, 2093, 2101, 2109, 2117, 2125, 
	2133, 2141
};

static const char _umodLexer_trans_keys[] = {
	34, 92, 34, 39, 63, 92, 102, 110, 
	114, 116, 118, 97, 98, 39, 92, 32, 
	33, 35, 95, 97, 126, 92, 32, 33, 
	35, 38, 40, 95, 97, 126, 34, 39, 
	63, 92, 102, 110, 114, 116, 118, 97, 
	98, 42, 42, 47, 43, 45, 48, 57, 
	48, 57, 9, 32, 39, 95, 102, 105, 
	119, 65, 90, 97, 122, 92, 32, 33, 
	35, 38, 40, 95, 97, 126, 39, 92, 
	32, 33, 35, 95, 97, 126, 34, 39, 
	63, 92, 102, 110, 114, 116, 118, 97, 
	98, 9, 32, 97, 101, 108, 103, 111, 
	114, 105, 116, 104, 109, 113, 117, 97, 
	116, 105, 111, 110, 9, 32, 102, 117, 
	110, 99, 116, 105, 111, 110, 9, 10, 
	13, 32, 34, 39, 40, 41, 42, 43, 
	44, 45, 46, 47, 58, 59, 60, 61, 
	62, 91, 93, 94, 95, 97, 98, 99, 
	100, 101, 102, 105, 108, 109, 110, 111, 
	112, 114, 115, 116, 119, 123, 125, 48, 
	57, 65, 90, 103, 122, 9, 32, 34, 
	92, 92, 32, 33, 35, 38, 40, 95, 
	97, 126, 39, 42, 43, 45, 47, 94, 
	42, 47, 10, 46, 69, 101, 48, 57, 
	69, 101, 48, 57, 48, 57, 61, 61, 
	62, 61, 95, 48, 57, 65, 90, 97, 
	122, 95, 108, 110, 48, 57, 65, 90, 
	97, 122, 95, 103, 48, 57, 65, 90, 
	97, 122, 95, 111, 48, 57, 65, 90, 
	97, 122, 95, 114, 48, 57, 65, 90, 
	97, 122, 95, 105, 48, 57, 65, 90, 
	97, 122, 95, 116, 48, 57, 65, 90, 
	97, 122, 95, 104, 48, 57, 65, 90, 
	97, 122, 95, 109, 48, 57, 65, 90, 
	97, 122, 95, 100, 110, 48, 57, 65, 
	90, 97, 122, 95, 111, 48, 57, 65, 
	90, 97, 122, 95, 116, 48, 57, 65, 
	90, 97, 122, 95, 97, 48, 57, 65, 
	90, 98, 122, 95, 116, 48, 57, 65, 
	90, 97, 122, 95, 105, 48, 57, 65, 
	90, 97, 122, 95, 111, 48, 57, 65, 
	90, 97, 122, 95, 110, 48, 57, 65, 
	90, 97, 122, 95, 108, 114, 48, 57, 
	65, 90, 97, 122, 95, 111, 48, 57, 
	65, 90, 97, 122, 95, 99, 48, 57, 
	65, 90, 97, 122, 95, 107, 48, 57, 
	65, 90, 97, 122, 95, 101, 48, 57, 
	65, 90, 97, 122, 95, 97, 48, 57, 
	65, 90, 98, 122, 95, 107, 48, 57, 
	65, 90, 97, 122, 95, 108, 111, 48, 
	57, 65, 90, 97, 122, 95, 97, 48, 
	57, 65, 90, 98, 122, 95, 115, 48, 
	57, 65, 90, 97, 122, 95, 115, 48, 
	57, 65, 90, 97, 122, 95, 110, 48, 
	57, 65, 90, 97, 122, 95, 110, 115, 
	48, 57, 65, 90, 97, 122, 95, 101, 
	48, 57, 65, 90, 97, 122, 95, 99, 
	48, 57, 65, 90, 97, 122, 95, 116, 
	48, 57, 65, 90, 97, 122, 95, 111, 
	48, 57, 65, 90, 97, 122, 95, 114, 
	48, 57, 65, 90, 97, 122, 95, 116, 
	48, 57, 65, 90, 97, 122, 95, 97, 
	114, 48, 57, 65, 90, 98, 122, 95, 
	110, 48, 57, 65, 90, 97, 122, 95, 
	116, 48, 57, 65, 90, 97, 122, 95, 
	97, 48, 57, 65, 90, 98, 122, 95, 
	105, 48, 57, 65, 90, 97, 122, 95, 
	110, 48, 57, 65, 90, 97, 122, 95, 
	101, 48, 57, 65, 90, 97, 122, 95, 
	100, 48, 57, 65, 90, 97, 122, 95, 
	98, 48, 57, 65, 90, 97, 122, 95, 
	121, 48, 57, 65, 90, 97, 122, 95, 
	101, 105, 48, 57, 65, 90, 97, 122, 
	95, 114, 48, 57, 65, 90, 97, 122, 
	95, 115, 48, 57, 65, 90, 97, 122, 
	95, 99, 48, 57, 65, 90, 97, 122, 
	95, 114, 48, 57, 65, 90, 97, 122, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	95, 97, 108, 110, 113, 120, 48, 57, 
	65, 90, 98, 122, 95, 99, 48, 57, 
	65, 90, 97, 122, 95, 104, 48, 57, 
	65, 90, 97, 122, 95, 115, 48, 57, 
	65, 90, 97, 122, 95, 101, 48, 57, 
	65, 90, 97, 122, 95, 105, 119, 48, 
	57, 65, 90, 97, 122, 95, 102, 48, 
	57, 65, 90, 97, 122, 95, 104, 48, 
	57, 65, 90, 97, 122, 95, 101, 48, 
	57, 65, 90, 97, 122, 95, 110, 48, 
	57, 65, 90, 97, 122, 95, 99, 100, 
	117, 48, 57, 65, 90, 97, 122, 95, 
	97, 48, 57, 65, 90, 98, 122, 95, 
	112, 48, 57, 65, 90, 97, 122, 95, 
	115, 48, 57, 65, 90, 97, 122, 95, 
	117, 48, 57, 65, 90, 97, 122, 95, 
	108, 48, 57, 65, 90, 97, 122, 95, 
	97, 48, 57, 65, 90, 98, 122, 95, 
	116, 48, 57, 65, 90, 97, 122, 95, 
	101, 48, 57, 65, 90, 97, 122, 95, 
	100, 48, 57, 65, 90, 97, 122, 9, 
	32, 95, 48, 57, 65, 90, 97, 122, 
	39, 95, 48, 57, 65, 90, 97, 122, 
	95, 111, 48, 57, 65, 90, 97, 122, 
	95, 114, 48, 57, 65, 90, 97, 122, 
	95, 102, 48, 57, 65, 90, 97, 122, 
	95, 104, 48, 57, 65, 90, 97, 122, 
	95, 101, 105, 48, 57, 65, 90, 97, 
	122, 95, 110, 48, 57, 65, 90, 97, 
	122, 95, 108, 48, 57, 65, 90, 97, 
	122, 95, 101, 48, 57, 65, 90, 97, 
	122, 95, 109, 48, 57, 65, 90, 97, 
	122, 95, 101, 48, 57, 65, 90, 97, 
	122, 95, 114, 48, 57, 65, 90, 97, 
	122, 95, 97, 48, 57, 65, 90, 98, 
	122, 95, 116, 48, 57, 65, 90, 97, 
	122, 95, 105, 48, 57, 65, 90, 97, 
	122, 95, 111, 48, 57, 65, 90, 97, 
	122, 95, 110, 48, 57, 65, 90, 97, 
	122, 95, 117, 48, 57, 65, 90, 97, 
	122, 95, 97, 48, 57, 65, 90, 98, 
	122, 95, 116, 48, 57, 65, 90, 97, 
	122, 95, 105, 48, 57, 65, 90, 97, 
	122, 95, 111, 48, 57, 65, 90, 97, 
	122, 95, 110, 48, 57, 65, 90, 97, 
	122, 95, 112, 116, 48, 57, 65, 90, 
	97, 122, 95, 97, 48, 57, 65, 90, 
	98, 122, 95, 110, 48, 57, 65, 90, 
	97, 122, 95, 100, 48, 57, 65, 90, 
	97, 122, 95, 97, 48, 57, 65, 90, 
	98, 122, 95, 98, 48, 57, 65, 90, 
	97, 122, 95, 108, 48, 57, 65, 90, 
	97, 122, 95, 101, 48, 57, 65, 90, 
	97, 122, 95, 101, 48, 57, 65, 90, 
	97, 122, 95, 110, 114, 48, 57, 65, 
	90, 97, 122, 95, 100, 48, 57, 65, 
	90, 97, 122, 95, 115, 48, 57, 65, 
	90, 97, 122, 95, 110, 48, 57, 65, 
	90, 97, 122, 95, 97, 48, 57, 65, 
	90, 98, 122, 95, 108, 48, 57, 65, 
	90, 97, 122, 95, 97, 105, 108, 111, 
	117, 48, 57, 65, 90, 98, 122, 95, 
	108, 48, 57, 65, 90, 97, 122, 95, 
	115, 48, 57, 65, 90, 97, 122, 95, 
	101, 48, 57, 65, 90, 97, 122, 95, 
	110, 48, 57, 65, 90, 97, 122, 95, 
	97, 48, 57, 65, 90, 98, 122, 95, 
	108, 48, 57, 65, 90, 97, 122, 95, 
	111, 48, 57, 65, 90, 97, 122, 95, 
	119, 48, 57, 65, 90, 97, 122, 95, 
	114, 48, 57, 65, 90, 97, 122, 95, 
	110, 48, 57, 65, 90, 97, 122, 95, 
	99, 48, 57, 65, 90, 97, 122, 95, 
	116, 48, 57, 65, 90, 97, 122, 95, 
	105, 48, 57, 65, 90, 97, 122, 95, 
	111, 48, 57, 65, 90, 97, 122, 95, 
	110, 48, 57, 65, 90, 97, 122, 95, 
	102, 109, 110, 48, 57, 65, 90, 97, 
	122, 95, 112, 48, 57, 65, 90, 97, 
	122, 95, 111, 117, 48, 57, 65, 90, 
	97, 122, 95, 114, 48, 57, 65, 90, 
	97, 122, 95, 116, 48, 57, 65, 90, 
	97, 122, 95, 114, 48, 57, 65, 90, 
	97, 122, 95, 101, 48, 57, 65, 90, 
	97, 122, 95, 105, 110, 112, 48, 57, 
	65, 90, 97, 122, 95, 116, 48, 57, 
	65, 90, 97, 122, 95, 105, 48, 57, 
	65, 90, 97, 122, 95, 97, 48, 57, 
	65, 90, 98, 122, 95, 108, 48, 57, 
	65, 90, 97, 122, 9, 32, 95, 48, 
	57, 65, 90, 97, 122, 95, 101, 48, 
	57, 65, 90, 97, 122, 95, 114, 48, 
	57, 65, 90, 97, 122, 95, 117, 48, 
	57, 65, 90, 97, 122, 95, 116, 48, 
	57, 65, 90, 97, 122, 95, 111, 48, 
	57, 65, 90, 97, 122, 95, 111, 48, 
	57, 65, 90, 97, 122, 95, 112, 48, 
	57, 65, 90, 97, 122, 95, 111, 48, 
	57, 65, 90, 97, 122, 95, 100, 48, 
	57, 65, 90, 97, 122, 95, 101, 48, 
	57, 65, 90, 97, 122, 95, 108, 48, 
	57, 65, 90, 97, 122, 95, 111, 48, 
	57, 65, 90, 97, 122, 95, 116, 48, 
	57, 65, 90, 97, 122, 95, 112, 114, 
	117, 48, 57, 65, 90, 97, 122, 95, 
	101, 48, 57, 65, 90, 97, 122, 95, 
	114, 48, 57, 65, 90, 97, 122, 95, 
	97, 48, 57, 65, 90, 98, 122, 95, 
	116, 48, 57, 65, 90, 97, 122, 95, 
	111, 48, 57, 65, 90, 97, 122, 95, 
	114, 48, 57, 65, 90, 97, 122, 9, 
	32, 95, 48, 57, 65, 90, 97, 122, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	95, 101, 112, 48, 57, 65, 90, 97, 
	122, 95, 114, 48, 57, 65, 90, 97, 
	122, 95, 117, 48, 57, 65, 90, 97, 
	122, 95, 116, 48, 57, 65, 90, 97, 
	122, 95, 97, 114, 117, 48, 57, 65, 
	90, 98, 122, 95, 99, 114, 48, 57, 
	65, 90, 97, 122, 95, 107, 48, 57, 
	65, 90, 97, 122, 95, 97, 48, 57, 
	65, 90, 98, 122, 95, 103, 48, 57, 
	65, 90, 97, 122, 95, 101, 48, 57, 
	65, 90, 97, 122, 95, 97, 116, 48, 
	57, 65, 90, 98, 122, 95, 109, 48, 
	57, 65, 90, 97, 122, 95, 101, 48, 
	57, 65, 90, 97, 122, 95, 116, 48, 
	57, 65, 90, 97, 122, 95, 101, 48, 
	57, 65, 90, 97, 122, 95, 114, 48, 
	57, 65, 90, 97, 122, 95, 105, 48, 
	57, 65, 90, 97, 122, 95, 97, 48, 
	57, 65, 90, 98, 122, 95, 108, 48, 
	57, 65, 90, 97, 122, 95, 111, 48, 
	57, 65, 90, 97, 122, 95, 116, 48, 
	57, 65, 90, 97, 122, 95, 101, 48, 
	57, 65, 90, 97, 122, 95, 99, 48, 
	57, 65, 90, 97, 122, 95, 116, 48, 
	57, 65, 90, 97, 122, 95, 101, 48, 
	57, 65, 90, 97, 122, 95, 100, 48, 
	57, 65, 90, 97, 122, 95, 98, 114, 
	48, 57, 65, 90, 97, 122, 95, 108, 
	48, 57, 65, 90, 97, 122, 95, 105, 
	48, 57, 65, 90, 97, 122, 95, 99, 
	48, 57, 65, 90, 97, 122, 95, 101, 
	48, 57, 65, 90, 97, 122, 95, 101, 
	48, 57, 65, 90, 97, 122, 95, 99, 
	100, 112, 116, 48, 57, 65, 90, 97, 
	122, 95, 111, 48, 57, 65, 90, 97, 
	122, 95, 114, 48, 57, 65, 90, 97, 
	122, 95, 100, 48, 57, 65, 90, 97, 
	122, 95, 101, 48, 57, 65, 90, 97, 
	122, 95, 99, 48, 57, 65, 90, 97, 
	122, 95, 108, 48, 57, 65, 90, 97, 
	122, 95, 97, 48, 57, 65, 90, 98, 
	122, 95, 114, 48, 57, 65, 90, 97, 
	122, 95, 101, 48, 57, 65, 90, 97, 
	122, 95, 108, 48, 57, 65, 90, 97, 
	122, 95, 97, 48, 57, 65, 90, 98, 
	122, 95, 99, 48, 57, 65, 90, 97, 
	122, 95, 101, 48, 57, 65, 90, 97, 
	122, 95, 97, 48, 57, 65, 90, 98, 
	122, 95, 98, 48, 57, 65, 90, 97, 
	122, 95, 108, 48, 57, 65, 90, 97, 
	122, 95, 101, 48, 57, 65, 90, 97, 
	122, 95, 117, 48, 57, 65, 90, 97, 
	122, 95, 114, 48, 57, 65, 90, 97, 
	122, 95, 110, 48, 57, 65, 90, 97, 
	122, 95, 116, 48, 57, 65, 90, 97, 
	122, 95, 114, 48, 57, 65, 90, 97, 
	122, 95, 101, 48, 57, 65, 90, 97, 
	122, 95, 97, 48, 57, 65, 90, 98, 
	122, 95, 109, 48, 57, 65, 90, 97, 
	122, 95, 104, 114, 121, 48, 57, 65, 
	90, 97, 122, 95, 101, 48, 57, 65, 
	90, 97, 122, 95, 110, 48, 57, 65, 
	90, 97, 122, 95, 117, 48, 57, 65, 
	90, 97, 122, 95, 101, 48, 57, 65, 
	90, 97, 122, 95, 112, 48, 57, 65, 
	90, 97, 122, 95, 101, 48, 57, 65, 
	90, 97, 122, 95, 104, 105, 48, 57, 
	65, 90, 97, 122, 95, 101, 105, 48, 
	57, 65, 90, 97, 122, 95, 110, 48, 
	57, 65, 90, 97, 122, 95, 108, 48, 
	57, 65, 90, 97, 122, 95, 101, 48, 
	57, 65, 90, 97, 122, 95, 116, 48, 
	57, 65, 90, 97, 122, 95, 104, 48, 
	57, 65, 90, 97, 122, 95, 105, 48, 
	57, 65, 90, 97, 122, 95, 110, 48, 
	57, 65, 90, 97, 122, 0
};

static const char _umodLexer_single_lengths[] = {
	2, 9, 2, 1, 9, 1, 2, 2, 
	0, 7, 1, 2, 9, 4, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 3, 1, 1, 
	1, 1, 1, 1, 1, 41, 2, 2, 
	1, 1, 5, 2, 1, 3, 2, 0, 
	1, 0, 1, 1, 3, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 3, 2, 2, 2, 2, 
	3, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 6, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 4, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 3, 1, 1, 
	2, 2, 2, 2, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	2, 2, 2, 2, 2, 2, 2, 3, 
	2, 2, 2, 2, 2, 6, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 4, 2, 3, 
	2, 2, 2, 2, 4, 2, 2, 2, 
	2, 3, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 4, 
	2, 2, 2, 2, 2, 2, 3, 2, 
	3, 2, 2, 2, 4, 3, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 3, 2, 2, 2, 2, 2, 
	5, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 4, 2, 2, 2, 2, 2, 
	2, 3, 3, 2, 2, 2, 2, 2, 
	2, 2
};

static const char _umodLexer_range_lengths[] = {
	0, 1, 3, 4, 1, 0, 0, 1, 
	1, 2, 4, 3, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 3, 0, 0, 
	4, 0, 0, 0, 0, 1, 1, 1, 
	0, 1, 0, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 0, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3
};

static const short _umodLexer_index_offsets[] = {
	0, 3, 14, 20, 26, 37, 39, 42, 
	46, 48, 58, 64, 70, 81, 86, 88, 
	90, 92, 94, 96, 98, 100, 102, 104, 
	106, 108, 110, 112, 114, 116, 120, 122, 
	124, 126, 128, 130, 132, 134, 179, 182, 
	185, 191, 193, 199, 202, 204, 209, 213, 
	215, 217, 219, 221, 226, 233, 239, 245, 
	251, 257, 263, 269, 275, 282, 288, 294, 
	300, 306, 312, 318, 324, 331, 337, 343, 
	349, 355, 361, 367, 374, 380, 386, 392, 
	398, 405, 411, 417, 423, 429, 435, 441, 
	448, 454, 460, 466, 472, 478, 484, 490, 
	496, 502, 509, 515, 521, 527, 533, 539, 
	545, 551, 561, 567, 573, 579, 585, 592, 
	598, 604, 610, 616, 624, 630, 636, 642, 
	648, 654, 660, 666, 672, 678, 685, 687, 
	692, 698, 704, 710, 716, 723, 729, 735, 
	741, 747, 753, 759, 765, 771, 777, 783, 
	789, 795, 801, 807, 813, 819, 825, 832, 
	838, 844, 850, 856, 862, 868, 874, 880, 
	887, 893, 899, 905, 911, 917, 927, 933, 
	939, 945, 951, 957, 963, 969, 975, 981, 
	987, 993, 999, 1005, 1011, 1017, 1025, 1031, 
	1038, 1044, 1050, 1056, 1062, 1070, 1076, 1082, 
	1088, 1094, 1101, 1107, 1113, 1119, 1125, 1131, 
	1137, 1143, 1149, 1155, 1161, 1167, 1173, 1179, 
	1187, 1193, 1199, 1205, 1211, 1217, 1223, 1230, 
	1236, 1243, 1249, 1255, 1261, 1269, 1276, 1282, 
	1288, 1294, 1300, 1307, 1313, 1319, 1325, 1331, 
	1337, 1343, 1349, 1355, 1361, 1367, 1373, 1379, 
	1385, 1391, 1397, 1404, 1410, 1416, 1422, 1428, 
	1434, 1443, 1449, 1455, 1461, 1467, 1473, 1479, 
	1485, 1491, 1497, 1503, 1509, 1515, 1521, 1527, 
	1533, 1539, 1545, 1551, 1557, 1563, 1569, 1575, 
	1581, 1587, 1593, 1601, 1607, 1613, 1619, 1625, 
	1631, 1637, 1644, 1651, 1657, 1663, 1669, 1675, 
	1681, 1687
};

static const short _umodLexer_indicies[] = {
	2, 3, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 0, 6, 7, 
	5, 5, 5, 4, 7, 5, 5, 5, 
	5, 8, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 4, 11, 10, 11, 
	12, 10, 14, 14, 15, 13, 15, 13, 
	17, 17, 18, 19, 20, 21, 22, 19, 
	19, 16, 24, 23, 23, 23, 23, 4, 
	25, 24, 23, 23, 23, 4, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	4, 27, 27, 28, 29, 26, 30, 26, 
	31, 26, 32, 26, 33, 26, 34, 26, 
	35, 26, 36, 26, 37, 26, 38, 26, 
	39, 26, 40, 26, 41, 26, 42, 26, 
	43, 26, 44, 26, 46, 46, 47, 45, 
	48, 45, 49, 45, 50, 45, 51, 45, 
	52, 45, 53, 45, 54, 45, 56, 57, 
	57, 56, 58, 59, 60, 61, 62, 63, 
	64, 65, 66, 67, 69, 70, 71, 72, 
	73, 75, 76, 77, 74, 78, 79, 80, 
	81, 82, 83, 84, 85, 86, 87, 88, 
	89, 90, 91, 92, 93, 94, 95, 68, 
	74, 74, 55, 56, 56, 96, 2, 3, 
	1, 7, 5, 5, 5, 5, 97, 99, 
	98, 101, 65, 65, 62, 77, 100, 10, 
	103, 102, 104, 103, 106, 107, 107, 68, 
	105, 107, 107, 106, 105, 15, 105, 109, 
	108, 111, 110, 111, 4, 74, 74, 74, 
	74, 4, 74, 112, 113, 74, 74, 74, 
	98, 74, 114, 74, 74, 74, 98, 74, 
	115, 74, 74, 74, 98, 74, 116, 74, 
	74, 74, 98, 74, 117, 74, 74, 74, 
	98, 74, 118, 74, 74, 74, 98, 74, 
	119, 74, 74, 74, 98, 74, 120, 74, 
	74, 74, 98, 74, 121, 122, 74, 74, 
	74, 98, 74, 123, 74, 74, 74, 98, 
	74, 124, 74, 74, 74, 98, 74, 125, 
	74, 74, 74, 98, 74, 126, 74, 74, 
	74, 98, 74, 127, 74, 74, 74, 98, 
	74, 128, 74, 74, 74, 98, 74, 129, 
	74, 74, 74, 98, 74, 130, 131, 74, 
	74, 74, 98, 74, 132, 74, 74, 74, 
	98, 74, 133, 74, 74, 74, 98, 74, 
	134, 74, 74, 74, 98, 74, 135, 74, 
	74, 74, 98, 74, 136, 74, 74, 74, 
	98, 74, 137, 74, 74, 74, 98, 74, 
	138, 139, 74, 74, 74, 98, 74, 140, 
	74, 74, 74, 98, 74, 141, 74, 74, 
	74, 98, 74, 142, 74, 74, 74, 98, 
	74, 143, 74, 74, 74, 98, 74, 144, 
	145, 74, 74, 74, 98, 74, 146, 74, 
	74, 74, 98, 74, 147, 74, 74, 74, 
	98, 74, 148, 74, 74, 74, 98, 74, 
	150, 74, 74, 74, 149, 74, 151, 74, 
	74, 74, 98, 74, 152, 74, 74, 74, 
	98, 74, 153, 154, 74, 74, 74, 98, 
	74, 155, 74, 74, 74, 98, 74, 156, 
	74, 74, 74, 98, 74, 157, 74, 74, 
	74, 98, 74, 158, 74, 74, 74, 98, 
	74, 159, 74, 74, 74, 98, 74, 160, 
	74, 74, 74, 98, 74, 161, 74, 74, 
	74, 98, 74, 162, 74, 74, 74, 98, 
	74, 163, 74, 74, 74, 98, 74, 164, 
	165, 74, 74, 74, 98, 74, 166, 74, 
	74, 74, 98, 74, 167, 74, 74, 74, 
	98, 74, 168, 74, 74, 74, 98, 74, 
	169, 74, 74, 74, 98, 74, 170, 74, 
	74, 74, 98, 74, 171, 74, 74, 74, 
	98, 74, 172, 74, 74, 74, 98, 74, 
	173, 174, 175, 176, 177, 74, 74, 74, 
	98, 74, 178, 74, 74, 74, 98, 74, 
	179, 74, 74, 74, 98, 74, 180, 74, 
	74, 74, 98, 74, 181, 74, 74, 74, 
	98, 74, 183, 184, 74, 74, 74, 182, 
	74, 185, 74, 74, 74, 98, 74, 186, 
	74, 74, 74, 98, 74, 187, 74, 74, 
	74, 98, 74, 188, 74, 74, 74, 98, 
	74, 189, 190, 191, 74, 74, 74, 98, 
	74, 192, 74, 74, 74, 98, 74, 193, 
	74, 74, 74, 98, 74, 194, 74, 74, 
	74, 98, 74, 195, 74, 74, 74, 98, 
	74, 196, 74, 74, 74, 98, 74, 197, 
	74, 74, 74, 98, 74, 198, 74, 74, 
	74, 98, 74, 199, 74, 74, 74, 98, 
	74, 200, 74, 74, 74, 98, 17, 17, 
	74, 74, 74, 74, 201, 18, 202, 19, 
	19, 19, 19, 4, 19, 203, 19, 19, 
	19, 202, 19, 204, 19, 19, 19, 202, 
	19, 205, 19, 19, 19, 202, 19, 206, 
	19, 19, 19, 202, 19, 207, 208, 19, 
	19, 19, 202, 19, 209, 19, 19, 19, 
	202, 19, 210, 19, 19, 19, 202, 19, 
	211, 19, 19, 19, 202, 74, 212, 74, 
	74, 74, 98, 74, 213, 74, 74, 74, 
	98, 74, 214, 74, 74, 74, 98, 74, 
	215, 74, 74, 74, 98, 74, 216, 74, 
	74, 74, 98, 74, 217, 74, 74, 74, 
	98, 74, 218, 74, 74, 74, 98, 74, 
	219, 74, 74, 74, 98, 74, 220, 74, 
	74, 74, 98, 74, 221, 74, 74, 74, 
	98, 74, 222, 74, 74, 74, 98, 74, 
	223, 74, 74, 74, 98, 74, 224, 74, 
	74, 74, 98, 74, 225, 74, 74, 74, 
	98, 74, 226, 227, 74, 74, 74, 98, 
	74, 228, 74, 74, 74, 98, 74, 229, 
	74, 74, 74, 98, 74, 230, 74, 74, 
	74, 98, 74, 231, 74, 74, 74, 98, 
	74, 232, 74, 74, 74, 98, 74, 233, 
	74, 74, 74, 98, 74, 234, 74, 74, 
	74, 98, 74, 235, 74, 74, 74, 98, 
	74, 236, 237, 74, 74, 74, 98, 74, 
	238, 74, 74, 74, 98, 74, 239, 74, 
	74, 74, 98, 74, 240, 74, 74, 74, 
	98, 74, 241, 74, 74, 74, 98, 74, 
	242, 74, 74, 74, 98, 74, 243, 244, 
	245, 246, 247, 74, 74, 74, 98, 74, 
	248, 74, 74, 74, 98, 74, 249, 74, 
	74, 74, 98, 74, 250, 74, 74, 74, 
	98, 74, 251, 74, 74, 74, 98, 74, 
	252, 74, 74, 74, 98, 74, 253, 74, 
	74, 74, 98, 74, 254, 74, 74, 74, 
	98, 74, 255, 74, 74, 74, 98, 74, 
	256, 74, 74, 74, 98, 74, 257, 74, 
	74, 74, 98, 74, 258, 74, 74, 74, 
	98, 74, 259, 74, 74, 74, 98, 74, 
	260, 74, 74, 74, 98, 74, 261, 74, 
	74, 74, 98, 74, 262, 74, 74, 74, 
	98, 74, 263, 264, 265, 74, 74, 74, 
	98, 74, 266, 74, 74, 74, 98, 74, 
	267, 268, 74, 74, 74, 98, 74, 269, 
	74, 74, 74, 98, 74, 270, 74, 74, 
	74, 98, 74, 271, 74, 74, 74, 98, 
	74, 272, 74, 74, 74, 98, 74, 274, 
	275, 276, 74, 74, 74, 273, 74, 277, 
	74, 74, 74, 98, 74, 278, 74, 74, 
	74, 98, 74, 279, 74, 74, 74, 98, 
	74, 280, 74, 74, 74, 98, 27, 27, 
	74, 74, 74, 74, 281, 74, 282, 74, 
	74, 74, 98, 74, 283, 74, 74, 74, 
	98, 74, 284, 74, 74, 74, 98, 74, 
	285, 74, 74, 74, 98, 74, 286, 74, 
	74, 74, 98, 74, 287, 74, 74, 74, 
	98, 74, 288, 74, 74, 74, 98, 74, 
	289, 74, 74, 74, 98, 74, 290, 74, 
	74, 74, 98, 74, 291, 74, 74, 74, 
	98, 74, 292, 74, 74, 74, 98, 74, 
	293, 74, 74, 74, 98, 74, 294, 74, 
	74, 74, 98, 74, 295, 296, 297, 74, 
	74, 74, 98, 74, 298, 74, 74, 74, 
	98, 74, 299, 74, 74, 74, 98, 74, 
	300, 74, 74, 74, 98, 74, 301, 74, 
	74, 74, 98, 74, 302, 74, 74, 74, 
	98, 74, 303, 74, 74, 74, 98, 46, 
	46, 74, 74, 74, 74, 304, 74, 305, 
	74, 74, 74, 98, 74, 306, 307, 74, 
	74, 74, 98, 74, 308, 74, 74, 74, 
	98, 74, 309, 74, 74, 74, 98, 74, 
	310, 74, 74, 74, 98, 74, 311, 312, 
	313, 74, 74, 74, 98, 74, 314, 315, 
	74, 74, 74, 98, 74, 316, 74, 74, 
	74, 98, 74, 317, 74, 74, 74, 98, 
	74, 318, 74, 74, 74, 98, 74, 319, 
	74, 74, 74, 98, 74, 320, 321, 74, 
	74, 74, 98, 74, 322, 74, 74, 74, 
	98, 74, 323, 74, 74, 74, 98, 74, 
	324, 74, 74, 74, 98, 74, 325, 74, 
	74, 74, 98, 74, 326, 74, 74, 74, 
	98, 74, 327, 74, 74, 74, 98, 74, 
	328, 74, 74, 74, 98, 74, 329, 74, 
	74, 74, 98, 74, 330, 74, 74, 74, 
	98, 74, 331, 74, 74, 74, 98, 74, 
	332, 74, 74, 74, 98, 74, 333, 74, 
	74, 74, 98, 74, 334, 74, 74, 74, 
	98, 74, 335, 74, 74, 74, 98, 74, 
	336, 74, 74, 74, 98, 74, 337, 338, 
	74, 74, 74, 98, 74, 339, 74, 74, 
	74, 98, 74, 340, 74, 74, 74, 98, 
	74, 341, 74, 74, 74, 98, 74, 342, 
	74, 74, 74, 98, 74, 343, 74, 74, 
	74, 98, 74, 344, 345, 346, 347, 74, 
	74, 74, 98, 74, 348, 74, 74, 74, 
	98, 74, 349, 74, 74, 74, 98, 74, 
	350, 74, 74, 74, 98, 74, 351, 74, 
	74, 74, 98, 74, 352, 74, 74, 74, 
	98, 74, 353, 74, 74, 74, 98, 74, 
	354, 74, 74, 74, 98, 74, 355, 74, 
	74, 74, 98, 74, 356, 74, 74, 74, 
	98, 74, 357, 74, 74, 74, 98, 74, 
	358, 74, 74, 74, 98, 74, 359, 74, 
	74, 74, 98, 74, 360, 74, 74, 74, 
	98, 74, 361, 74, 74, 74, 98, 74, 
	362, 74, 74, 74, 98, 74, 363, 74, 
	74, 74, 98, 74, 364, 74, 74, 74, 
	98, 74, 365, 74, 74, 74, 98, 74, 
	366, 74, 74, 74, 98, 74, 367, 74, 
	74, 74, 98, 74, 368, 74, 74, 74, 
	98, 74, 369, 74, 74, 74, 98, 74, 
	370, 74, 74, 74, 98, 74, 371, 74, 
	74, 74, 98, 74, 372, 74, 74, 74, 
	98, 74, 373, 374, 375, 74, 74, 74, 
	98, 74, 376, 74, 74, 74, 98, 74, 
	377, 74, 74, 74, 98, 74, 378, 74, 
	74, 74, 98, 74, 379, 74, 74, 74, 
	98, 74, 380, 74, 74, 74, 98, 74, 
	381, 74, 74, 74, 98, 74, 382, 383, 
	74, 74, 74, 98, 74, 384, 385, 74, 
	74, 74, 98, 74, 386, 74, 74, 74, 
	98, 74, 387, 74, 74, 74, 98, 74, 
	388, 74, 74, 74, 98, 74, 389, 74, 
	74, 74, 98, 74, 390, 74, 74, 74, 
	98, 74, 391, 74, 74, 74, 98, 74, 
	392, 74, 74, 74, 98, 0
};

static const short _umodLexer_trans_targs[] = {
	37, 0, 37, 1, 37, 2, 41, 4, 
	37, 37, 5, 6, 37, 37, 8, 47, 
	37, 9, 10, 127, 128, 130, 131, 11, 
	12, 126, 37, 13, 14, 22, 15, 16, 
	17, 18, 19, 20, 21, 37, 23, 24, 
	25, 26, 27, 28, 37, 37, 29, 30, 
	31, 32, 33, 34, 35, 36, 37, 37, 
	38, 37, 39, 40, 37, 37, 37, 37, 
	37, 37, 42, 43, 45, 48, 37, 49, 
	50, 50, 51, 37, 37, 37, 52, 68, 
	75, 97, 105, 165, 181, 198, 201, 205, 
	207, 220, 247, 269, 274, 281, 37, 37, 
	37, 37, 37, 3, 37, 37, 37, 44, 
	37, 37, 46, 7, 37, 37, 37, 37, 
	53, 60, 54, 55, 56, 57, 58, 59, 
	51, 51, 61, 62, 63, 64, 65, 66, 
	67, 51, 69, 72, 70, 71, 51, 73, 
	74, 51, 76, 79, 77, 78, 51, 80, 
	81, 86, 82, 83, 84, 37, 85, 51, 
	87, 88, 90, 89, 51, 91, 92, 93, 
	94, 95, 96, 51, 98, 99, 51, 100, 
	101, 102, 103, 104, 51, 106, 108, 115, 
	144, 150, 107, 51, 109, 110, 37, 111, 
	112, 51, 113, 114, 51, 116, 125, 136, 
	117, 118, 119, 120, 121, 122, 123, 124, 
	51, 37, 37, 129, 127, 127, 132, 133, 
	134, 127, 135, 127, 137, 138, 139, 140, 
	141, 142, 143, 51, 145, 146, 147, 148, 
	149, 51, 151, 158, 152, 153, 154, 155, 
	156, 157, 51, 159, 160, 162, 161, 51, 
	163, 164, 51, 166, 169, 172, 174, 175, 
	167, 168, 51, 170, 171, 51, 173, 51, 
	51, 176, 177, 178, 179, 180, 51, 51, 
	182, 188, 183, 184, 186, 185, 51, 187, 
	51, 37, 189, 194, 196, 190, 191, 192, 
	193, 37, 195, 51, 197, 51, 199, 200, 
	51, 202, 203, 204, 51, 206, 51, 208, 
	51, 215, 209, 210, 211, 212, 213, 214, 
	37, 216, 217, 218, 51, 219, 51, 221, 
	235, 242, 222, 226, 223, 224, 225, 51, 
	227, 232, 228, 229, 230, 231, 51, 233, 
	234, 51, 236, 237, 238, 239, 240, 241, 
	51, 243, 246, 244, 245, 51, 51, 248, 
	249, 252, 258, 266, 250, 251, 51, 253, 
	254, 255, 256, 257, 51, 259, 260, 261, 
	262, 263, 264, 265, 51, 267, 268, 51, 
	270, 271, 272, 273, 51, 275, 277, 279, 
	276, 51, 278, 51, 280, 51, 282, 286, 
	283, 284, 51, 285, 51, 287, 288, 289, 
	51
};

static const short _umodLexer_trans_actions[] = {
	95, 0, 13, 0, 97, 0, 276, 0, 
	89, 93, 0, 0, 47, 91, 0, 0, 
	83, 0, 0, 111, 0, 0, 0, 0, 
	0, 111, 85, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 9, 0, 0, 
	0, 0, 0, 0, 7, 87, 0, 0, 
	0, 0, 0, 0, 0, 0, 11, 49, 
	0, 45, 5, 285, 31, 33, 23, 43, 
	27, 21, 0, 5, 5, 0, 29, 0, 
	282, 279, 276, 39, 41, 25, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 35, 37, 
	77, 81, 65, 0, 73, 15, 71, 0, 
	79, 67, 5, 0, 75, 17, 69, 19, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	114, 117, 0, 0, 0, 0, 0, 0, 
	0, 120, 0, 0, 0, 0, 123, 0, 
	0, 126, 0, 0, 0, 0, 129, 0, 
	0, 0, 0, 0, 0, 53, 0, 132, 
	0, 0, 0, 0, 135, 0, 0, 0, 
	0, 0, 0, 138, 0, 0, 141, 0, 
	0, 0, 0, 0, 144, 0, 0, 0, 
	0, 0, 0, 147, 0, 0, 55, 0, 
	0, 150, 0, 0, 153, 0, 159, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	156, 57, 51, 0, 102, 99, 0, 0, 
	0, 105, 0, 108, 0, 0, 0, 0, 
	0, 0, 0, 162, 0, 0, 0, 0, 
	0, 165, 0, 0, 0, 0, 0, 0, 
	0, 0, 168, 0, 0, 0, 0, 171, 
	0, 0, 174, 0, 0, 0, 0, 0, 
	0, 0, 177, 0, 0, 180, 0, 183, 
	186, 0, 0, 0, 0, 0, 189, 192, 
	0, 0, 0, 0, 0, 0, 195, 0, 
	198, 59, 0, 0, 0, 0, 0, 0, 
	5, 61, 0, 201, 0, 204, 0, 0, 
	207, 0, 0, 0, 210, 0, 213, 0, 
	216, 0, 0, 0, 0, 0, 0, 5, 
	63, 0, 0, 0, 219, 0, 222, 0, 
	0, 0, 0, 0, 0, 0, 0, 225, 
	0, 0, 0, 0, 0, 0, 228, 0, 
	0, 231, 0, 0, 0, 0, 0, 0, 
	234, 0, 0, 0, 0, 237, 240, 0, 
	0, 0, 0, 0, 0, 0, 243, 0, 
	0, 0, 0, 0, 246, 0, 0, 0, 
	0, 0, 0, 0, 249, 0, 0, 252, 
	0, 0, 0, 0, 255, 0, 0, 0, 
	0, 258, 0, 261, 0, 264, 0, 0, 
	0, 0, 267, 0, 270, 0, 0, 0, 
	273
};

static const short _umodLexer_to_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0
};

static const short _umodLexer_from_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 3, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0
};

static const short _umodLexer_eof_trans[] = {
	1, 1, 5, 9, 5, 10, 10, 14, 
	14, 17, 5, 5, 5, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 46, 46, 46, 
	46, 46, 46, 46, 46, 0, 97, 98, 
	98, 99, 101, 103, 105, 106, 106, 106, 
	109, 111, 5, 5, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 150, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 183, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 202, 203, 5, 
	203, 203, 203, 203, 203, 203, 203, 203, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 274, 99, 99, 99, 
	99, 282, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 305, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99, 99, 99, 99, 99, 99, 99, 
	99, 99
};

static const int umodLexer_start = 37;
static const int umodLexer_first_final = 37;
static const int umodLexer_error = -1;

static const int umodLexer_en_main = 37;


#line 13 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"

// no idea about the origins of this value, ask Flori ;)
int EVIL=0x666;

using namespace umod::lex;

Lexer::Lexer(const char *source, unsigned int length)
    : m_source(source)
    , m_source_end(source + length)
    , m_source_eof(m_source_end)
    , m_ts(nullptr), m_te(nullptr)
    , m_current_state(EVIL), m_act(0)
    , m_position(std::make_pair(1, 1))
{

}

Lexer::Lexer(const std::string &source): Lexer(source.c_str(), source.length())
{

}

Lexer::~Lexer()
{

}

Lexeme *Lexer::consume(void)
{
    
#line 177 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"


    Lexeme::Type type;

    if (m_source == m_source_end)
    {
        m_ts = m_te = m_source;
        type = Lexeme::Type::EOI;
    }
    else
    {
        
#line 189 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
        
#line 190 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
        
#line 191 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
        
#line 192 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
        
#line 193 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
        
#line 194 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
        
#line 195 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"

        
#line 997 "lexer.cc"
	{
	(  m_current_state) = umodLexer_start;
	(  m_ts) = 0;
	(  m_te) = 0;
	( m_act) = 0;
	}

#line 197 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
        
#line 1007 "lexer.cc"
	{
	int _klen;
	unsigned int _trans;
	const char *_acts;
	unsigned int _nacts;
	const char *_keys;

	if ( (   m_source) == (  m_source_end) )
		goto _test_eof;
_resume:
	_acts = _umodLexer_actions + _umodLexer_from_state_actions[(  m_current_state)];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 1:
#line 1 "NONE"
	{(  m_ts) = (   m_source);}
	break;
#line 1026 "lexer.cc"
		}
	}

	_keys = _umodLexer_trans_keys + _umodLexer_key_offsets[(  m_current_state)];
	_trans = _umodLexer_index_offsets[(  m_current_state)];

	_klen = _umodLexer_single_lengths[(  m_current_state)];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( (*(   m_source)) < *_mid )
				_upper = _mid - 1;
			else if ( (*(   m_source)) > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (unsigned int)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _umodLexer_range_lengths[(  m_current_state)];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( (*(   m_source)) < _mid[0] )
				_upper = _mid - 2;
			else if ( (*(   m_source)) > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += (unsigned int)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	_trans = _umodLexer_indicies[_trans];
_eof_trans:
	(  m_current_state) = _umodLexer_trans_targs[_trans];

	if ( _umodLexer_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _umodLexer_actions + _umodLexer_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 2:
#line 1 "NONE"
	{(  m_te) = (   m_source)+1;}
	break;
	case 3:
#line 77 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 1;}
	break;
	case 4:
#line 78 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 2;}
	break;
	case 5:
#line 79 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 3;}
	break;
	case 6:
#line 80 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 4;}
	break;
	case 7:
#line 84 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 8;}
	break;
	case 8:
#line 86 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 9;}
	break;
	case 9:
#line 87 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 10;}
	break;
	case 10:
#line 88 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 11;}
	break;
	case 11:
#line 89 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 12;}
	break;
	case 12:
#line 90 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 13;}
	break;
	case 13:
#line 91 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 14;}
	break;
	case 14:
#line 92 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 15;}
	break;
	case 15:
#line 94 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 17;}
	break;
	case 16:
#line 95 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 18;}
	break;
	case 17:
#line 96 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 19;}
	break;
	case 18:
#line 97 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 20;}
	break;
	case 19:
#line 98 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 21;}
	break;
	case 20:
#line 100 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 23;}
	break;
	case 21:
#line 101 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 24;}
	break;
	case 22:
#line 102 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 25;}
	break;
	case 23:
#line 103 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 26;}
	break;
	case 24:
#line 104 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 27;}
	break;
	case 25:
#line 105 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 28;}
	break;
	case 26:
#line 106 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 29;}
	break;
	case 27:
#line 107 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 30;}
	break;
	case 28:
#line 108 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 31;}
	break;
	case 29:
#line 109 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 32;}
	break;
	case 30:
#line 110 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 33;}
	break;
	case 31:
#line 111 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 34;}
	break;
	case 32:
#line 112 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 35;}
	break;
	case 33:
#line 113 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 36;}
	break;
	case 34:
#line 114 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 37;}
	break;
	case 35:
#line 115 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 38;}
	break;
	case 36:
#line 116 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 39;}
	break;
	case 37:
#line 119 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 42;}
	break;
	case 38:
#line 120 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 43;}
	break;
	case 39:
#line 121 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 44;}
	break;
	case 40:
#line 122 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 45;}
	break;
	case 41:
#line 123 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 46;}
	break;
	case 42:
#line 125 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 48;}
	break;
	case 43:
#line 126 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 49;}
	break;
	case 44:
#line 127 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 50;}
	break;
	case 45:
#line 128 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 51;}
	break;
	case 46:
#line 129 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 52;}
	break;
	case 47:
#line 130 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 53;}
	break;
	case 48:
#line 131 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 54;}
	break;
	case 49:
#line 132 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 55;}
	break;
	case 50:
#line 133 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 56;}
	break;
	case 51:
#line 134 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 57;}
	break;
	case 52:
#line 135 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 58;}
	break;
	case 53:
#line 136 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 59;}
	break;
	case 54:
#line 137 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 60;}
	break;
	case 55:
#line 138 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 61;}
	break;
	case 56:
#line 139 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 62;}
	break;
	case 57:
#line 140 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 63;}
	break;
	case 58:
#line 141 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 64;}
	break;
	case 59:
#line 142 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 65;}
	break;
	case 60:
#line 143 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 66;}
	break;
	case 61:
#line 144 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 67;}
	break;
	case 62:
#line 147 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 68;}
	break;
	case 63:
#line 153 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 73;}
	break;
	case 64:
#line 168 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 87;}
	break;
	case 65:
#line 175 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{( m_act) = 92;}
	break;
	case 66:
#line 81 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::INITIAL_EQUATION; {(   m_source)++; goto _out; } }}
	break;
	case 67:
#line 82 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::INITIAL_ALGORITHM; {(   m_source)++; goto _out; } }}
	break;
	case 68:
#line 83 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::OPERATOR_FUNCTION; {(   m_source)++; goto _out; } }}
	break;
	case 69:
#line 148 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::STRING; {(   m_source)++; goto _out; } }}
	break;
	case 70:
#line 151 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::DOT_STAR; {(   m_source)++; goto _out; }}}
	break;
	case 71:
#line 152 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::ASSIGN_OP; {(   m_source)++; goto _out; }}}
	break;
	case 72:
#line 153 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::REL_OP; {(   m_source)++; goto _out; }}}
	break;
	case 73:
#line 154 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::ADD_OP_PARTIAL; {(   m_source)++; goto _out; }}}
	break;
	case 74:
#line 155 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::MUL_OP_PARTIAL; {(   m_source)++; goto _out; }}}
	break;
	case 75:
#line 156 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::EXP_OP; {(   m_source)++; goto _out; }}}
	break;
	case 76:
#line 159 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::COMMA; {(   m_source)++; goto _out; }}}
	break;
	case 77:
#line 160 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::SEMICOLON; {(   m_source)++; goto _out; }}}
	break;
	case 78:
#line 162 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::OPAREN; {(   m_source)++; goto _out; }}}
	break;
	case 79:
#line 163 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::CPAREN; {(   m_source)++; goto _out; }}}
	break;
	case 80:
#line 164 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::OBRACE; {(   m_source)++; goto _out; }}}
	break;
	case 81:
#line 165 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::CBRACE; {(   m_source)++; goto _out; }}}
	break;
	case 82:
#line 166 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::OBRACKET; {(   m_source)++; goto _out; }}}
	break;
	case 83:
#line 167 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::CBRACKET; {(   m_source)++; goto _out; }}}
	break;
	case 84:
#line 169 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::PLUS; {(   m_source)++; goto _out; }}}
	break;
	case 85:
#line 172 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::NEWLINE; {(   m_source)++; goto _out; } }}
	break;
	case 86:
#line 174 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ {(   m_source)++; goto _out; } }}
	break;
	case 87:
#line 175 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ {(   m_source)++; goto _out; } }}
	break;
	case 88:
#line 84 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::END_IDENT; {(   m_source)++; goto _out; } }}
	break;
	case 89:
#line 93 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::CONNECT; {(   m_source)++; goto _out; }}}
	break;
	case 90:
#line 99 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::ELSE; {(   m_source)++; goto _out; }}}
	break;
	case 91:
#line 103 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::END; {(   m_source)++; goto _out; }}}
	break;
	case 92:
#line 117 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::IN; {(   m_source)++; goto _out; }}}
	break;
	case 93:
#line 118 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::INITIAL; {(   m_source)++; goto _out; }}}
	break;
	case 94:
#line 124 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::OPERATOR; {(   m_source)++; goto _out; }}}
	break;
	case 95:
#line 147 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::IDENT; {(   m_source)++; goto _out; } }}
	break;
	case 96:
#line 149 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::UNSIGNED_NUMBER; {(   m_source)++; goto _out; } }}
	break;
	case 97:
#line 153 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::REL_OP; {(   m_source)++; goto _out; }}}
	break;
	case 98:
#line 155 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::MUL_OP_PARTIAL; {(   m_source)++; goto _out; }}}
	break;
	case 99:
#line 158 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::DOT; {(   m_source)++; goto _out; }}}
	break;
	case 100:
#line 161 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::COLON; {(   m_source)++; goto _out; }}}
	break;
	case 101:
#line 173 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::SPACES; {(   m_source)++; goto _out; } }}
	break;
	case 102:
#line 174 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ {(   m_source)++; goto _out; } }}
	break;
	case 103:
#line 175 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ {(   m_source)++; goto _out; } }}
	break;
	case 104:
#line 103 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{{(   m_source) = (((  m_te)))-1;}{ type = Lexeme::Type::END; {(   m_source)++; goto _out; }}}
	break;
	case 105:
#line 118 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{{(   m_source) = (((  m_te)))-1;}{ type = Lexeme::Type::INITIAL; {(   m_source)++; goto _out; }}}
	break;
	case 106:
#line 124 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{{(   m_source) = (((  m_te)))-1;}{ type = Lexeme::Type::OPERATOR; {(   m_source)++; goto _out; }}}
	break;
	case 107:
#line 147 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{{(   m_source) = (((  m_te)))-1;}{ type = Lexeme::Type::IDENT; {(   m_source)++; goto _out; } }}
	break;
	case 108:
#line 149 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{{(   m_source) = (((  m_te)))-1;}{ type = Lexeme::Type::UNSIGNED_NUMBER; {(   m_source)++; goto _out; } }}
	break;
	case 109:
#line 155 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{{(   m_source) = (((  m_te)))-1;}{ type = Lexeme::Type::MUL_OP_PARTIAL; {(   m_source)++; goto _out; }}}
	break;
	case 110:
#line 175 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
	{{(   m_source) = (((  m_te)))-1;}{ {(   m_source)++; goto _out; } }}
	break;
	case 111:
#line 1 "NONE"
	{	switch( ( m_act) ) {
	case 1:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::END_IF; {(   m_source)++; goto _out; } }
	break;
	case 2:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::END_FOR; {(   m_source)++; goto _out; } }
	break;
	case 3:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::END_WHEN; {(   m_source)++; goto _out; } }
	break;
	case 4:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::END_WHILE; {(   m_source)++; goto _out; } }
	break;
	case 8:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::END_IDENT; {(   m_source)++; goto _out; } }
	break;
	case 9:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::ALGORITHM; {(   m_source)++; goto _out; }}
	break;
	case 10:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::AND; {(   m_source)++; goto _out; }}
	break;
	case 11:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::ANNOTATION; {(   m_source)++; goto _out; }}
	break;
	case 12:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::BLOCK; {(   m_source)++; goto _out; }}
	break;
	case 13:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::BREAK; {(   m_source)++; goto _out; }}
	break;
	case 14:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::CLASS; {(   m_source)++; goto _out; }}
	break;
	case 15:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::CONNECTOR; {(   m_source)++; goto _out; }}
	break;
	case 17:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::CONSTANT; {(   m_source)++; goto _out; }}
	break;
	case 18:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::CONSTRAINEDBY; {(   m_source)++; goto _out; }}
	break;
	case 19:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::DER; {(   m_source)++; goto _out; }}
	break;
	case 20:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::DISCRETE; {(   m_source)++; goto _out; }}
	break;
	case 21:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::EACH; {(   m_source)++; goto _out; }}
	break;
	case 23:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::ELSEIF; {(   m_source)++; goto _out; }}
	break;
	case 24:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::ELSEWHEN; {(   m_source)++; goto _out; }}
	break;
	case 25:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::ENCAPSULATED; {(   m_source)++; goto _out; }}
	break;
	case 26:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::END; {(   m_source)++; goto _out; }}
	break;
	case 27:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::ENUMERATION; {(   m_source)++; goto _out; }}
	break;
	case 28:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::EQUATION; {(   m_source)++; goto _out; }}
	break;
	case 29:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::EXPANDABLE; {(   m_source)++; goto _out; }}
	break;
	case 30:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::EXTENDS; {(   m_source)++; goto _out; }}
	break;
	case 31:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::EXTERNAL; {(   m_source)++; goto _out; }}
	break;
	case 32:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::FALSE; {(   m_source)++; goto _out; }}
	break;
	case 33:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::FINAL; {(   m_source)++; goto _out; }}
	break;
	case 34:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::FLOW; {(   m_source)++; goto _out; }}
	break;
	case 35:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::FOR; {(   m_source)++; goto _out; }}
	break;
	case 36:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::FUNCTION; {(   m_source)++; goto _out; }}
	break;
	case 37:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::IF; {(   m_source)++; goto _out; }}
	break;
	case 38:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::IMPORT; {(   m_source)++; goto _out; }}
	break;
	case 39:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::IMPURE; {(   m_source)++; goto _out; }}
	break;
	case 42:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::INNER; {(   m_source)++; goto _out; }}
	break;
	case 43:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::INPUT; {(   m_source)++; goto _out; }}
	break;
	case 44:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::LOOP; {(   m_source)++; goto _out; }}
	break;
	case 45:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::MODEL; {(   m_source)++; goto _out; }}
	break;
	case 46:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::NOT; {(   m_source)++; goto _out; }}
	break;
	case 48:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::OR; {(   m_source)++; goto _out; }}
	break;
	case 49:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::OUTER; {(   m_source)++; goto _out; }}
	break;
	case 50:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::OUTPUT; {(   m_source)++; goto _out; }}
	break;
	case 51:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::PACKAGE; {(   m_source)++; goto _out; }}
	break;
	case 52:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::PARAMETER; {(   m_source)++; goto _out; }}
	break;
	case 53:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::PARTIAL; {(   m_source)++; goto _out; }}
	break;
	case 54:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::PROTECTED; {(   m_source)++; goto _out; }}
	break;
	case 55:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::PUBLIC; {(   m_source)++; goto _out; }}
	break;
	case 56:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::PURE; {(   m_source)++; goto _out; }}
	break;
	case 57:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::RECORD; {(   m_source)++; goto _out; }}
	break;
	case 58:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::REDECLARE; {(   m_source)++; goto _out; }}
	break;
	case 59:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::REPLACEABLE; {(   m_source)++; goto _out; }}
	break;
	case 60:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::RETURN; {(   m_source)++; goto _out; }}
	break;
	case 61:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::STREAM; {(   m_source)++; goto _out; }}
	break;
	case 62:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::THEN; {(   m_source)++; goto _out; }}
	break;
	case 63:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::TRUE; {(   m_source)++; goto _out; }}
	break;
	case 64:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::TYPE; {(   m_source)++; goto _out; }}
	break;
	case 65:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::WHEN; {(   m_source)++; goto _out; }}
	break;
	case 66:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::WHILE; {(   m_source)++; goto _out; }}
	break;
	case 67:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::WITHIN; {(   m_source)++; goto _out; }}
	break;
	case 68:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::IDENT; {(   m_source)++; goto _out; } }
	break;
	case 73:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::REL_OP; {(   m_source)++; goto _out; }}
	break;
	case 87:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::EQUAL; {(   m_source)++; goto _out; }}
	break;
	case 92:
	{{(   m_source) = (((  m_te)))-1;} {(   m_source)++; goto _out; } }
	break;
	}
	}
	break;
#line 1723 "lexer.cc"
		}
	}

_again:
	_acts = _umodLexer_actions + _umodLexer_to_state_actions[(  m_current_state)];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 0:
#line 1 "NONE"
	{(  m_ts) = 0;}
	break;
#line 1736 "lexer.cc"
		}
	}

	if ( ++(   m_source) != (  m_source_end) )
		goto _resume;
	_test_eof: {}
	if ( (   m_source) == ( m_source_eof) )
	{
	if ( _umodLexer_eof_trans[(  m_current_state)] > 0 ) {
		_trans = _umodLexer_eof_trans[(  m_current_state)] - 1;
		goto _eof_trans;
	}
	}

	_out: {}
	}

#line 198 "/Users/phryne/Desktop/mojito/src/parse/lex/lexer.rl"
    }

    unsigned int size = m_te - m_ts;
    Lexeme::pos_t position = m_position;

    if (type == Lexeme::Type::NEWLINE)
    {
        m_position.first += 1;
        m_position.second = size;
    }
    else
    {
        m_position.second += size;
    }

    return new Lexeme(type, std::string(m_ts, size), position);
}
