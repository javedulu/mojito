
#line 1 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
#include <stddef.h>
#include <string>
#include <utility>
#include "lexer.h"
#include "lexeme.h"

// NOTE : if the lemon-parser is properly done then all the #define in lemon-parser.h should be equal
//        to total no of tokens
//        lemon-parser.h is generated by lemon based on whats used in parser , so if all the cases are
//              considered then there should be no token not # defined failsafe

#line 12 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"

#line 17 "lexer.cc"
static const char _umodLexer_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	67, 1, 68, 1, 69, 1, 70, 1, 
	71, 1, 72, 1, 73, 1, 74, 1, 
	75, 1, 76, 1, 77, 1, 78, 1, 
	79, 1, 80, 1, 81, 1, 82, 1, 
	83, 1, 84, 1, 85, 1, 86, 1, 
	87, 1, 88, 1, 89, 1, 90, 1, 
	91, 1, 92, 1, 93, 1, 94, 1, 
	95, 1, 96, 1, 97, 1, 98, 1, 
	99, 1, 100, 1, 101, 1, 102, 1, 
	103, 1, 104, 1, 105, 1, 106, 1, 
	107, 1, 108, 1, 109, 1, 110, 1, 
	111, 2, 2, 3, 2, 2, 4, 2, 
	2, 5, 2, 2, 6, 2, 2, 7, 
	2, 2, 8, 2, 2, 9, 2, 2, 
	10, 2, 2, 11, 2, 2, 12, 2, 
	2, 13, 2, 2, 14, 2, 2, 15, 
	2, 2, 16, 2, 2, 17, 2, 2, 
	18, 2, 2, 19, 2, 2, 20, 2, 
	2, 21, 2, 2, 22, 2, 2, 23, 
	2, 2, 24, 2, 2, 25, 2, 2, 
	26, 2, 2, 27, 2, 2, 28, 2, 
	2, 29, 2, 2, 30, 2, 2, 31, 
	2, 2, 32, 2, 2, 33, 2, 2, 
	34, 2, 2, 35, 2, 2, 36, 2, 
	2, 37, 2, 2, 38, 2, 2, 39, 
	2, 2, 40, 2, 2, 41, 2, 2, 
	42, 2, 2, 43, 2, 2, 44, 2, 
	2, 45, 2, 2, 46, 2, 2, 47, 
	2, 2, 48, 2, 2, 49, 2, 2, 
	50, 2, 2, 51, 2, 2, 52, 2, 
	2, 53, 2, 2, 54, 2, 2, 55, 
	2, 2, 56, 2, 2, 57, 2, 2, 
	58, 2, 2, 59, 2, 2, 60, 2, 
	2, 61, 2, 2, 62, 2, 2, 63, 
	2, 2, 64, 2, 2, 65, 2, 2, 
	66
};

static const short _umodLexer_key_offsets[] = {
	0, 2, 4, 6, 8, 10, 14, 16, 
	17, 19, 69, 71, 73, 81, 83, 84, 
	89, 93, 95, 98, 103, 105, 108, 109, 
	114, 116, 117, 118, 129, 138, 147, 156, 
	165, 174, 183, 192, 202, 211, 220, 229, 
	238, 247, 256, 265, 274, 283, 292, 301, 
	311, 320, 329, 338, 347, 356, 365, 375, 
	384, 393, 402, 411, 421, 430, 439, 448, 
	457, 466, 475, 485, 494, 503, 512, 521, 
	530, 539, 548, 557, 566, 576, 585, 594, 
	603, 612, 621, 630, 639, 652, 661, 670, 
	679, 688, 698, 707, 716, 725, 734, 745, 
	754, 763, 772, 781, 790, 799, 808, 817, 
	826, 835, 844, 853, 862, 871, 880, 889, 
	898, 907, 916, 925, 934, 943, 952, 962, 
	971, 980, 989, 998, 1007, 1016, 1025, 1034, 
	1044, 1053, 1062, 1071, 1080, 1089, 1102, 1111, 
	1120, 1129, 1138, 1147, 1156, 1165, 1174, 1183, 
	1192, 1201, 1210, 1219, 1228, 1237, 1248, 1257, 
	1267, 1276, 1285, 1294, 1303, 1314, 1323, 1332, 
	1341, 1350, 1359, 1368, 1377, 1386, 1395, 1404, 
	1413, 1422, 1431, 1440, 1449, 1458, 1467, 1478, 
	1487, 1496, 1505, 1514, 1523, 1532, 1541, 1551, 
	1560, 1569, 1578, 1589, 1599, 1608, 1617, 1626, 
	1635, 1645, 1654, 1663, 1672, 1681, 1690, 1699, 
	1708, 1717, 1726, 1735, 1744, 1753, 1762, 1771, 
	1780, 1790, 1799, 1808, 1817, 1826, 1835, 1847, 
	1856, 1865, 1874, 1883, 1892, 1901, 1910, 1919, 
	1928, 1937, 1946, 1955, 1964, 1973, 1982, 1991, 
	2000, 2009, 2018, 2027, 2036, 2045, 2054, 2063, 
	2072, 2083, 2092, 2101, 2110, 2119, 2128, 2137, 
	2147, 2157, 2166, 2175, 2184, 2193, 2202, 2211
};

static const char _umodLexer_trans_keys[] = {
	34, 92, 34, 92, 39, 92, 39, 92, 
	48, 57, 43, 45, 48, 57, 48, 57, 
	42, 42, 47, 9, 10, 32, 33, 34, 
	36, 39, 40, 41, 42, 43, 44, 45, 
	46, 47, 58, 59, 60, 61, 62, 63, 
	91, 93, 94, 95, 97, 98, 99, 100, 
	101, 102, 105, 108, 109, 110, 111, 112, 
	114, 115, 116, 119, 123, 125, 126, 48, 
	57, 65, 90, 103, 122, 9, 32, 34, 
	92, 36, 95, 48, 57, 65, 90, 97, 
	122, 39, 92, 61, 43, 46, 61, 48, 
	57, 69, 101, 48, 57, 48, 57, 46, 
	48, 57, 45, 46, 61, 48, 57, 48, 
	57, 42, 47, 61, 10, 46, 69, 101, 
	48, 57, 61, 62, 61, 61, 36, 95, 
	108, 110, 115, 48, 57, 65, 90, 97, 
	122, 36, 95, 103, 48, 57, 65, 90, 
	97, 122, 36, 95, 111, 48, 57, 65, 
	90, 97, 122, 36, 95, 114, 48, 57, 
	65, 90, 97, 122, 36, 95, 105, 48, 
	57, 65, 90, 97, 122, 36, 95, 116, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	104, 48, 57, 65, 90, 97, 122, 36, 
	95, 109, 48, 57, 65, 90, 97, 122, 
	36, 95, 100, 110, 48, 57, 65, 90, 
	97, 122, 36, 95, 111, 48, 57, 65, 
	90, 97, 122, 36, 95, 116, 48, 57, 
	65, 90, 97, 122, 36, 95, 97, 48, 
	57, 65, 90, 98, 122, 36, 95, 116, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	105, 48, 57, 65, 90, 97, 122, 36, 
	95, 111, 48, 57, 65, 90, 97, 122, 
	36, 95, 110, 48, 57, 65, 90, 97, 
	122, 36, 95, 115, 48, 57, 65, 90, 
	97, 122, 36, 95, 101, 48, 57, 65, 
	90, 97, 122, 36, 95, 114, 48, 57, 
	65, 90, 97, 122, 36, 95, 116, 48, 
	57, 65, 90, 97, 122, 36, 95, 108, 
	114, 48, 57, 65, 90, 97, 122, 36, 
	95, 111, 48, 57, 65, 90, 97, 122, 
	36, 95, 99, 48, 57, 65, 90, 97, 
	122, 36, 95, 107, 48, 57, 65, 90, 
	97, 122, 36, 95, 101, 48, 57, 65, 
	90, 97, 122, 36, 95, 97, 48, 57, 
	65, 90, 98, 122, 36, 95, 107, 48, 
	57, 65, 90, 97, 122, 36, 95, 108, 
	111, 48, 57, 65, 90, 97, 122, 36, 
	95, 97, 48, 57, 65, 90, 98, 122, 
	36, 95, 115, 48, 57, 65, 90, 97, 
	122, 36, 95, 115, 48, 57, 65, 90, 
	97, 122, 36, 95, 110, 48, 57, 65, 
	90, 97, 122, 36, 95, 110, 115, 48, 
	57, 65, 90, 97, 122, 36, 95, 101, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	99, 48, 57, 65, 90, 97, 122, 36, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	36, 95, 111, 48, 57, 65, 90, 97, 
	122, 36, 95, 114, 48, 57, 65, 90, 
	97, 122, 36, 95, 116, 48, 57, 65, 
	90, 97, 122, 36, 95, 97, 114, 48, 
	57, 65, 90, 98, 122, 36, 95, 110, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	116, 48, 57, 65, 90, 97, 122, 36, 
	95, 97, 48, 57, 65, 90, 98, 122, 
	36, 95, 105, 48, 57, 65, 90, 97, 
	122, 36, 95, 110, 48, 57, 65, 90, 
	97, 122, 36, 95, 101, 48, 57, 65, 
	90, 97, 122, 36, 95, 100, 48, 57, 
	65, 90, 97, 122, 36, 95, 98, 48, 
	57, 65, 90, 97, 122, 36, 95, 121, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	101, 105, 48, 57, 65, 90, 97, 122, 
	36, 95, 114, 48, 57, 65, 90, 97, 
	122, 36, 95, 115, 48, 57, 65, 90, 
	97, 122, 36, 95, 99, 48, 57, 65, 
	90, 97, 122, 36, 95, 114, 48, 57, 
	65, 90, 97, 122, 36, 95, 101, 48, 
	57, 65, 90, 97, 122, 36, 95, 116, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	101, 48, 57, 65, 90, 97, 122, 36, 
	95, 97, 108, 110, 113, 120, 48, 57, 
	65, 90, 98, 122, 36, 95, 99, 48, 
	57, 65, 90, 97, 122, 36, 95, 104, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	115, 48, 57, 65, 90, 97, 122, 36, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	36, 95, 105, 119, 48, 57, 65, 90, 
	97, 122, 36, 95, 102, 48, 57, 65, 
	90, 97, 122, 36, 95, 104, 48, 57, 
	65, 90, 97, 122, 36, 95, 101, 48, 
	57, 65, 90, 97, 122, 36, 95, 110, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	99, 100, 117, 48, 57, 65, 90, 97, 
	122, 36, 95, 97, 48, 57, 65, 90, 
	98, 122, 36, 95, 112, 48, 57, 65, 
	90, 97, 122, 36, 95, 115, 48, 57, 
	65, 90, 97, 122, 36, 95, 117, 48, 
	57, 65, 90, 97, 122, 36, 95, 108, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	97, 48, 57, 65, 90, 98, 122, 36, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	36, 95, 101, 48, 57, 65, 90, 97, 
	122, 36, 95, 100, 48, 57, 65, 90, 
	97, 122, 36, 95, 109, 48, 57, 65, 
	90, 97, 122, 36, 95, 101, 48, 57, 
	65, 90, 97, 122, 36, 95, 114, 48, 
	57, 65, 90, 97, 122, 36, 95, 97, 
	48, 57, 65, 90, 98, 122, 36, 95, 
	116, 48, 57, 65, 90, 97, 122, 36, 
	95, 105, 48, 57, 65, 90, 97, 122, 
	36, 95, 111, 48, 57, 65, 90, 97, 
	122, 36, 95, 110, 48, 57, 65, 90, 
	97, 122, 36, 95, 117, 48, 57, 65, 
	90, 97, 122, 36, 95, 97, 48, 57, 
	65, 90, 98, 122, 36, 95, 116, 48, 
	57, 65, 90, 97, 122, 36, 95, 105, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	111, 48, 57, 65, 90, 97, 122, 36, 
	95, 110, 48, 57, 65, 90, 97, 122, 
	36, 95, 112, 116, 48, 57, 65, 90, 
	97, 122, 36, 95, 97, 48, 57, 65, 
	90, 98, 122, 36, 95, 110, 48, 57, 
	65, 90, 97, 122, 36, 95, 100, 48, 
	57, 65, 90, 97, 122, 36, 95, 97, 
	48, 57, 65, 90, 98, 122, 36, 95, 
	98, 48, 57, 65, 90, 97, 122, 36, 
	95, 108, 48, 57, 65, 90, 97, 122, 
	36, 95, 101, 48, 57, 65, 90, 97, 
	122, 36, 95, 101, 48, 57, 65, 90, 
	97, 122, 36, 95, 110, 114, 48, 57, 
	65, 90, 97, 122, 36, 95, 100, 48, 
	57, 65, 90, 97, 122, 36, 95, 115, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	110, 48, 57, 65, 90, 97, 122, 36, 
	95, 97, 48, 57, 65, 90, 98, 122, 
	36, 95, 108, 48, 57, 65, 90, 97, 
	122, 36, 95, 97, 105, 108, 111, 117, 
	48, 57, 65, 90, 98, 122, 36, 95, 
	108, 48, 57, 65, 90, 97, 122, 36, 
	95, 115, 48, 57, 65, 90, 97, 122, 
	36, 95, 101, 48, 57, 65, 90, 97, 
	122, 36, 95, 110, 48, 57, 65, 90, 
	97, 122, 36, 95, 97, 48, 57, 65, 
	90, 98, 122, 36, 95, 108, 48, 57, 
	65, 90, 97, 122, 36, 95, 111, 48, 
	57, 65, 90, 97, 122, 36, 95, 119, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	114, 48, 57, 65, 90, 97, 122, 36, 
	95, 110, 48, 57, 65, 90, 97, 122, 
	36, 95, 99, 48, 57, 65, 90, 97, 
	122, 36, 95, 116, 48, 57, 65, 90, 
	97, 122, 36, 95, 105, 48, 57, 65, 
	90, 97, 122, 36, 95, 111, 48, 57, 
	65, 90, 97, 122, 36, 95, 110, 48, 
	57, 65, 90, 97, 122, 36, 95, 102, 
	109, 110, 48, 57, 65, 90, 97, 122, 
	36, 95, 112, 48, 57, 65, 90, 97, 
	122, 36, 95, 111, 117, 48, 57, 65, 
	90, 97, 122, 36, 95, 114, 48, 57, 
	65, 90, 97, 122, 36, 95, 116, 48, 
	57, 65, 90, 97, 122, 36, 95, 114, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	101, 48, 57, 65, 90, 97, 122, 36, 
	95, 105, 110, 112, 48, 57, 65, 90, 
	97, 122, 36, 95, 116, 48, 57, 65, 
	90, 97, 122, 36, 95, 105, 48, 57, 
	65, 90, 97, 122, 36, 95, 97, 48, 
	57, 65, 90, 98, 122, 36, 95, 108, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	101, 48, 57, 65, 90, 97, 122, 36, 
	95, 114, 48, 57, 65, 90, 97, 122, 
	36, 95, 117, 48, 57, 65, 90, 97, 
	122, 36, 95, 116, 48, 57, 65, 90, 
	97, 122, 36, 95, 111, 48, 57, 65, 
	90, 97, 122, 36, 95, 111, 48, 57, 
	65, 90, 97, 122, 36, 95, 112, 48, 
	57, 65, 90, 97, 122, 36, 95, 111, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	100, 48, 57, 65, 90, 97, 122, 36, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	36, 95, 108, 48, 57, 65, 90, 97, 
	122, 36, 95, 111, 48, 57, 65, 90, 
	97, 122, 36, 95, 116, 48, 57, 65, 
	90, 97, 122, 36, 95, 112, 114, 117, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	101, 48, 57, 65, 90, 97, 122, 36, 
	95, 114, 48, 57, 65, 90, 97, 122, 
	36, 95, 97, 48, 57, 65, 90, 98, 
	122, 36, 95, 116, 48, 57, 65, 90, 
	97, 122, 36, 95, 111, 48, 57, 65, 
	90, 97, 122, 36, 95, 114, 48, 57, 
	65, 90, 97, 122, 36, 95, 116, 48, 
	57, 65, 90, 97, 122, 36, 95, 101, 
	112, 48, 57, 65, 90, 97, 122, 36, 
	95, 114, 48, 57, 65, 90, 97, 122, 
	36, 95, 117, 48, 57, 65, 90, 97, 
	122, 36, 95, 116, 48, 57, 65, 90, 
	97, 122, 36, 95, 97, 114, 117, 48, 
	57, 65, 90, 98, 122, 36, 95, 99, 
	114, 48, 57, 65, 90, 97, 122, 36, 
	95, 107, 48, 57, 65, 90, 97, 122, 
	36, 95, 97, 48, 57, 65, 90, 98, 
	122, 36, 95, 103, 48, 57, 65, 90, 
	97, 122, 36, 95, 101, 48, 57, 65, 
	90, 97, 122, 36, 95, 97, 116, 48, 
	57, 65, 90, 98, 122, 36, 95, 109, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	101, 48, 57, 65, 90, 97, 122, 36, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	36, 95, 101, 48, 57, 65, 90, 97, 
	122, 36, 95, 114, 48, 57, 65, 90, 
	97, 122, 36, 95, 105, 48, 57, 65, 
	90, 97, 122, 36, 95, 97, 48, 57, 
	65, 90, 98, 122, 36, 95, 108, 48, 
	57, 65, 90, 97, 122, 36, 95, 111, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	116, 48, 57, 65, 90, 97, 122, 36, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	36, 95, 99, 48, 57, 65, 90, 97, 
	122, 36, 95, 116, 48, 57, 65, 90, 
	97, 122, 36, 95, 101, 48, 57, 65, 
	90, 97, 122, 36, 95, 100, 48, 57, 
	65, 90, 97, 122, 36, 95, 98, 114, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	108, 48, 57, 65, 90, 97, 122, 36, 
	95, 105, 48, 57, 65, 90, 97, 122, 
	36, 95, 99, 48, 57, 65, 90, 97, 
	122, 36, 95, 101, 48, 57, 65, 90, 
	97, 122, 36, 95, 101, 48, 57, 65, 
	90, 97, 122, 36, 95, 99, 100, 112, 
	116, 48, 57, 65, 90, 97, 122, 36, 
	95, 111, 48, 57, 65, 90, 97, 122, 
	36, 95, 114, 48, 57, 65, 90, 97, 
	122, 36, 95, 100, 48, 57, 65, 90, 
	97, 122, 36, 95, 101, 48, 57, 65, 
	90, 97, 122, 36, 95, 99, 48, 57, 
	65, 90, 97, 122, 36, 95, 108, 48, 
	57, 65, 90, 97, 122, 36, 95, 97, 
	48, 57, 65, 90, 98, 122, 36, 95, 
	114, 48, 57, 65, 90, 97, 122, 36, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	36, 95, 108, 48, 57, 65, 90, 97, 
	122, 36, 95, 97, 48, 57, 65, 90, 
	98, 122, 36, 95, 99, 48, 57, 65, 
	90, 97, 122, 36, 95, 101, 48, 57, 
	65, 90, 97, 122, 36, 95, 97, 48, 
	57, 65, 90, 98, 122, 36, 95, 98, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	108, 48, 57, 65, 90, 97, 122, 36, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	36, 95, 117, 48, 57, 65, 90, 97, 
	122, 36, 95, 114, 48, 57, 65, 90, 
	97, 122, 36, 95, 110, 48, 57, 65, 
	90, 97, 122, 36, 95, 116, 48, 57, 
	65, 90, 97, 122, 36, 95, 114, 48, 
	57, 65, 90, 97, 122, 36, 95, 101, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	97, 48, 57, 65, 90, 98, 122, 36, 
	95, 109, 48, 57, 65, 90, 97, 122, 
	36, 95, 104, 114, 121, 48, 57, 65, 
	90, 97, 122, 36, 95, 101, 48, 57, 
	65, 90, 97, 122, 36, 95, 110, 48, 
	57, 65, 90, 97, 122, 36, 95, 117, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	101, 48, 57, 65, 90, 97, 122, 36, 
	95, 112, 48, 57, 65, 90, 97, 122, 
	36, 95, 101, 48, 57, 65, 90, 97, 
	122, 36, 95, 104, 105, 48, 57, 65, 
	90, 97, 122, 36, 95, 101, 105, 48, 
	57, 65, 90, 97, 122, 36, 95, 110, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	108, 48, 57, 65, 90, 97, 122, 36, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	36, 95, 116, 48, 57, 65, 90, 97, 
	122, 36, 95, 104, 48, 57, 65, 90, 
	97, 122, 36, 95, 105, 48, 57, 65, 
	90, 97, 122, 36, 95, 110, 48, 57, 
	65, 90, 97, 122, 0
};

static const char _umodLexer_single_lengths[] = {
	2, 2, 2, 2, 0, 2, 0, 1, 
	2, 44, 2, 2, 2, 2, 1, 3, 
	2, 0, 1, 3, 0, 3, 1, 3, 
	2, 1, 1, 5, 3, 3, 3, 3, 
	3, 3, 3, 4, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 4, 
	3, 3, 3, 3, 3, 3, 4, 3, 
	3, 3, 3, 4, 3, 3, 3, 3, 
	3, 3, 4, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 4, 3, 3, 3, 
	3, 3, 3, 3, 7, 3, 3, 3, 
	3, 4, 3, 3, 3, 3, 5, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 4, 3, 
	3, 3, 3, 3, 3, 3, 3, 4, 
	3, 3, 3, 3, 3, 7, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 5, 3, 4, 
	3, 3, 3, 3, 5, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 5, 3, 
	3, 3, 3, 3, 3, 3, 4, 3, 
	3, 3, 5, 4, 3, 3, 3, 3, 
	4, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	4, 3, 3, 3, 3, 3, 6, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	5, 3, 3, 3, 3, 3, 3, 4, 
	4, 3, 3, 3, 3, 3, 3, 3
};

static const char _umodLexer_range_lengths[] = {
	0, 0, 0, 0, 1, 1, 1, 0, 
	0, 3, 0, 0, 3, 0, 0, 1, 
	1, 1, 1, 1, 1, 0, 0, 1, 
	0, 0, 0, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3
};

static const short _umodLexer_index_offsets[] = {
	0, 3, 6, 9, 12, 14, 18, 20, 
	22, 25, 73, 76, 79, 85, 88, 90, 
	95, 99, 101, 104, 109, 111, 115, 117, 
	122, 125, 127, 129, 138, 145, 152, 159, 
	166, 173, 180, 187, 195, 202, 209, 216, 
	223, 230, 237, 244, 251, 258, 265, 272, 
	280, 287, 294, 301, 308, 315, 322, 330, 
	337, 344, 351, 358, 366, 373, 380, 387, 
	394, 401, 408, 416, 423, 430, 437, 444, 
	451, 458, 465, 472, 479, 487, 494, 501, 
	508, 515, 522, 529, 536, 547, 554, 561, 
	568, 575, 583, 590, 597, 604, 611, 620, 
	627, 634, 641, 648, 655, 662, 669, 676, 
	683, 690, 697, 704, 711, 718, 725, 732, 
	739, 746, 753, 760, 767, 774, 781, 789, 
	796, 803, 810, 817, 824, 831, 838, 845, 
	853, 860, 867, 874, 881, 888, 899, 906, 
	913, 920, 927, 934, 941, 948, 955, 962, 
	969, 976, 983, 990, 997, 1004, 1013, 1020, 
	1028, 1035, 1042, 1049, 1056, 1065, 1072, 1079, 
	1086, 1093, 1100, 1107, 1114, 1121, 1128, 1135, 
	1142, 1149, 1156, 1163, 1170, 1177, 1184, 1193, 
	1200, 1207, 1214, 1221, 1228, 1235, 1242, 1250, 
	1257, 1264, 1271, 1280, 1288, 1295, 1302, 1309, 
	1316, 1324, 1331, 1338, 1345, 1352, 1359, 1366, 
	1373, 1380, 1387, 1394, 1401, 1408, 1415, 1422, 
	1429, 1437, 1444, 1451, 1458, 1465, 1472, 1482, 
	1489, 1496, 1503, 1510, 1517, 1524, 1531, 1538, 
	1545, 1552, 1559, 1566, 1573, 1580, 1587, 1594, 
	1601, 1608, 1615, 1622, 1629, 1636, 1643, 1650, 
	1657, 1666, 1673, 1680, 1687, 1694, 1701, 1708, 
	1716, 1724, 1731, 1738, 1745, 1752, 1759, 1766
};

static const short _umodLexer_indicies[] = {
	2, 3, 1, 4, 3, 1, 2, 6, 
	5, 7, 6, 5, 8, 0, 9, 9, 
	10, 0, 10, 0, 13, 12, 13, 14, 
	12, 16, 17, 16, 18, 19, 20, 21, 
	22, 23, 24, 25, 26, 27, 28, 29, 
	31, 32, 33, 34, 35, 36, 37, 38, 
	39, 20, 40, 41, 42, 43, 44, 45, 
	46, 47, 48, 49, 50, 51, 52, 53, 
	54, 55, 56, 57, 58, 30, 20, 20, 
	15, 16, 16, 59, 2, 3, 1, 20, 
	20, 20, 20, 20, 0, 2, 6, 5, 
	61, 60, 63, 64, 66, 65, 62, 68, 
	68, 8, 67, 10, 67, 64, 65, 69, 
	71, 64, 72, 65, 70, 8, 73, 12, 
	75, 76, 74, 77, 75, 8, 68, 68, 
	30, 69, 79, 80, 78, 82, 81, 84, 
	83, 20, 20, 86, 87, 88, 20, 20, 
	20, 85, 20, 20, 89, 20, 20, 20, 
	85, 20, 20, 90, 20, 20, 20, 85, 
	20, 20, 91, 20, 20, 20, 85, 20, 
	20, 92, 20, 20, 20, 85, 20, 20, 
	93, 20, 20, 20, 85, 20, 20, 94, 
	20, 20, 20, 85, 20, 20, 95, 20, 
	20, 20, 85, 20, 20, 96, 97, 20, 
	20, 20, 85, 20, 20, 98, 20, 20, 
	20, 85, 20, 20, 99, 20, 20, 20, 
	85, 20, 20, 100, 20, 20, 20, 85, 
	20, 20, 101, 20, 20, 20, 85, 20, 
	20, 102, 20, 20, 20, 85, 20, 20, 
	103, 20, 20, 20, 85, 20, 20, 104, 
	20, 20, 20, 85, 20, 20, 105, 20, 
	20, 20, 85, 20, 20, 106, 20, 20, 
	20, 85, 20, 20, 107, 20, 20, 20, 
	85, 20, 20, 108, 20, 20, 20, 85, 
	20, 20, 109, 110, 20, 20, 20, 85, 
	20, 20, 111, 20, 20, 20, 85, 20, 
	20, 112, 20, 20, 20, 85, 20, 20, 
	113, 20, 20, 20, 85, 20, 20, 114, 
	20, 20, 20, 85, 20, 20, 115, 20, 
	20, 20, 85, 20, 20, 116, 20, 20, 
	20, 85, 20, 20, 117, 118, 20, 20, 
	20, 85, 20, 20, 119, 20, 20, 20, 
	85, 20, 20, 120, 20, 20, 20, 85, 
	20, 20, 121, 20, 20, 20, 85, 20, 
	20, 122, 20, 20, 20, 85, 20, 20, 
	123, 124, 20, 20, 20, 85, 20, 20, 
	125, 20, 20, 20, 85, 20, 20, 126, 
	20, 20, 20, 85, 20, 20, 127, 20, 
	20, 20, 85, 20, 20, 129, 20, 20, 
	20, 128, 20, 20, 130, 20, 20, 20, 
	85, 20, 20, 131, 20, 20, 20, 85, 
	20, 20, 132, 133, 20, 20, 20, 85, 
	20, 20, 134, 20, 20, 20, 85, 20, 
	20, 135, 20, 20, 20, 85, 20, 20, 
	136, 20, 20, 20, 85, 20, 20, 137, 
	20, 20, 20, 85, 20, 20, 138, 20, 
	20, 20, 85, 20, 20, 139, 20, 20, 
	20, 85, 20, 20, 140, 20, 20, 20, 
	85, 20, 20, 141, 20, 20, 20, 85, 
	20, 20, 142, 20, 20, 20, 85, 20, 
	20, 143, 144, 20, 20, 20, 85, 20, 
	20, 145, 20, 20, 20, 85, 20, 20, 
	146, 20, 20, 20, 85, 20, 20, 147, 
	20, 20, 20, 85, 20, 20, 148, 20, 
	20, 20, 85, 20, 20, 149, 20, 20, 
	20, 85, 20, 20, 150, 20, 20, 20, 
	85, 20, 20, 151, 20, 20, 20, 85, 
	20, 20, 152, 153, 154, 155, 156, 20, 
	20, 20, 85, 20, 20, 157, 20, 20, 
	20, 85, 20, 20, 158, 20, 20, 20, 
	85, 20, 20, 159, 20, 20, 20, 85, 
	20, 20, 160, 20, 20, 20, 85, 20, 
	20, 162, 163, 20, 20, 20, 161, 20, 
	20, 164, 20, 20, 20, 85, 20, 20, 
	165, 20, 20, 20, 85, 20, 20, 166, 
	20, 20, 20, 85, 20, 20, 167, 20, 
	20, 20, 85, 20, 20, 168, 169, 170, 
	20, 20, 20, 85, 20, 20, 171, 20, 
	20, 20, 85, 20, 20, 172, 20, 20, 
	20, 85, 20, 20, 173, 20, 20, 20, 
	85, 20, 20, 174, 20, 20, 20, 85, 
	20, 20, 175, 20, 20, 20, 85, 20, 
	20, 176, 20, 20, 20, 85, 20, 20, 
	177, 20, 20, 20, 85, 20, 20, 178, 
	20, 20, 20, 85, 20, 20, 179, 20, 
	20, 20, 85, 20, 20, 180, 20, 20, 
	20, 85, 20, 20, 181, 20, 20, 20, 
	85, 20, 20, 182, 20, 20, 20, 85, 
	20, 20, 183, 20, 20, 20, 85, 20, 
	20, 184, 20, 20, 20, 85, 20, 20, 
	185, 20, 20, 20, 85, 20, 20, 186, 
	20, 20, 20, 85, 20, 20, 187, 20, 
	20, 20, 85, 20, 20, 188, 20, 20, 
	20, 85, 20, 20, 189, 20, 20, 20, 
	85, 20, 20, 190, 20, 20, 20, 85, 
	20, 20, 191, 20, 20, 20, 85, 20, 
	20, 192, 20, 20, 20, 85, 20, 20, 
	193, 20, 20, 20, 85, 20, 20, 194, 
	195, 20, 20, 20, 85, 20, 20, 196, 
	20, 20, 20, 85, 20, 20, 197, 20, 
	20, 20, 85, 20, 20, 198, 20, 20, 
	20, 85, 20, 20, 199, 20, 20, 20, 
	85, 20, 20, 200, 20, 20, 20, 85, 
	20, 20, 201, 20, 20, 20, 85, 20, 
	20, 202, 20, 20, 20, 85, 20, 20, 
	203, 20, 20, 20, 85, 20, 20, 204, 
	205, 20, 20, 20, 85, 20, 20, 206, 
	20, 20, 20, 85, 20, 20, 207, 20, 
	20, 20, 85, 20, 20, 208, 20, 20, 
	20, 85, 20, 20, 209, 20, 20, 20, 
	85, 20, 20, 210, 20, 20, 20, 85, 
	20, 20, 211, 212, 213, 214, 215, 20, 
	20, 20, 85, 20, 20, 216, 20, 20, 
	20, 85, 20, 20, 217, 20, 20, 20, 
	85, 20, 20, 218, 20, 20, 20, 85, 
	20, 20, 219, 20, 20, 20, 85, 20, 
	20, 220, 20, 20, 20, 85, 20, 20, 
	221, 20, 20, 20, 85, 20, 20, 222, 
	20, 20, 20, 85, 20, 20, 223, 20, 
	20, 20, 85, 20, 20, 224, 20, 20, 
	20, 85, 20, 20, 225, 20, 20, 20, 
	85, 20, 20, 226, 20, 20, 20, 85, 
	20, 20, 227, 20, 20, 20, 85, 20, 
	20, 228, 20, 20, 20, 85, 20, 20, 
	229, 20, 20, 20, 85, 20, 20, 230, 
	20, 20, 20, 85, 20, 20, 231, 232, 
	233, 20, 20, 20, 85, 20, 20, 234, 
	20, 20, 20, 85, 20, 20, 235, 236, 
	20, 20, 20, 85, 20, 20, 237, 20, 
	20, 20, 85, 20, 20, 238, 20, 20, 
	20, 85, 20, 20, 239, 20, 20, 20, 
	85, 20, 20, 240, 20, 20, 20, 85, 
	20, 20, 242, 243, 244, 20, 20, 20, 
	241, 20, 20, 245, 20, 20, 20, 85, 
	20, 20, 246, 20, 20, 20, 85, 20, 
	20, 247, 20, 20, 20, 85, 20, 20, 
	248, 20, 20, 20, 85, 20, 20, 249, 
	20, 20, 20, 85, 20, 20, 250, 20, 
	20, 20, 85, 20, 20, 251, 20, 20, 
	20, 85, 20, 20, 252, 20, 20, 20, 
	85, 20, 20, 253, 20, 20, 20, 85, 
	20, 20, 254, 20, 20, 20, 85, 20, 
	20, 255, 20, 20, 20, 85, 20, 20, 
	256, 20, 20, 20, 85, 20, 20, 257, 
	20, 20, 20, 85, 20, 20, 258, 20, 
	20, 20, 85, 20, 20, 259, 20, 20, 
	20, 85, 20, 20, 260, 20, 20, 20, 
	85, 20, 20, 261, 20, 20, 20, 85, 
	20, 20, 262, 263, 264, 20, 20, 20, 
	85, 20, 20, 265, 20, 20, 20, 85, 
	20, 20, 266, 20, 20, 20, 85, 20, 
	20, 267, 20, 20, 20, 85, 20, 20, 
	268, 20, 20, 20, 85, 20, 20, 269, 
	20, 20, 20, 85, 20, 20, 270, 20, 
	20, 20, 85, 20, 20, 271, 20, 20, 
	20, 85, 20, 20, 272, 273, 20, 20, 
	20, 85, 20, 20, 274, 20, 20, 20, 
	85, 20, 20, 275, 20, 20, 20, 85, 
	20, 20, 276, 20, 20, 20, 85, 20, 
	20, 277, 278, 279, 20, 20, 20, 85, 
	20, 20, 280, 281, 20, 20, 20, 85, 
	20, 20, 282, 20, 20, 20, 85, 20, 
	20, 283, 20, 20, 20, 85, 20, 20, 
	284, 20, 20, 20, 85, 20, 20, 285, 
	20, 20, 20, 85, 20, 20, 286, 287, 
	20, 20, 20, 85, 20, 20, 288, 20, 
	20, 20, 85, 20, 20, 289, 20, 20, 
	20, 85, 20, 20, 290, 20, 20, 20, 
	85, 20, 20, 291, 20, 20, 20, 85, 
	20, 20, 292, 20, 20, 20, 85, 20, 
	20, 293, 20, 20, 20, 85, 20, 20, 
	294, 20, 20, 20, 85, 20, 20, 295, 
	20, 20, 20, 85, 20, 20, 296, 20, 
	20, 20, 85, 20, 20, 297, 20, 20, 
	20, 85, 20, 20, 298, 20, 20, 20, 
	85, 20, 20, 299, 20, 20, 20, 85, 
	20, 20, 300, 20, 20, 20, 85, 20, 
	20, 301, 20, 20, 20, 85, 20, 20, 
	302, 20, 20, 20, 85, 20, 20, 303, 
	304, 20, 20, 20, 85, 20, 20, 305, 
	20, 20, 20, 85, 20, 20, 306, 20, 
	20, 20, 85, 20, 20, 307, 20, 20, 
	20, 85, 20, 20, 308, 20, 20, 20, 
	85, 20, 20, 309, 20, 20, 20, 85, 
	20, 20, 310, 311, 312, 313, 20, 20, 
	20, 85, 20, 20, 314, 20, 20, 20, 
	85, 20, 20, 315, 20, 20, 20, 85, 
	20, 20, 316, 20, 20, 20, 85, 20, 
	20, 317, 20, 20, 20, 85, 20, 20, 
	318, 20, 20, 20, 85, 20, 20, 319, 
	20, 20, 20, 85, 20, 20, 320, 20, 
	20, 20, 85, 20, 20, 321, 20, 20, 
	20, 85, 20, 20, 322, 20, 20, 20, 
	85, 20, 20, 323, 20, 20, 20, 85, 
	20, 20, 324, 20, 20, 20, 85, 20, 
	20, 325, 20, 20, 20, 85, 20, 20, 
	326, 20, 20, 20, 85, 20, 20, 327, 
	20, 20, 20, 85, 20, 20, 328, 20, 
	20, 20, 85, 20, 20, 329, 20, 20, 
	20, 85, 20, 20, 330, 20, 20, 20, 
	85, 20, 20, 331, 20, 20, 20, 85, 
	20, 20, 332, 20, 20, 20, 85, 20, 
	20, 333, 20, 20, 20, 85, 20, 20, 
	334, 20, 20, 20, 85, 20, 20, 335, 
	20, 20, 20, 85, 20, 20, 336, 20, 
	20, 20, 85, 20, 20, 337, 20, 20, 
	20, 85, 20, 20, 338, 20, 20, 20, 
	85, 20, 20, 339, 340, 341, 20, 20, 
	20, 85, 20, 20, 342, 20, 20, 20, 
	85, 20, 20, 343, 20, 20, 20, 85, 
	20, 20, 344, 20, 20, 20, 85, 20, 
	20, 345, 20, 20, 20, 85, 20, 20, 
	346, 20, 20, 20, 85, 20, 20, 347, 
	20, 20, 20, 85, 20, 20, 348, 349, 
	20, 20, 20, 85, 20, 20, 350, 351, 
	20, 20, 20, 85, 20, 20, 352, 20, 
	20, 20, 85, 20, 20, 353, 20, 20, 
	20, 85, 20, 20, 354, 20, 20, 20, 
	85, 20, 20, 355, 20, 20, 20, 85, 
	20, 20, 356, 20, 20, 20, 85, 20, 
	20, 357, 20, 20, 20, 85, 20, 20, 
	358, 20, 20, 20, 85, 0
};

static const unsigned char _umodLexer_trans_targs[] = {
	9, 0, 9, 1, 11, 2, 3, 13, 
	16, 6, 17, 9, 7, 8, 9, 9, 
	10, 9, 9, 11, 12, 13, 9, 9, 
	14, 15, 9, 19, 20, 21, 23, 9, 
	9, 24, 25, 26, 9, 9, 9, 9, 
	27, 47, 54, 76, 84, 133, 149, 165, 
	168, 172, 174, 186, 213, 235, 240, 247, 
	9, 9, 9, 9, 9, 9, 9, 9, 
	4, 18, 9, 9, 5, 9, 9, 9, 
	9, 9, 9, 22, 9, 9, 9, 9, 
	9, 9, 9, 9, 9, 9, 28, 35, 
	43, 29, 30, 31, 32, 33, 34, 12, 
	12, 36, 37, 38, 39, 40, 41, 42, 
	12, 44, 45, 46, 12, 48, 51, 49, 
	50, 12, 52, 53, 12, 55, 58, 56, 
	57, 12, 59, 60, 65, 61, 62, 63, 
	9, 64, 12, 66, 67, 69, 68, 12, 
	70, 71, 72, 73, 74, 75, 12, 77, 
	78, 12, 79, 80, 81, 82, 83, 12, 
	85, 87, 94, 112, 118, 86, 12, 88, 
	89, 9, 90, 91, 12, 92, 93, 12, 
	95, 12, 104, 96, 97, 98, 99, 100, 
	101, 102, 103, 12, 105, 106, 107, 108, 
	109, 110, 111, 12, 113, 114, 115, 116, 
	117, 12, 119, 126, 120, 121, 122, 123, 
	124, 125, 12, 127, 128, 130, 129, 12, 
	131, 132, 12, 134, 137, 140, 142, 143, 
	135, 136, 12, 138, 139, 12, 141, 12, 
	12, 144, 145, 146, 147, 148, 12, 12, 
	150, 156, 151, 152, 154, 153, 12, 155, 
	12, 9, 157, 161, 163, 158, 159, 160, 
	12, 162, 12, 164, 12, 166, 167, 12, 
	169, 170, 171, 12, 173, 12, 175, 12, 
	181, 176, 177, 178, 179, 180, 12, 182, 
	183, 184, 12, 185, 12, 187, 201, 208, 
	188, 192, 189, 190, 191, 12, 193, 198, 
	194, 195, 196, 197, 12, 199, 200, 12, 
	202, 203, 204, 205, 206, 207, 12, 209, 
	212, 210, 211, 12, 12, 214, 215, 218, 
	224, 232, 216, 217, 12, 219, 220, 221, 
	222, 223, 12, 225, 226, 227, 228, 229, 
	230, 231, 12, 233, 234, 12, 236, 237, 
	238, 239, 12, 241, 243, 245, 242, 12, 
	244, 12, 246, 12, 248, 252, 249, 250, 
	12, 251, 12, 253, 254, 255, 12
};

static const short _umodLexer_trans_actions[] = {
	95, 0, 53, 0, 283, 0, 0, 283, 
	277, 0, 0, 93, 0, 0, 57, 59, 
	0, 55, 25, 286, 274, 286, 33, 35, 
	0, 268, 51, 271, 0, 5, 280, 49, 
	47, 0, 0, 0, 45, 37, 39, 7, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	41, 43, 27, 89, 71, 13, 67, 29, 
	0, 280, 9, 85, 0, 87, 69, 31, 
	11, 81, 73, 0, 15, 91, 79, 19, 
	23, 75, 21, 77, 17, 83, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 97, 
	112, 0, 0, 0, 0, 0, 0, 0, 
	127, 0, 0, 0, 139, 0, 0, 0, 
	0, 154, 0, 0, 169, 0, 0, 0, 
	0, 184, 0, 0, 0, 0, 0, 0, 
	63, 0, 211, 0, 0, 0, 0, 223, 
	0, 0, 0, 0, 0, 0, 238, 0, 
	0, 253, 0, 0, 0, 0, 0, 100, 
	0, 0, 0, 0, 0, 0, 115, 0, 
	0, 61, 0, 0, 142, 0, 0, 157, 
	0, 187, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 172, 0, 0, 0, 0, 
	0, 0, 0, 199, 0, 0, 0, 0, 
	0, 214, 0, 0, 0, 0, 0, 0, 
	0, 0, 226, 0, 0, 0, 0, 241, 
	0, 0, 256, 0, 0, 0, 0, 0, 
	0, 0, 103, 0, 0, 118, 0, 130, 
	145, 0, 0, 0, 0, 0, 160, 175, 
	0, 0, 0, 0, 0, 0, 190, 0, 
	202, 65, 0, 0, 0, 0, 0, 0, 
	229, 0, 244, 0, 259, 0, 0, 106, 
	0, 0, 0, 121, 0, 133, 0, 163, 
	0, 0, 0, 0, 0, 0, 148, 0, 
	0, 0, 178, 0, 193, 0, 0, 0, 
	0, 0, 0, 0, 0, 205, 0, 0, 
	0, 0, 0, 0, 217, 0, 0, 232, 
	0, 0, 0, 0, 0, 0, 247, 0, 
	0, 0, 0, 262, 109, 0, 0, 0, 
	0, 0, 0, 0, 124, 0, 0, 0, 
	0, 0, 136, 0, 0, 0, 0, 0, 
	0, 0, 151, 0, 0, 166, 0, 0, 
	0, 0, 181, 0, 0, 0, 0, 196, 
	0, 208, 0, 220, 0, 0, 0, 0, 
	235, 0, 250, 0, 0, 0, 265
};

static const short _umodLexer_to_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
};

static const short _umodLexer_from_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 3, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
};

static const short _umodLexer_eof_trans[] = {
	1, 1, 1, 1, 1, 1, 1, 12, 
	12, 0, 60, 1, 1, 1, 61, 63, 
	68, 68, 70, 71, 74, 75, 78, 70, 
	79, 82, 84, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 129, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 162, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 242, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86, 
	86, 86, 86, 86, 86, 86, 86, 86
};

static const int umodLexer_start = 9;
static const int umodLexer_first_final = 9;
static const int umodLexer_error = -1;

static const int umodLexer_en_main = 9;


#line 13 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"

// no idea about the origins of this value, ask Flori ;)
int EVIL=0x666;

using namespace umod::lex;

Lexer::Lexer(const char *source, unsigned int length)
    : m_source(source)
    , m_source_end(source + length)
    , m_source_eof(m_source_end)
    , m_ts(nullptr), m_te(nullptr)
    , m_current_state(EVIL), m_act(0)
    , m_position(std::make_pair(1, 1))
{

}

Lexer::Lexer(const std::string &source): Lexer(source.c_str(), source.length())
{

}

Lexer::~Lexer()
{

}

Lexeme *Lexer::consume(void)
{
    
#line 171 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"


    Lexeme::Type type;

    if (m_source == m_source_end)
    {
        m_ts = m_te = m_source;
        type = Lexeme::Type::Eof;
    }
    else
    {
        
#line 183 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
        
#line 184 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
        
#line 185 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
        
#line 186 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
        
#line 187 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
        
#line 188 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
        
#line 189 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"

        
#line 971 "lexer.cc"
	{
	(  m_current_state) = umodLexer_start;
	(  m_ts) = 0;
	(  m_te) = 0;
	( m_act) = 0;
	}

#line 191 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
        
#line 981 "lexer.cc"
	{
	int _klen;
	unsigned int _trans;
	const char *_acts;
	unsigned int _nacts;
	const char *_keys;

	if ( (   m_source) == (  m_source_end) )
		goto _test_eof;
_resume:
	_acts = _umodLexer_actions + _umodLexer_from_state_actions[(  m_current_state)];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 1:
#line 1 "NONE"
	{(  m_ts) = (   m_source);}
	break;
#line 1000 "lexer.cc"
		}
	}

	_keys = _umodLexer_trans_keys + _umodLexer_key_offsets[(  m_current_state)];
	_trans = _umodLexer_index_offsets[(  m_current_state)];

	_klen = _umodLexer_single_lengths[(  m_current_state)];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( (*(   m_source)) < *_mid )
				_upper = _mid - 1;
			else if ( (*(   m_source)) > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (unsigned int)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _umodLexer_range_lengths[(  m_current_state)];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( (*(   m_source)) < _mid[0] )
				_upper = _mid - 2;
			else if ( (*(   m_source)) > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += (unsigned int)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	_trans = _umodLexer_indicies[_trans];
_eof_trans:
	(  m_current_state) = _umodLexer_trans_targs[_trans];

	if ( _umodLexer_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _umodLexer_actions + _umodLexer_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 2:
#line 1 "NONE"
	{(  m_te) = (   m_source)+1;}
	break;
	case 3:
#line 61 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 1;}
	break;
	case 4:
#line 62 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 2;}
	break;
	case 5:
#line 63 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 3;}
	break;
	case 6:
#line 64 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 4;}
	break;
	case 7:
#line 65 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 5;}
	break;
	case 8:
#line 66 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 6;}
	break;
	case 9:
#line 67 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 7;}
	break;
	case 10:
#line 68 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 8;}
	break;
	case 11:
#line 69 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 9;}
	break;
	case 12:
#line 70 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 10;}
	break;
	case 13:
#line 71 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 11;}
	break;
	case 14:
#line 73 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 13;}
	break;
	case 15:
#line 74 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 14;}
	break;
	case 16:
#line 75 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 15;}
	break;
	case 17:
#line 76 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 16;}
	break;
	case 18:
#line 77 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 17;}
	break;
	case 19:
#line 78 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 18;}
	break;
	case 20:
#line 79 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 19;}
	break;
	case 21:
#line 80 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 20;}
	break;
	case 22:
#line 81 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 21;}
	break;
	case 23:
#line 82 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 22;}
	break;
	case 24:
#line 83 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 23;}
	break;
	case 25:
#line 84 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 24;}
	break;
	case 26:
#line 85 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 25;}
	break;
	case 27:
#line 86 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 26;}
	break;
	case 28:
#line 87 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 27;}
	break;
	case 29:
#line 88 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 28;}
	break;
	case 30:
#line 89 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 29;}
	break;
	case 31:
#line 90 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 30;}
	break;
	case 32:
#line 91 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 31;}
	break;
	case 33:
#line 92 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 32;}
	break;
	case 34:
#line 93 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 33;}
	break;
	case 35:
#line 94 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 34;}
	break;
	case 36:
#line 95 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 35;}
	break;
	case 37:
#line 97 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 37;}
	break;
	case 38:
#line 98 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 38;}
	break;
	case 39:
#line 99 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 39;}
	break;
	case 40:
#line 100 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 40;}
	break;
	case 41:
#line 101 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 41;}
	break;
	case 42:
#line 102 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 42;}
	break;
	case 43:
#line 104 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 44;}
	break;
	case 44:
#line 105 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 45;}
	break;
	case 45:
#line 106 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 46;}
	break;
	case 46:
#line 107 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 47;}
	break;
	case 47:
#line 108 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 48;}
	break;
	case 48:
#line 109 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 49;}
	break;
	case 49:
#line 110 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 50;}
	break;
	case 50:
#line 111 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 51;}
	break;
	case 51:
#line 112 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 52;}
	break;
	case 52:
#line 113 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 53;}
	break;
	case 53:
#line 114 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 54;}
	break;
	case 54:
#line 115 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 55;}
	break;
	case 55:
#line 116 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 56;}
	break;
	case 56:
#line 117 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 57;}
	break;
	case 57:
#line 118 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 58;}
	break;
	case 58:
#line 119 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 59;}
	break;
	case 59:
#line 120 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 60;}
	break;
	case 60:
#line 122 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 61;}
	break;
	case 61:
#line 123 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 62;}
	break;
	case 62:
#line 160 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 92;}
	break;
	case 63:
#line 161 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 93;}
	break;
	case 64:
#line 162 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 94;}
	break;
	case 65:
#line 163 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 95;}
	break;
	case 66:
#line 169 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{( m_act) = 99;}
	break;
	case 67:
#line 126 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::Exponent; {(   m_source)++; goto _out; } }}
	break;
	case 68:
#line 129 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::PlusAssign; {(   m_source)++; goto _out; } }}
	break;
	case 69:
#line 130 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::MinusAssign; {(   m_source)++; goto _out; } }}
	break;
	case 70:
#line 131 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::MulAssign; {(   m_source)++; goto _out; } }}
	break;
	case 71:
#line 132 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::DivAssign; {(   m_source)++; goto _out; } }}
	break;
	case 72:
#line 135 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::GreaterOrEqual; {(   m_source)++; goto _out; } }}
	break;
	case 73:
#line 137 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::LesserOrEqual; {(   m_source)++; goto _out; } }}
	break;
	case 74:
#line 138 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::Equal; {(   m_source)++; goto _out; } }}
	break;
	case 75:
#line 139 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::NotEqual; {(   m_source)++; goto _out; } }}
	break;
	case 76:
#line 141 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::Negate; {(   m_source)++; goto _out; } }}
	break;
	case 77:
#line 142 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::Inv; {(   m_source)++; goto _out; } }}
	break;
	case 78:
#line 143 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::Incrementation; {(   m_source)++; goto _out; } }}
	break;
	case 79:
#line 144 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::Decrementation; {(   m_source)++; goto _out; } }}
	break;
	case 80:
#line 146 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::LParen; {(   m_source)++; goto _out; } }}
	break;
	case 81:
#line 147 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::RParen; {(   m_source)++; goto _out; } }}
	break;
	case 82:
#line 148 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::LBracket; {(   m_source)++; goto _out; } }}
	break;
	case 83:
#line 149 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::RBracket; {(   m_source)++; goto _out; } }}
	break;
	case 84:
#line 150 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::LBrace; {(   m_source)++; goto _out; } }}
	break;
	case 85:
#line 151 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::RBrace; {(   m_source)++; goto _out; } }}
	break;
	case 86:
#line 153 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::QuestionMark; {(   m_source)++; goto _out; } }}
	break;
	case 87:
#line 156 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::Semicolon; {(   m_source)++; goto _out; } }}
	break;
	case 88:
#line 157 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::Colon; {(   m_source)++; goto _out; } }}
	break;
	case 89:
#line 158 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::Comma; {(   m_source)++; goto _out; } }}
	break;
	case 90:
#line 163 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::String; {(   m_source)++; goto _out; } }}
	break;
	case 91:
#line 166 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::Newline; {(   m_source)++; goto _out; } }}
	break;
	case 92:
#line 168 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::Comment; {(   m_source)++; goto _out; } }}
	break;
	case 93:
#line 169 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ {(   m_source)++; goto _out; } }}
	break;
	case 94:
#line 72 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::Else; {(   m_source)++; goto _out; } }}
	break;
	case 95:
#line 96 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::Connect; {(   m_source)++; goto _out; } }}
	break;
	case 96:
#line 103 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::In; {(   m_source)++; goto _out; } }}
	break;
	case 97:
#line 122 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::Plus; {(   m_source)++; goto _out; } }}
	break;
	case 98:
#line 123 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::Minus; {(   m_source)++; goto _out; } }}
	break;
	case 99:
#line 124 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::Mul; {(   m_source)++; goto _out; } }}
	break;
	case 100:
#line 125 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::Div; {(   m_source)++; goto _out; } }}
	break;
	case 101:
#line 128 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::Assign; {(   m_source)++; goto _out; } }}
	break;
	case 102:
#line 134 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::Greater; {(   m_source)++; goto _out; } }}
	break;
	case 103:
#line 136 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::Lesser; {(   m_source)++; goto _out; } }}
	break;
	case 104:
#line 154 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::Dot; {(   m_source)++; goto _out; } }}
	break;
	case 105:
#line 160 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::Ident; {(   m_source)++; goto _out; } }}
	break;
	case 106:
#line 161 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::Float; {(   m_source)++; goto _out; } }}
	break;
	case 107:
#line 162 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::Number; {(   m_source)++; goto _out; } }}
	break;
	case 108:
#line 165 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::Spaces; {(   m_source)++; goto _out; } }}
	break;
	case 109:
#line 168 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::Comment; {(   m_source)++; goto _out; } }}
	break;
	case 110:
#line 125 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
	{{(   m_source) = (((  m_te)))-1;}{ type = Lexeme::Type::Div; {(   m_source)++; goto _out; } }}
	break;
	case 111:
#line 1 "NONE"
	{	switch( ( m_act) ) {
	case 1:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::Algorithm; {(   m_source)++; goto _out; } }
	break;
	case 2:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::Discrete; {(   m_source)++; goto _out; } }
	break;
	case 3:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::False; {(   m_source)++; goto _out; } }
	break;
	case 4:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::Loop; {(   m_source)++; goto _out; } }
	break;
	case 5:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::Pure; {(   m_source)++; goto _out; } }
	break;
	case 6:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::And; {(   m_source)++; goto _out; } }
	break;
	case 7:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::Each; {(   m_source)++; goto _out; } }
	break;
	case 8:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::Final; {(   m_source)++; goto _out; } }
	break;
	case 9:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::Model; {(   m_source)++; goto _out; } }
	break;
	case 10:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::Record; {(   m_source)++; goto _out; } }
	break;
	case 11:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::Annotation; {(   m_source)++; goto _out; } }
	break;
	case 13:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::Flow; {(   m_source)++; goto _out; } }
	break;
	case 14:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::Not; {(   m_source)++; goto _out; } }
	break;
	case 15:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::Redeclare; {(   m_source)++; goto _out; } }
	break;
	case 16:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::Assert; {(   m_source)++; goto _out; } }
	break;
	case 17:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::Elseif; {(   m_source)++; goto _out; } }
	break;
	case 18:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::For; {(   m_source)++; goto _out; } }
	break;
	case 19:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::Operator; {(   m_source)++; goto _out; } }
	break;
	case 20:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::Replaceable; {(   m_source)++; goto _out; } }
	break;
	case 21:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::Block; {(   m_source)++; goto _out; } }
	break;
	case 22:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::Elsewhen; {(   m_source)++; goto _out; } }
	break;
	case 23:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::Function; {(   m_source)++; goto _out; } }
	break;
	case 24:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::Or; {(   m_source)++; goto _out; } }
	break;
	case 25:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::Return; {(   m_source)++; goto _out; } }
	break;
	case 26:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::Break; {(   m_source)++; goto _out; } }
	break;
	case 27:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::Encapsulated; {(   m_source)++; goto _out; } }
	break;
	case 28:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::If; {(   m_source)++; goto _out; } }
	break;
	case 29:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::Outer; {(   m_source)++; goto _out; } }
	break;
	case 30:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::Stream; {(   m_source)++; goto _out; } }
	break;
	case 31:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::Class; {(   m_source)++; goto _out; } }
	break;
	case 32:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::End; {(   m_source)++; goto _out; } }
	break;
	case 33:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::Import; {(   m_source)++; goto _out; } }
	break;
	case 34:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::Output; {(   m_source)++; goto _out; } }
	break;
	case 35:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::Then; {(   m_source)++; goto _out; } }
	break;
	case 37:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::Enumeration; {(   m_source)++; goto _out; } }
	break;
	case 38:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::Impure; {(   m_source)++; goto _out; } }
	break;
	case 39:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::Package; {(   m_source)++; goto _out; } }
	break;
	case 40:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::True; {(   m_source)++; goto _out; } }
	break;
	case 41:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::Connector; {(   m_source)++; goto _out; } }
	break;
	case 42:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::Equation; {(   m_source)++; goto _out; } }
	break;
	case 44:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::Parameter; {(   m_source)++; goto _out; } }
	break;
	case 45:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::Type; {(   m_source)++; goto _out; } }
	break;
	case 46:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::Constant; {(   m_source)++; goto _out; } }
	break;
	case 47:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::Expandable; {(   m_source)++; goto _out; } }
	break;
	case 48:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::Initial; {(   m_source)++; goto _out; } }
	break;
	case 49:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::Partial; {(   m_source)++; goto _out; } }
	break;
	case 50:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::When; {(   m_source)++; goto _out; } }
	break;
	case 51:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::Constrainedby; {(   m_source)++; goto _out; } }
	break;
	case 52:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::Extends; {(   m_source)++; goto _out; } }
	break;
	case 53:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::Inner; {(   m_source)++; goto _out; } }
	break;
	case 54:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::Protected; {(   m_source)++; goto _out; } }
	break;
	case 55:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::While; {(   m_source)++; goto _out; } }
	break;
	case 56:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::Der; {(   m_source)++; goto _out; } }
	break;
	case 57:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::External; {(   m_source)++; goto _out; } }
	break;
	case 58:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::Input; {(   m_source)++; goto _out; } }
	break;
	case 59:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::Public; {(   m_source)++; goto _out; } }
	break;
	case 60:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::Within; {(   m_source)++; goto _out; } }
	break;
	case 61:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::Plus; {(   m_source)++; goto _out; } }
	break;
	case 62:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::Minus; {(   m_source)++; goto _out; } }
	break;
	case 92:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::Ident; {(   m_source)++; goto _out; } }
	break;
	case 93:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::Float; {(   m_source)++; goto _out; } }
	break;
	case 94:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::Number; {(   m_source)++; goto _out; } }
	break;
	case 95:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::String; {(   m_source)++; goto _out; } }
	break;
	case 99:
	{{(   m_source) = (((  m_te)))-1;} {(   m_source)++; goto _out; } }
	break;
	}
	}
	break;
#line 1700 "lexer.cc"
		}
	}

_again:
	_acts = _umodLexer_actions + _umodLexer_to_state_actions[(  m_current_state)];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 0:
#line 1 "NONE"
	{(  m_ts) = 0;}
	break;
#line 1713 "lexer.cc"
		}
	}

	if ( ++(   m_source) != (  m_source_end) )
		goto _resume;
	_test_eof: {}
	if ( (   m_source) == ( m_source_eof) )
	{
	if ( _umodLexer_eof_trans[(  m_current_state)] > 0 ) {
		_trans = _umodLexer_eof_trans[(  m_current_state)] - 1;
		goto _eof_trans;
	}
	}

	_out: {}
	}

#line 192 "/Users/phryne/Desktop/uMod/src/parse/lex/lexer.rl"
    }

    unsigned int size = m_te - m_ts;
    Lexeme::pos_t position = m_position;

    if (type == Lexeme::Type::Newline)
    {
        m_position.first += 1;
        m_position.second = size;
    }
    else
    {
        m_position.second += size;
    }

    return new Lexeme(type, std::string(m_ts, size), position);
}

