
#line 1 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
#include <stddef.h>
#include <string>
#include <utility>
#include "lexer.h"
#include "lexeme.h"

// NOTE : if the lemon-parser is properly done then all the #define in lemon-parser.h should be equal
//        to total no of tokens
//        lemon-parser.h is generated by lemon based on whats used in parser , so if all the cases are
//              considered then there should be no token not # defined failsafe

#line 12 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"

#line 17 "lexer.cc"
static const char _umodLexer_actions[] = {
	0, 1, 0, 1, 1, 1, 2, 1, 
	66, 1, 67, 1, 68, 1, 69, 1, 
	70, 1, 71, 1, 72, 1, 73, 1, 
	74, 1, 75, 1, 76, 1, 77, 1, 
	78, 1, 79, 1, 80, 1, 81, 1, 
	82, 1, 83, 1, 84, 1, 85, 1, 
	86, 1, 87, 1, 88, 1, 89, 1, 
	90, 1, 91, 1, 92, 1, 93, 1, 
	94, 1, 95, 1, 96, 1, 97, 1, 
	98, 1, 99, 1, 100, 1, 101, 1, 
	102, 1, 103, 1, 104, 1, 105, 1, 
	106, 1, 107, 1, 108, 1, 109, 1, 
	110, 2, 2, 3, 2, 2, 4, 2, 
	2, 5, 2, 2, 6, 2, 2, 7, 
	2, 2, 8, 2, 2, 9, 2, 2, 
	10, 2, 2, 11, 2, 2, 12, 2, 
	2, 13, 2, 2, 14, 2, 2, 15, 
	2, 2, 16, 2, 2, 17, 2, 2, 
	18, 2, 2, 19, 2, 2, 20, 2, 
	2, 21, 2, 2, 22, 2, 2, 23, 
	2, 2, 24, 2, 2, 25, 2, 2, 
	26, 2, 2, 27, 2, 2, 28, 2, 
	2, 29, 2, 2, 30, 2, 2, 31, 
	2, 2, 32, 2, 2, 33, 2, 2, 
	34, 2, 2, 35, 2, 2, 36, 2, 
	2, 37, 2, 2, 38, 2, 2, 39, 
	2, 2, 40, 2, 2, 41, 2, 2, 
	42, 2, 2, 43, 2, 2, 44, 2, 
	2, 45, 2, 2, 46, 2, 2, 47, 
	2, 2, 48, 2, 2, 49, 2, 2, 
	50, 2, 2, 51, 2, 2, 52, 2, 
	2, 53, 2, 2, 54, 2, 2, 55, 
	2, 2, 56, 2, 2, 57, 2, 2, 
	58, 2, 2, 59, 2, 2, 60, 2, 
	2, 61, 2, 2, 62, 2, 2, 63, 
	2, 2, 64, 2, 2, 65
};

static const short _umodLexer_key_offsets[] = {
	0, 2, 4, 6, 8, 15, 22, 23, 
	24, 25, 26, 27, 28, 29, 37, 38, 
	39, 40, 41, 42, 43, 51, 54, 57, 
	60, 63, 66, 69, 72, 80, 89, 92, 
	95, 98, 101, 104, 107, 109, 113, 115, 
	116, 118, 166, 168, 170, 178, 186, 188, 
	195, 198, 202, 204, 211, 213, 214, 219, 
	220, 222, 223, 224, 239, 254, 263, 272, 
	281, 290, 299, 308, 317, 332, 348, 357, 
	366, 375, 384, 393, 402, 418, 427, 436, 
	445, 454, 463, 472, 488, 504, 513, 522, 
	531, 540, 549, 558, 568, 577, 586, 595, 
	604, 613, 622, 632, 641, 650, 659, 668, 
	678, 687, 696, 705, 714, 723, 732, 742, 
	751, 760, 769, 778, 787, 796, 805, 814, 
	823, 833, 842, 851, 860, 869, 878, 887, 
	896, 909, 918, 927, 936, 945, 955, 964, 
	973, 982, 991, 1002, 1011, 1020, 1029, 1038, 
	1047, 1056, 1065, 1074, 1083, 1092, 1101, 1110, 
	1119, 1128, 1137, 1146, 1155, 1164, 1173, 1182, 
	1191, 1200, 1209, 1219, 1228, 1237, 1246, 1255, 
	1264, 1273, 1282, 1291, 1301, 1310, 1319, 1328, 
	1337, 1346, 1359, 1368, 1377, 1386, 1395, 1404, 
	1413, 1422, 1431, 1440, 1449, 1458, 1467, 1476, 
	1485, 1494, 1511, 1520, 1530, 1539, 1548, 1557, 
	1566, 1582, 1597, 1607, 1616, 1625, 1641, 1650, 
	1659, 1668, 1677, 1686, 1695, 1711, 1720, 1731, 
	1740, 1749, 1758, 1767, 1776, 1785, 1794, 1804, 
	1813, 1822, 1831, 1842, 1852, 1861, 1870, 1879, 
	1888, 1898, 1907, 1916, 1925, 1934, 1943, 1952, 
	1961, 1970, 1979, 1988, 1997, 2006, 2015, 2024, 
	2033, 2043, 2052, 2061, 2070, 2079, 2088, 2100, 
	2109, 2118, 2127, 2136, 2145, 2154, 2163, 2172, 
	2181, 2190, 2199, 2208, 2217, 2226, 2235, 2244, 
	2253, 2262, 2271, 2280, 2289, 2298, 2307, 2316, 
	2334, 2343, 2352, 2361, 2370, 2379, 2388, 2398, 
	2408, 2417, 2426, 2435, 2444, 2453, 2462
};

static const char _umodLexer_trans_keys[] = {
	34, 92, 34, 92, 39, 92, 39, 92, 
	39, 97, 101, 105, 108, 110, 116, 39, 
	97, 101, 105, 108, 110, 116, 113, 117, 
	97, 116, 105, 111, 110, 39, 97, 101, 
	103, 105, 108, 110, 116, 111, 114, 105, 
	116, 104, 109, 39, 92, 97, 101, 105, 
	108, 110, 116, 39, 92, 113, 39, 92, 
	117, 39, 92, 97, 39, 92, 116, 39, 
	92, 105, 39, 92, 111, 39, 92, 110, 
	39, 92, 97, 101, 105, 108, 110, 116, 
	39, 92, 97, 101, 103, 105, 108, 110, 
	116, 39, 92, 111, 39, 92, 114, 39, 
	92, 105, 39, 92, 116, 39, 92, 104, 
	39, 92, 109, 48, 57, 43, 45, 48, 
	57, 48, 57, 42, 42, 47, 9, 10, 
	13, 32, 34, 36, 39, 40, 41, 42, 
	43, 44, 45, 46, 47, 58, 59, 60, 
	61, 62, 91, 93, 94, 95, 97, 98, 
	99, 100, 101, 102, 105, 108, 109, 110, 
	111, 112, 114, 115, 116, 119, 123, 125, 
	48, 57, 65, 90, 103, 122, 9, 32, 
	34, 92, 36, 95, 48, 57, 65, 90, 
	97, 122, 39, 92, 97, 101, 105, 108, 
	110, 116, 39, 92, 39, 97, 101, 105, 
	108, 110, 116, 46, 48, 57, 69, 101, 
	48, 57, 48, 57, 42, 43, 45, 47, 
	94, 48, 57, 42, 47, 10, 46, 69, 
	101, 48, 57, 61, 61, 62, 61, 61, 
	36, 39, 95, 97, 101, 105, 108, 110, 
	116, 48, 57, 65, 90, 98, 122, 36, 
	39, 95, 97, 101, 105, 108, 110, 116, 
	48, 57, 65, 90, 98, 122, 36, 95, 
	113, 48, 57, 65, 90, 97, 122, 36, 
	95, 117, 48, 57, 65, 90, 97, 122, 
	36, 95, 97, 48, 57, 65, 90, 98, 
	122, 36, 95, 116, 48, 57, 65, 90, 
	97, 122, 36, 95, 105, 48, 57, 65, 
	90, 97, 122, 36, 95, 111, 48, 57, 
	65, 90, 97, 122, 36, 95, 110, 48, 
	57, 65, 90, 97, 122, 36, 39, 95, 
	97, 101, 105, 108, 110, 116, 48, 57, 
	65, 90, 98, 122, 36, 39, 95, 97, 
	101, 103, 105, 108, 110, 116, 48, 57, 
	65, 90, 98, 122, 36, 95, 111, 48, 
	57, 65, 90, 97, 122, 36, 95, 114, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	105, 48, 57, 65, 90, 97, 122, 36, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	36, 95, 104, 48, 57, 65, 90, 97, 
	122, 36, 95, 109, 48, 57, 65, 90, 
	97, 122, 36, 39, 95, 97, 101, 103, 
	105, 108, 110, 116, 48, 57, 65, 90, 
	98, 122, 36, 95, 111, 48, 57, 65, 
	90, 97, 122, 36, 95, 114, 48, 57, 
	65, 90, 97, 122, 36, 95, 105, 48, 
	57, 65, 90, 97, 122, 36, 95, 116, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	104, 48, 57, 65, 90, 97, 122, 36, 
	95, 109, 48, 57, 65, 90, 97, 122, 
	36, 39, 95, 97, 100, 101, 105, 108, 
	110, 116, 48, 57, 65, 90, 98, 122, 
	36, 39, 95, 97, 101, 105, 108, 110, 
	111, 116, 48, 57, 65, 90, 98, 122, 
	36, 95, 116, 48, 57, 65, 90, 97, 
	122, 36, 95, 97, 48, 57, 65, 90, 
	98, 122, 36, 95, 116, 48, 57, 65, 
	90, 97, 122, 36, 95, 105, 48, 57, 
	65, 90, 97, 122, 36, 95, 111, 48, 
	57, 65, 90, 97, 122, 36, 95, 110, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	108, 114, 48, 57, 65, 90, 97, 122, 
	36, 95, 111, 48, 57, 65, 90, 97, 
	122, 36, 95, 99, 48, 57, 65, 90, 
	97, 122, 36, 95, 107, 48, 57, 65, 
	90, 97, 122, 36, 95, 101, 48, 57, 
	65, 90, 97, 122, 36, 95, 97, 48, 
	57, 65, 90, 98, 122, 36, 95, 107, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	108, 111, 48, 57, 65, 90, 97, 122, 
	36, 95, 97, 48, 57, 65, 90, 98, 
	122, 36, 95, 115, 48, 57, 65, 90, 
	97, 122, 36, 95, 115, 48, 57, 65, 
	90, 97, 122, 36, 95, 110, 48, 57, 
	65, 90, 97, 122, 36, 95, 110, 115, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	101, 48, 57, 65, 90, 97, 122, 36, 
	95, 99, 48, 57, 65, 90, 97, 122, 
	36, 95, 116, 48, 57, 65, 90, 97, 
	122, 36, 95, 111, 48, 57, 65, 90, 
	97, 122, 36, 95, 114, 48, 57, 65, 
	90, 97, 122, 36, 95, 116, 48, 57, 
	65, 90, 97, 122, 36, 95, 97, 114, 
	48, 57, 65, 90, 98, 122, 36, 95, 
	110, 48, 57, 65, 90, 97, 122, 36, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	36, 95, 97, 48, 57, 65, 90, 98, 
	122, 36, 95, 105, 48, 57, 65, 90, 
	97, 122, 36, 95, 110, 48, 57, 65, 
	90, 97, 122, 36, 95, 101, 48, 57, 
	65, 90, 97, 122, 36, 95, 100, 48, 
	57, 65, 90, 97, 122, 36, 95, 98, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	121, 48, 57, 65, 90, 97, 122, 36, 
	95, 101, 105, 48, 57, 65, 90, 97, 
	122, 36, 95, 114, 48, 57, 65, 90, 
	97, 122, 36, 95, 115, 48, 57, 65, 
	90, 97, 122, 36, 95, 99, 48, 57, 
	65, 90, 97, 122, 36, 95, 114, 48, 
	57, 65, 90, 97, 122, 36, 95, 101, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	116, 48, 57, 65, 90, 97, 122, 36, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	36, 95, 97, 108, 110, 113, 120, 48, 
	57, 65, 90, 98, 122, 36, 95, 99, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	104, 48, 57, 65, 90, 97, 122, 36, 
	95, 115, 48, 57, 65, 90, 97, 122, 
	36, 95, 101, 48, 57, 65, 90, 97, 
	122, 36, 95, 105, 119, 48, 57, 65, 
	90, 97, 122, 36, 95, 102, 48, 57, 
	65, 90, 97, 122, 36, 95, 104, 48, 
	57, 65, 90, 97, 122, 36, 95, 101, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	110, 48, 57, 65, 90, 97, 122, 36, 
	95, 99, 100, 117, 48, 57, 65, 90, 
	97, 122, 36, 95, 97, 48, 57, 65, 
	90, 98, 122, 36, 95, 112, 48, 57, 
	65, 90, 97, 122, 36, 95, 115, 48, 
	57, 65, 90, 97, 122, 36, 95, 117, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	108, 48, 57, 65, 90, 97, 122, 36, 
	95, 97, 48, 57, 65, 90, 98, 122, 
	36, 95, 116, 48, 57, 65, 90, 97, 
	122, 36, 95, 101, 48, 57, 65, 90, 
	97, 122, 36, 95, 100, 48, 57, 65, 
	90, 97, 122, 36, 95, 109, 48, 57, 
	65, 90, 97, 122, 36, 95, 101, 48, 
	57, 65, 90, 97, 122, 36, 95, 114, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	97, 48, 57, 65, 90, 98, 122, 36, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	36, 95, 105, 48, 57, 65, 90, 97, 
	122, 36, 95, 111, 48, 57, 65, 90, 
	97, 122, 36, 95, 110, 48, 57, 65, 
	90, 97, 122, 36, 95, 117, 48, 57, 
	65, 90, 97, 122, 36, 95, 97, 48, 
	57, 65, 90, 98, 122, 36, 95, 116, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	105, 48, 57, 65, 90, 97, 122, 36, 
	95, 111, 48, 57, 65, 90, 97, 122, 
	36, 95, 110, 48, 57, 65, 90, 97, 
	122, 36, 95, 112, 116, 48, 57, 65, 
	90, 97, 122, 36, 95, 97, 48, 57, 
	65, 90, 98, 122, 36, 95, 110, 48, 
	57, 65, 90, 97, 122, 36, 95, 100, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	97, 48, 57, 65, 90, 98, 122, 36, 
	95, 98, 48, 57, 65, 90, 97, 122, 
	36, 95, 108, 48, 57, 65, 90, 97, 
	122, 36, 95, 101, 48, 57, 65, 90, 
	97, 122, 36, 95, 101, 48, 57, 65, 
	90, 97, 122, 36, 95, 110, 114, 48, 
	57, 65, 90, 97, 122, 36, 95, 100, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	115, 48, 57, 65, 90, 97, 122, 36, 
	95, 110, 48, 57, 65, 90, 97, 122, 
	36, 95, 97, 48, 57, 65, 90, 98, 
	122, 36, 95, 108, 48, 57, 65, 90, 
	97, 122, 36, 95, 97, 105, 108, 111, 
	117, 48, 57, 65, 90, 98, 122, 36, 
	95, 108, 48, 57, 65, 90, 97, 122, 
	36, 95, 115, 48, 57, 65, 90, 97, 
	122, 36, 95, 101, 48, 57, 65, 90, 
	97, 122, 36, 95, 110, 48, 57, 65, 
	90, 97, 122, 36, 95, 97, 48, 57, 
	65, 90, 98, 122, 36, 95, 108, 48, 
	57, 65, 90, 97, 122, 36, 95, 111, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	119, 48, 57, 65, 90, 97, 122, 36, 
	95, 114, 48, 57, 65, 90, 97, 122, 
	36, 95, 110, 48, 57, 65, 90, 97, 
	122, 36, 95, 99, 48, 57, 65, 90, 
	97, 122, 36, 95, 116, 48, 57, 65, 
	90, 97, 122, 36, 95, 105, 48, 57, 
	65, 90, 97, 122, 36, 95, 111, 48, 
	57, 65, 90, 97, 122, 36, 95, 110, 
	48, 57, 65, 90, 97, 122, 36, 39, 
	95, 97, 101, 102, 105, 108, 109, 110, 
	116, 48, 57, 65, 90, 98, 122, 36, 
	95, 112, 48, 57, 65, 90, 97, 122, 
	36, 95, 111, 117, 48, 57, 65, 90, 
	97, 122, 36, 95, 114, 48, 57, 65, 
	90, 97, 122, 36, 95, 116, 48, 57, 
	65, 90, 97, 122, 36, 95, 114, 48, 
	57, 65, 90, 97, 122, 36, 95, 101, 
	48, 57, 65, 90, 97, 122, 36, 39, 
	95, 97, 101, 105, 108, 110, 112, 116, 
	48, 57, 65, 90, 98, 122, 36, 39, 
	95, 97, 101, 105, 108, 110, 116, 48, 
	57, 65, 90, 98, 122, 36, 95, 113, 
	114, 48, 57, 65, 90, 97, 122, 36, 
	95, 117, 48, 57, 65, 90, 97, 122, 
	36, 95, 116, 48, 57, 65, 90, 97, 
	122, 36, 39, 95, 97, 101, 105, 108, 
	110, 111, 116, 48, 57, 65, 90, 98, 
	122, 36, 95, 111, 48, 57, 65, 90, 
	97, 122, 36, 95, 112, 48, 57, 65, 
	90, 97, 122, 36, 95, 111, 48, 57, 
	65, 90, 97, 122, 36, 95, 100, 48, 
	57, 65, 90, 97, 122, 36, 95, 101, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	108, 48, 57, 65, 90, 97, 122, 36, 
	39, 95, 97, 101, 105, 108, 110, 111, 
	116, 48, 57, 65, 90, 98, 122, 36, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	36, 95, 112, 114, 117, 48, 57, 65, 
	90, 97, 122, 36, 95, 101, 48, 57, 
	65, 90, 97, 122, 36, 95, 114, 48, 
	57, 65, 90, 97, 122, 36, 95, 97, 
	48, 57, 65, 90, 98, 122, 36, 95, 
	116, 48, 57, 65, 90, 97, 122, 36, 
	95, 111, 48, 57, 65, 90, 97, 122, 
	36, 95, 114, 48, 57, 65, 90, 97, 
	122, 36, 95, 116, 48, 57, 65, 90, 
	97, 122, 36, 95, 101, 112, 48, 57, 
	65, 90, 97, 122, 36, 95, 114, 48, 
	57, 65, 90, 97, 122, 36, 95, 117, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	116, 48, 57, 65, 90, 97, 122, 36, 
	95, 97, 114, 117, 48, 57, 65, 90, 
	98, 122, 36, 95, 99, 114, 48, 57, 
	65, 90, 97, 122, 36, 95, 107, 48, 
	57, 65, 90, 97, 122, 36, 95, 97, 
	48, 57, 65, 90, 98, 122, 36, 95, 
	103, 48, 57, 65, 90, 97, 122, 36, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	36, 95, 97, 116, 48, 57, 65, 90, 
	98, 122, 36, 95, 109, 48, 57, 65, 
	90, 97, 122, 36, 95, 101, 48, 57, 
	65, 90, 97, 122, 36, 95, 116, 48, 
	57, 65, 90, 97, 122, 36, 95, 101, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	114, 48, 57, 65, 90, 97, 122, 36, 
	95, 105, 48, 57, 65, 90, 97, 122, 
	36, 95, 97, 48, 57, 65, 90, 98, 
	122, 36, 95, 108, 48, 57, 65, 90, 
	97, 122, 36, 95, 111, 48, 57, 65, 
	90, 97, 122, 36, 95, 116, 48, 57, 
	65, 90, 97, 122, 36, 95, 101, 48, 
	57, 65, 90, 97, 122, 36, 95, 99, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	116, 48, 57, 65, 90, 97, 122, 36, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	36, 95, 100, 48, 57, 65, 90, 97, 
	122, 36, 95, 98, 114, 48, 57, 65, 
	90, 97, 122, 36, 95, 108, 48, 57, 
	65, 90, 97, 122, 36, 95, 105, 48, 
	57, 65, 90, 97, 122, 36, 95, 99, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	101, 48, 57, 65, 90, 97, 122, 36, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	36, 95, 99, 100, 112, 116, 48, 57, 
	65, 90, 97, 122, 36, 95, 111, 48, 
	57, 65, 90, 97, 122, 36, 95, 114, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	100, 48, 57, 65, 90, 97, 122, 36, 
	95, 101, 48, 57, 65, 90, 97, 122, 
	36, 95, 99, 48, 57, 65, 90, 97, 
	122, 36, 95, 108, 48, 57, 65, 90, 
	97, 122, 36, 95, 97, 48, 57, 65, 
	90, 98, 122, 36, 95, 114, 48, 57, 
	65, 90, 97, 122, 36, 95, 101, 48, 
	57, 65, 90, 97, 122, 36, 95, 108, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	97, 48, 57, 65, 90, 98, 122, 36, 
	95, 99, 48, 57, 65, 90, 97, 122, 
	36, 95, 97, 48, 57, 65, 90, 98, 
	122, 36, 95, 98, 48, 57, 65, 90, 
	97, 122, 36, 95, 108, 48, 57, 65, 
	90, 97, 122, 36, 95, 101, 48, 57, 
	65, 90, 97, 122, 36, 95, 117, 48, 
	57, 65, 90, 97, 122, 36, 95, 114, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	110, 48, 57, 65, 90, 97, 122, 36, 
	95, 116, 48, 57, 65, 90, 97, 122, 
	36, 95, 114, 48, 57, 65, 90, 97, 
	122, 36, 95, 101, 48, 57, 65, 90, 
	97, 122, 36, 95, 97, 48, 57, 65, 
	90, 98, 122, 36, 95, 109, 48, 57, 
	65, 90, 97, 122, 36, 39, 95, 97, 
	101, 104, 105, 108, 110, 114, 116, 121, 
	48, 57, 65, 90, 98, 122, 36, 95, 
	101, 48, 57, 65, 90, 97, 122, 36, 
	95, 110, 48, 57, 65, 90, 97, 122, 
	36, 95, 117, 48, 57, 65, 90, 97, 
	122, 36, 95, 101, 48, 57, 65, 90, 
	97, 122, 36, 95, 112, 48, 57, 65, 
	90, 97, 122, 36, 95, 101, 48, 57, 
	65, 90, 97, 122, 36, 95, 104, 105, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	101, 105, 48, 57, 65, 90, 97, 122, 
	36, 95, 110, 48, 57, 65, 90, 97, 
	122, 36, 95, 108, 48, 57, 65, 90, 
	97, 122, 36, 95, 101, 48, 57, 65, 
	90, 97, 122, 36, 95, 116, 48, 57, 
	65, 90, 97, 122, 36, 95, 104, 48, 
	57, 65, 90, 97, 122, 36, 95, 105, 
	48, 57, 65, 90, 97, 122, 36, 95, 
	110, 48, 57, 65, 90, 97, 122, 0
};

static const char _umodLexer_single_lengths[] = {
	2, 2, 2, 2, 7, 7, 1, 1, 
	1, 1, 1, 1, 1, 8, 1, 1, 
	1, 1, 1, 1, 8, 3, 3, 3, 
	3, 3, 3, 3, 8, 9, 3, 3, 
	3, 3, 3, 3, 0, 2, 0, 1, 
	2, 42, 2, 2, 2, 8, 2, 7, 
	1, 2, 0, 5, 2, 1, 3, 1, 
	2, 1, 1, 9, 9, 3, 3, 3, 
	3, 3, 3, 3, 9, 10, 3, 3, 
	3, 3, 3, 3, 10, 3, 3, 3, 
	3, 3, 3, 10, 10, 3, 3, 3, 
	3, 3, 3, 4, 3, 3, 3, 3, 
	3, 3, 4, 3, 3, 3, 3, 4, 
	3, 3, 3, 3, 3, 3, 4, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	4, 3, 3, 3, 3, 3, 3, 3, 
	7, 3, 3, 3, 3, 4, 3, 3, 
	3, 3, 5, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 4, 3, 3, 3, 3, 3, 
	3, 3, 3, 4, 3, 3, 3, 3, 
	3, 7, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 11, 3, 4, 3, 3, 3, 3, 
	10, 9, 4, 3, 3, 10, 3, 3, 
	3, 3, 3, 3, 10, 3, 5, 3, 
	3, 3, 3, 3, 3, 3, 4, 3, 
	3, 3, 5, 4, 3, 3, 3, 3, 
	4, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	4, 3, 3, 3, 3, 3, 6, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 12, 
	3, 3, 3, 3, 3, 3, 4, 4, 
	3, 3, 3, 3, 3, 3, 3
};

static const char _umodLexer_range_lengths[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 1, 0, 
	0, 3, 0, 0, 3, 0, 0, 0, 
	1, 1, 1, 1, 0, 0, 1, 0, 
	0, 0, 0, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3
};

static const short _umodLexer_index_offsets[] = {
	0, 3, 6, 9, 12, 20, 28, 30, 
	32, 34, 36, 38, 40, 42, 51, 53, 
	55, 57, 59, 61, 63, 72, 76, 80, 
	84, 88, 92, 96, 100, 109, 119, 123, 
	127, 131, 135, 139, 143, 145, 149, 151, 
	153, 156, 202, 205, 208, 214, 223, 226, 
	234, 237, 241, 243, 250, 253, 255, 260, 
	262, 265, 267, 269, 282, 295, 302, 309, 
	316, 323, 330, 337, 344, 357, 371, 378, 
	385, 392, 399, 406, 413, 427, 434, 441, 
	448, 455, 462, 469, 483, 497, 504, 511, 
	518, 525, 532, 539, 547, 554, 561, 568, 
	575, 582, 589, 597, 604, 611, 618, 625, 
	633, 640, 647, 654, 661, 668, 675, 683, 
	690, 697, 704, 711, 718, 725, 732, 739, 
	746, 754, 761, 768, 775, 782, 789, 796, 
	803, 814, 821, 828, 835, 842, 850, 857, 
	864, 871, 878, 887, 894, 901, 908, 915, 
	922, 929, 936, 943, 950, 957, 964, 971, 
	978, 985, 992, 999, 1006, 1013, 1020, 1027, 
	1034, 1041, 1048, 1056, 1063, 1070, 1077, 1084, 
	1091, 1098, 1105, 1112, 1120, 1127, 1134, 1141, 
	1148, 1155, 1166, 1173, 1180, 1187, 1194, 1201, 
	1208, 1215, 1222, 1229, 1236, 1243, 1250, 1257, 
	1264, 1271, 1286, 1293, 1301, 1308, 1315, 1322, 
	1329, 1343, 1356, 1364, 1371, 1378, 1392, 1399, 
	1406, 1413, 1420, 1427, 1434, 1448, 1455, 1464, 
	1471, 1478, 1485, 1492, 1499, 1506, 1513, 1521, 
	1528, 1535, 1542, 1551, 1559, 1566, 1573, 1580, 
	1587, 1595, 1602, 1609, 1616, 1623, 1630, 1637, 
	1644, 1651, 1658, 1665, 1672, 1679, 1686, 1693, 
	1700, 1708, 1715, 1722, 1729, 1736, 1743, 1753, 
	1760, 1767, 1774, 1781, 1788, 1795, 1802, 1809, 
	1816, 1823, 1830, 1837, 1844, 1851, 1858, 1865, 
	1872, 1879, 1886, 1893, 1900, 1907, 1914, 1921, 
	1937, 1944, 1951, 1958, 1965, 1972, 1979, 1987, 
	1995, 2002, 2009, 2016, 2023, 2030, 2037
};

static const short _umodLexer_indicies[] = {
	2, 3, 1, 4, 3, 1, 2, 6, 
	5, 7, 6, 5, 8, 9, 10, 8, 
	8, 8, 8, 0, 8, 9, 10, 8, 
	11, 8, 8, 0, 12, 0, 13, 0, 
	14, 0, 15, 0, 16, 0, 17, 0, 
	18, 0, 8, 9, 10, 19, 8, 8, 
	8, 8, 0, 20, 0, 21, 0, 22, 
	0, 23, 0, 24, 0, 25, 0, 27, 
	6, 28, 29, 30, 31, 30, 30, 5, 
	2, 6, 32, 5, 2, 6, 33, 5, 
	2, 6, 34, 5, 2, 6, 35, 5, 
	2, 6, 36, 5, 2, 6, 37, 5, 
	2, 6, 38, 5, 27, 6, 28, 29, 
	30, 30, 30, 30, 5, 27, 6, 28, 
	29, 39, 30, 30, 30, 30, 5, 2, 
	6, 40, 5, 2, 6, 41, 5, 2, 
	6, 42, 5, 2, 6, 43, 5, 2, 
	6, 44, 5, 2, 6, 45, 5, 46, 
	0, 47, 47, 48, 0, 48, 0, 51, 
	50, 51, 52, 50, 54, 55, 55, 54, 
	56, 57, 58, 59, 60, 61, 62, 63, 
	64, 65, 66, 68, 69, 70, 71, 72, 
	73, 74, 75, 57, 76, 77, 78, 79, 
	80, 81, 82, 83, 84, 85, 86, 87, 
	88, 89, 90, 91, 92, 93, 67, 57, 
	57, 53, 54, 54, 94, 2, 3, 1, 
	57, 57, 57, 57, 57, 0, 27, 6, 
	28, 29, 30, 30, 30, 30, 5, 2, 
	6, 5, 8, 9, 10, 8, 8, 8, 
	8, 96, 97, 98, 0, 100, 100, 46, 
	99, 48, 99, 102, 103, 104, 105, 106, 
	46, 101, 50, 108, 107, 109, 108, 46, 
	100, 100, 67, 110, 112, 111, 114, 115, 
	113, 117, 116, 119, 118, 57, 8, 57, 
	121, 122, 123, 124, 125, 123, 57, 57, 
	57, 120, 57, 8, 57, 121, 122, 123, 
	126, 123, 123, 57, 57, 57, 120, 57, 
	57, 127, 57, 57, 57, 120, 57, 57, 
	128, 57, 57, 57, 120, 57, 57, 129, 
	57, 57, 57, 120, 57, 57, 130, 57, 
	57, 57, 120, 57, 57, 131, 57, 57, 
	57, 120, 57, 57, 132, 57, 57, 57, 
	120, 57, 57, 133, 57, 57, 57, 120, 
	57, 8, 57, 121, 122, 123, 123, 123, 
	123, 57, 57, 57, 120, 57, 8, 57, 
	121, 122, 134, 123, 123, 123, 123, 57, 
	57, 57, 120, 57, 57, 135, 57, 57, 
	57, 120, 57, 57, 136, 57, 57, 57, 
	120, 57, 57, 137, 57, 57, 57, 120, 
	57, 57, 138, 57, 57, 57, 120, 57, 
	57, 139, 57, 57, 57, 120, 57, 57, 
	140, 57, 57, 57, 120, 57, 8, 57, 
	121, 122, 141, 123, 123, 123, 123, 57, 
	57, 57, 120, 57, 57, 142, 57, 57, 
	57, 120, 57, 57, 143, 57, 57, 57, 
	120, 57, 57, 144, 57, 57, 57, 120, 
	57, 57, 145, 57, 57, 57, 120, 57, 
	57, 146, 57, 57, 57, 120, 57, 57, 
	140, 57, 57, 57, 120, 57, 8, 57, 
	121, 147, 122, 123, 123, 148, 123, 57, 
	57, 57, 120, 57, 8, 57, 121, 122, 
	123, 123, 123, 149, 123, 57, 57, 57, 
	120, 57, 57, 150, 57, 57, 57, 120, 
	57, 57, 151, 57, 57, 57, 120, 57, 
	57, 152, 57, 57, 57, 120, 57, 57, 
	153, 57, 57, 57, 120, 57, 57, 154, 
	57, 57, 57, 120, 57, 57, 155, 57, 
	57, 57, 120, 57, 57, 156, 157, 57, 
	57, 57, 120, 57, 57, 158, 57, 57, 
	57, 120, 57, 57, 159, 57, 57, 57, 
	120, 57, 57, 160, 57, 57, 57, 120, 
	57, 57, 161, 57, 57, 57, 120, 57, 
	57, 162, 57, 57, 57, 120, 57, 57, 
	163, 57, 57, 57, 120, 57, 57, 164, 
	165, 57, 57, 57, 120, 57, 57, 166, 
	57, 57, 57, 120, 57, 57, 167, 57, 
	57, 57, 120, 57, 57, 168, 57, 57, 
	57, 120, 57, 57, 169, 57, 57, 57, 
	120, 57, 57, 170, 171, 57, 57, 57, 
	120, 57, 57, 172, 57, 57, 57, 120, 
	57, 57, 173, 57, 57, 57, 120, 57, 
	57, 174, 57, 57, 57, 120, 57, 57, 
	176, 57, 57, 57, 175, 57, 57, 177, 
	57, 57, 57, 120, 57, 57, 178, 57, 
	57, 57, 120, 57, 57, 179, 180, 57, 
	57, 57, 120, 57, 57, 181, 57, 57, 
	57, 120, 57, 57, 182, 57, 57, 57, 
	120, 57, 57, 183, 57, 57, 57, 120, 
	57, 57, 184, 57, 57, 57, 120, 57, 
	57, 185, 57, 57, 57, 120, 57, 57, 
	186, 57, 57, 57, 120, 57, 57, 187, 
	57, 57, 57, 120, 57, 57, 188, 57, 
	57, 57, 120, 57, 57, 189, 57, 57, 
	57, 120, 57, 57, 190, 191, 57, 57, 
	57, 120, 57, 57, 192, 57, 57, 57, 
	120, 57, 57, 193, 57, 57, 57, 120, 
	57, 57, 194, 57, 57, 57, 120, 57, 
	57, 195, 57, 57, 57, 120, 57, 57, 
	196, 57, 57, 57, 120, 57, 57, 197, 
	57, 57, 57, 120, 57, 57, 198, 57, 
	57, 57, 120, 57, 57, 199, 200, 201, 
	202, 203, 57, 57, 57, 120, 57, 57, 
	204, 57, 57, 57, 120, 57, 57, 205, 
	57, 57, 57, 120, 57, 57, 206, 57, 
	57, 57, 120, 57, 57, 207, 57, 57, 
	57, 120, 57, 57, 209, 210, 57, 57, 
	57, 208, 57, 57, 211, 57, 57, 57, 
	120, 57, 57, 212, 57, 57, 57, 120, 
	57, 57, 213, 57, 57, 57, 120, 57, 
	57, 214, 57, 57, 57, 120, 57, 57, 
	215, 216, 217, 57, 57, 57, 120, 57, 
	57, 218, 57, 57, 57, 120, 57, 57, 
	219, 57, 57, 57, 120, 57, 57, 220, 
	57, 57, 57, 120, 57, 57, 221, 57, 
	57, 57, 120, 57, 57, 222, 57, 57, 
	57, 120, 57, 57, 223, 57, 57, 57, 
	120, 57, 57, 224, 57, 57, 57, 120, 
	57, 57, 225, 57, 57, 57, 120, 57, 
	57, 226, 57, 57, 57, 120, 57, 57, 
	227, 57, 57, 57, 120, 57, 57, 228, 
	57, 57, 57, 120, 57, 57, 229, 57, 
	57, 57, 120, 57, 57, 230, 57, 57, 
	57, 120, 57, 57, 231, 57, 57, 57, 
	120, 57, 57, 232, 57, 57, 57, 120, 
	57, 57, 233, 57, 57, 57, 120, 57, 
	57, 234, 57, 57, 57, 120, 57, 57, 
	235, 57, 57, 57, 120, 57, 57, 236, 
	57, 57, 57, 120, 57, 57, 237, 57, 
	57, 57, 120, 57, 57, 238, 57, 57, 
	57, 120, 57, 57, 239, 57, 57, 57, 
	120, 57, 57, 133, 57, 57, 57, 120, 
	57, 57, 240, 241, 57, 57, 57, 120, 
	57, 57, 242, 57, 57, 57, 120, 57, 
	57, 243, 57, 57, 57, 120, 57, 57, 
	244, 57, 57, 57, 120, 57, 57, 245, 
	57, 57, 57, 120, 57, 57, 246, 57, 
	57, 57, 120, 57, 57, 247, 57, 57, 
	57, 120, 57, 57, 248, 57, 57, 57, 
	120, 57, 57, 249, 57, 57, 57, 120, 
	57, 57, 250, 251, 57, 57, 57, 120, 
	57, 57, 252, 57, 57, 57, 120, 57, 
	57, 253, 57, 57, 57, 120, 57, 57, 
	254, 57, 57, 57, 120, 57, 57, 255, 
	57, 57, 57, 120, 57, 57, 256, 57, 
	57, 57, 120, 57, 57, 257, 258, 259, 
	260, 261, 57, 57, 57, 120, 57, 57, 
	262, 57, 57, 57, 120, 57, 57, 263, 
	57, 57, 57, 120, 57, 57, 264, 57, 
	57, 57, 120, 57, 57, 265, 57, 57, 
	57, 120, 57, 57, 266, 57, 57, 57, 
	120, 57, 57, 267, 57, 57, 57, 120, 
	57, 57, 268, 57, 57, 57, 120, 57, 
	57, 269, 57, 57, 57, 120, 57, 57, 
	270, 57, 57, 57, 120, 57, 57, 271, 
	57, 57, 57, 120, 57, 57, 272, 57, 
	57, 57, 120, 57, 57, 273, 57, 57, 
	57, 120, 57, 57, 274, 57, 57, 57, 
	120, 57, 57, 275, 57, 57, 57, 120, 
	57, 57, 276, 57, 57, 57, 120, 57, 
	8, 57, 121, 122, 277, 123, 123, 278, 
	279, 123, 57, 57, 57, 120, 57, 57, 
	280, 57, 57, 57, 120, 57, 57, 281, 
	282, 57, 57, 57, 120, 57, 57, 283, 
	57, 57, 57, 120, 57, 57, 284, 57, 
	57, 57, 120, 57, 57, 285, 57, 57, 
	57, 120, 57, 57, 286, 57, 57, 57, 
	120, 57, 8, 57, 121, 122, 123, 123, 
	288, 289, 123, 57, 57, 57, 287, 57, 
	8, 57, 121, 290, 123, 123, 123, 123, 
	57, 57, 57, 120, 57, 57, 127, 291, 
	57, 57, 57, 120, 57, 57, 292, 57, 
	57, 57, 120, 57, 57, 293, 57, 57, 
	57, 120, 57, 8, 57, 121, 122, 123, 
	123, 123, 294, 123, 57, 57, 57, 120, 
	57, 57, 295, 57, 57, 57, 120, 57, 
	57, 296, 57, 57, 57, 120, 57, 57, 
	297, 57, 57, 57, 120, 57, 57, 298, 
	57, 57, 57, 120, 57, 57, 299, 57, 
	57, 57, 120, 57, 57, 300, 57, 57, 
	57, 120, 57, 8, 57, 121, 122, 123, 
	123, 123, 301, 123, 57, 57, 57, 120, 
	57, 57, 302, 57, 57, 57, 120, 57, 
	57, 303, 304, 305, 57, 57, 57, 120, 
	57, 57, 306, 57, 57, 57, 120, 57, 
	57, 307, 57, 57, 57, 120, 57, 57, 
	308, 57, 57, 57, 120, 57, 57, 309, 
	57, 57, 57, 120, 57, 57, 310, 57, 
	57, 57, 120, 57, 57, 311, 57, 57, 
	57, 120, 57, 57, 312, 57, 57, 57, 
	120, 57, 57, 313, 314, 57, 57, 57, 
	120, 57, 57, 315, 57, 57, 57, 120, 
	57, 57, 316, 57, 57, 57, 120, 57, 
	57, 317, 57, 57, 57, 120, 57, 57, 
	318, 319, 320, 57, 57, 57, 120, 57, 
	57, 321, 322, 57, 57, 57, 120, 57, 
	57, 323, 57, 57, 57, 120, 57, 57, 
	324, 57, 57, 57, 120, 57, 57, 325, 
	57, 57, 57, 120, 57, 57, 326, 57, 
	57, 57, 120, 57, 57, 327, 328, 57, 
	57, 57, 120, 57, 57, 329, 57, 57, 
	57, 120, 57, 57, 330, 57, 57, 57, 
	120, 57, 57, 331, 57, 57, 57, 120, 
	57, 57, 332, 57, 57, 57, 120, 57, 
	57, 333, 57, 57, 57, 120, 57, 57, 
	334, 57, 57, 57, 120, 57, 57, 335, 
	57, 57, 57, 120, 57, 57, 336, 57, 
	57, 57, 120, 57, 57, 337, 57, 57, 
	57, 120, 57, 57, 338, 57, 57, 57, 
	120, 57, 57, 339, 57, 57, 57, 120, 
	57, 57, 340, 57, 57, 57, 120, 57, 
	57, 341, 57, 57, 57, 120, 57, 57, 
	342, 57, 57, 57, 120, 57, 57, 343, 
	57, 57, 57, 120, 57, 57, 344, 345, 
	57, 57, 57, 120, 57, 57, 346, 57, 
	57, 57, 120, 57, 57, 347, 57, 57, 
	57, 120, 57, 57, 348, 57, 57, 57, 
	120, 57, 57, 349, 57, 57, 57, 120, 
	57, 57, 350, 57, 57, 57, 120, 57, 
	57, 351, 352, 353, 354, 57, 57, 57, 
	120, 57, 57, 355, 57, 57, 57, 120, 
	57, 57, 356, 57, 57, 57, 120, 57, 
	57, 357, 57, 57, 57, 120, 57, 57, 
	358, 57, 57, 57, 120, 57, 57, 359, 
	57, 57, 57, 120, 57, 57, 360, 57, 
	57, 57, 120, 57, 57, 361, 57, 57, 
	57, 120, 57, 57, 362, 57, 57, 57, 
	120, 57, 57, 363, 57, 57, 57, 120, 
	57, 57, 364, 57, 57, 57, 120, 57, 
	57, 365, 57, 57, 57, 120, 57, 57, 
	366, 57, 57, 57, 120, 57, 57, 367, 
	57, 57, 57, 120, 57, 57, 368, 57, 
	57, 57, 120, 57, 57, 369, 57, 57, 
	57, 120, 57, 57, 370, 57, 57, 57, 
	120, 57, 57, 371, 57, 57, 57, 120, 
	57, 57, 372, 57, 57, 57, 120, 57, 
	57, 373, 57, 57, 57, 120, 57, 57, 
	374, 57, 57, 57, 120, 57, 57, 375, 
	57, 57, 57, 120, 57, 57, 376, 57, 
	57, 57, 120, 57, 57, 377, 57, 57, 
	57, 120, 57, 57, 378, 57, 57, 57, 
	120, 57, 8, 57, 121, 122, 379, 123, 
	123, 123, 380, 123, 381, 57, 57, 57, 
	120, 57, 57, 382, 57, 57, 57, 120, 
	57, 57, 383, 57, 57, 57, 120, 57, 
	57, 384, 57, 57, 57, 120, 57, 57, 
	385, 57, 57, 57, 120, 57, 57, 386, 
	57, 57, 57, 120, 57, 57, 387, 57, 
	57, 57, 120, 57, 57, 388, 389, 57, 
	57, 57, 120, 57, 57, 390, 391, 57, 
	57, 57, 120, 57, 57, 392, 57, 57, 
	57, 120, 57, 57, 393, 57, 57, 57, 
	120, 57, 57, 394, 57, 57, 57, 120, 
	57, 57, 395, 57, 57, 57, 120, 57, 
	57, 396, 57, 57, 57, 120, 57, 57, 
	397, 57, 57, 57, 120, 57, 57, 398, 
	57, 57, 57, 120, 0
};

static const short _umodLexer_trans_targs[] = {
	41, 0, 41, 1, 43, 2, 3, 46, 
	4, 5, 6, 13, 7, 8, 9, 10, 
	11, 12, 41, 14, 15, 16, 17, 18, 
	19, 41, 41, 47, 20, 21, 28, 29, 
	22, 23, 24, 25, 26, 27, 46, 30, 
	31, 32, 33, 34, 35, 46, 49, 38, 
	50, 41, 39, 40, 41, 41, 42, 41, 
	43, 44, 45, 41, 41, 41, 48, 41, 
	48, 51, 52, 54, 55, 41, 56, 57, 
	58, 41, 41, 41, 59, 91, 98, 120, 
	128, 177, 193, 205, 208, 212, 214, 226, 
	253, 274, 279, 286, 41, 41, 41, 41, 
	41, 36, 48, 41, 37, 41, 41, 41, 
	41, 41, 41, 41, 53, 41, 41, 41, 
	41, 41, 41, 41, 41, 41, 41, 41, 
	41, 60, 61, 68, 76, 83, 69, 62, 
	63, 64, 65, 66, 67, 44, 70, 71, 
	72, 73, 74, 75, 44, 77, 78, 79, 
	80, 81, 82, 44, 84, 85, 86, 87, 
	88, 89, 90, 44, 92, 95, 93, 94, 
	44, 96, 97, 44, 99, 102, 100, 101, 
	44, 103, 104, 109, 105, 106, 107, 41, 
	108, 44, 110, 111, 113, 112, 44, 114, 
	115, 116, 117, 118, 119, 44, 121, 122, 
	44, 123, 124, 125, 126, 127, 44, 129, 
	131, 138, 156, 162, 130, 44, 132, 133, 
	41, 134, 135, 44, 136, 137, 44, 139, 
	44, 148, 140, 141, 142, 143, 144, 145, 
	146, 147, 44, 149, 150, 151, 152, 153, 
	154, 155, 44, 157, 158, 159, 160, 161, 
	163, 170, 164, 165, 166, 167, 168, 169, 
	44, 171, 172, 174, 173, 44, 175, 176, 
	44, 178, 181, 184, 186, 187, 179, 180, 
	44, 182, 183, 44, 185, 44, 44, 188, 
	189, 190, 191, 192, 44, 44, 194, 200, 
	195, 196, 198, 197, 44, 199, 44, 41, 
	201, 203, 202, 44, 204, 44, 206, 207, 
	44, 209, 210, 211, 44, 213, 44, 215, 
	44, 221, 216, 217, 218, 219, 220, 44, 
	222, 223, 224, 44, 225, 44, 227, 241, 
	248, 228, 232, 229, 230, 231, 44, 233, 
	238, 234, 235, 236, 237, 44, 239, 240, 
	44, 242, 243, 244, 245, 246, 247, 44, 
	249, 252, 250, 251, 44, 44, 254, 255, 
	258, 264, 271, 256, 257, 44, 259, 260, 
	261, 262, 263, 44, 265, 266, 267, 268, 
	269, 270, 44, 272, 273, 44, 275, 276, 
	277, 278, 44, 280, 282, 284, 281, 44, 
	283, 44, 285, 44, 287, 291, 288, 289, 
	44, 290, 44, 292, 293, 294, 44
};

static const short _umodLexer_trans_actions[] = {
	95, 0, 53, 0, 277, 0, 0, 277, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 49, 0, 0, 0, 0, 0, 
	0, 47, 93, 277, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 106, 0, 
	0, 0, 0, 0, 0, 103, 274, 0, 
	0, 91, 0, 0, 55, 57, 0, 51, 
	283, 280, 283, 17, 19, 37, 97, 11, 
	100, 0, 5, 271, 0, 9, 0, 0, 
	0, 25, 27, 15, 280, 0, 0, 0, 
	0, 0, 280, 280, 0, 280, 0, 0, 
	0, 0, 280, 0, 21, 23, 77, 89, 
	83, 0, 271, 81, 0, 61, 33, 29, 
	31, 35, 13, 63, 0, 87, 79, 69, 
	45, 65, 41, 39, 59, 7, 67, 43, 
	85, 280, 0, 280, 280, 280, 280, 0, 
	0, 0, 0, 0, 0, 106, 0, 0, 
	0, 0, 0, 0, 103, 0, 0, 0, 
	0, 0, 0, 109, 280, 0, 0, 0, 
	0, 0, 0, 112, 0, 0, 0, 0, 
	115, 0, 0, 118, 0, 0, 0, 0, 
	121, 0, 0, 0, 0, 0, 0, 71, 
	0, 124, 0, 0, 0, 0, 127, 0, 
	0, 0, 0, 0, 0, 130, 0, 0, 
	133, 0, 0, 0, 0, 0, 136, 0, 
	0, 0, 0, 0, 0, 139, 0, 0, 
	73, 0, 0, 142, 0, 0, 145, 0, 
	151, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 148, 0, 0, 0, 0, 0, 
	0, 0, 154, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	157, 0, 0, 0, 0, 160, 0, 0, 
	163, 0, 0, 0, 0, 0, 0, 0, 
	166, 0, 0, 169, 0, 172, 175, 0, 
	0, 0, 0, 0, 178, 181, 0, 190, 
	0, 0, 0, 0, 184, 0, 187, 75, 
	280, 0, 0, 193, 0, 196, 0, 0, 
	199, 0, 0, 0, 202, 0, 205, 0, 
	211, 0, 0, 0, 0, 0, 0, 208, 
	0, 0, 0, 214, 0, 217, 0, 0, 
	0, 0, 0, 0, 0, 0, 220, 0, 
	0, 0, 0, 0, 0, 223, 0, 0, 
	226, 0, 0, 0, 0, 0, 0, 229, 
	0, 0, 0, 0, 232, 235, 0, 0, 
	0, 0, 0, 0, 0, 238, 0, 0, 
	0, 0, 0, 241, 0, 0, 0, 0, 
	0, 0, 244, 0, 0, 247, 0, 0, 
	0, 0, 250, 0, 0, 0, 0, 253, 
	0, 256, 0, 259, 0, 0, 0, 0, 
	262, 0, 265, 0, 0, 0, 268
};

static const short _umodLexer_to_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0
};

static const short _umodLexer_from_state_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 3, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0
};

static const short _umodLexer_eof_trans[] = {
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 1, 1, 1, 50, 
	50, 0, 95, 1, 1, 96, 1, 97, 
	1, 100, 100, 102, 108, 110, 111, 112, 
	114, 117, 119, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 176, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 209, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	288, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121, 121, 
	121, 121, 121, 121, 121, 121, 121
};

static const int umodLexer_start = 41;
static const int umodLexer_first_final = 41;
static const int umodLexer_error = -1;

static const int umodLexer_en_main = 41;


#line 13 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"

// no idea about the origins of this value, ask Flori ;)
int EVIL=0x666;

using namespace umod::lex;

Lexer::Lexer(const char *source, unsigned int length)
    : m_source(source)
    , m_source_end(source + length)
    , m_source_eof(m_source_end)
    , m_ts(nullptr), m_te(nullptr)
    , m_current_state(EVIL), m_act(0)
    , m_position(std::make_pair(1, 1))
{

}

Lexer::Lexer(const std::string &source): Lexer(source.c_str(), source.length())
{
}

Lexer::~Lexer()
{

}

Lexeme *Lexer::consume(void)
{
    Lexeme::Type type = Lexeme::Type::EOI;
    
#line 164 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"



    if (m_source == m_source_end)
    {
        m_ts = m_te = m_source;
        type = Lexeme::Type::EOI;
    }
    else
    {
        
#line 175 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
        
#line 176 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
        
#line 177 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
        
#line 178 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
        
#line 179 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
        
#line 180 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
        
#line 181 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"

        
#line 1079 "lexer.cc"
	{
	(  m_current_state) = umodLexer_start;
	(  m_ts) = 0;
	(  m_te) = 0;
	( m_act) = 0;
	}

#line 183 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
        
#line 1089 "lexer.cc"
	{
	int _klen;
	unsigned int _trans;
	const char *_acts;
	unsigned int _nacts;
	const char *_keys;

	if ( (   m_source) == (  m_source_end) )
		goto _test_eof;
_resume:
	_acts = _umodLexer_actions + _umodLexer_from_state_actions[(  m_current_state)];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 1:
#line 1 "NONE"
	{(  m_ts) = (   m_source);}
	break;
#line 1108 "lexer.cc"
		}
	}

	_keys = _umodLexer_trans_keys + _umodLexer_key_offsets[(  m_current_state)];
	_trans = _umodLexer_index_offsets[(  m_current_state)];

	_klen = _umodLexer_single_lengths[(  m_current_state)];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( (*(   m_source)) < *_mid )
				_upper = _mid - 1;
			else if ( (*(   m_source)) > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (unsigned int)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _umodLexer_range_lengths[(  m_current_state)];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( (*(   m_source)) < _mid[0] )
				_upper = _mid - 2;
			else if ( (*(   m_source)) > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += (unsigned int)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	_trans = _umodLexer_indicies[_trans];
_eof_trans:
	(  m_current_state) = _umodLexer_trans_targs[_trans];

	if ( _umodLexer_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _umodLexer_actions + _umodLexer_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 2:
#line 1 "NONE"
	{(  m_te) = (   m_source)+1;}
	break;
	case 3:
#line 81 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 18;}
	break;
	case 4:
#line 82 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 19;}
	break;
	case 5:
#line 93 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 29;}
	break;
	case 6:
#line 94 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 30;}
	break;
	case 7:
#line 96 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 32;}
	break;
	case 8:
#line 97 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 33;}
	break;
	case 9:
#line 98 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 34;}
	break;
	case 10:
#line 99 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 35;}
	break;
	case 11:
#line 100 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 36;}
	break;
	case 12:
#line 102 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 38;}
	break;
	case 13:
#line 103 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 39;}
	break;
	case 14:
#line 104 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 40;}
	break;
	case 15:
#line 105 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 41;}
	break;
	case 16:
#line 106 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 42;}
	break;
	case 17:
#line 107 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 43;}
	break;
	case 18:
#line 109 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 45;}
	break;
	case 19:
#line 110 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 46;}
	break;
	case 20:
#line 111 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 47;}
	break;
	case 21:
#line 112 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 48;}
	break;
	case 22:
#line 114 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 50;}
	break;
	case 23:
#line 116 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 52;}
	break;
	case 24:
#line 117 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 53;}
	break;
	case 25:
#line 118 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 54;}
	break;
	case 26:
#line 119 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 55;}
	break;
	case 27:
#line 120 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 56;}
	break;
	case 28:
#line 121 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 57;}
	break;
	case 29:
#line 122 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 58;}
	break;
	case 30:
#line 123 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 59;}
	break;
	case 31:
#line 124 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 60;}
	break;
	case 32:
#line 125 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 61;}
	break;
	case 33:
#line 126 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 62;}
	break;
	case 34:
#line 127 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 63;}
	break;
	case 35:
#line 128 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 64;}
	break;
	case 36:
#line 129 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 65;}
	break;
	case 37:
#line 130 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 66;}
	break;
	case 38:
#line 131 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 67;}
	break;
	case 39:
#line 132 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 68;}
	break;
	case 40:
#line 133 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 69;}
	break;
	case 41:
#line 134 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 70;}
	break;
	case 42:
#line 135 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 71;}
	break;
	case 43:
#line 136 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 72;}
	break;
	case 44:
#line 137 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 73;}
	break;
	case 45:
#line 138 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 74;}
	break;
	case 46:
#line 139 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 75;}
	break;
	case 47:
#line 140 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 76;}
	break;
	case 48:
#line 141 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 77;}
	break;
	case 49:
#line 142 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 78;}
	break;
	case 50:
#line 143 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 79;}
	break;
	case 51:
#line 144 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 80;}
	break;
	case 52:
#line 145 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 81;}
	break;
	case 53:
#line 146 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 82;}
	break;
	case 54:
#line 147 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 83;}
	break;
	case 55:
#line 148 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 84;}
	break;
	case 56:
#line 149 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 85;}
	break;
	case 57:
#line 150 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 86;}
	break;
	case 58:
#line 151 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 87;}
	break;
	case 59:
#line 152 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 88;}
	break;
	case 60:
#line 153 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 89;}
	break;
	case 61:
#line 157 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 92;}
	break;
	case 62:
#line 158 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 93;}
	break;
	case 63:
#line 159 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 94;}
	break;
	case 64:
#line 160 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 95;}
	break;
	case 65:
#line 162 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{( m_act) = 97;}
	break;
	case 66:
#line 64 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::COMPEQ; {(   m_source)++; goto _out; } }}
	break;
	case 67:
#line 66 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::SEMICOLON; {(   m_source)++; goto _out; } }}
	break;
	case 68:
#line 67 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::COMA; {(   m_source)++; goto _out; } }}
	break;
	case 69:
#line 68 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::DOTCARET; {(   m_source)++; goto _out; } }}
	break;
	case 70:
#line 69 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::CARET; {(   m_source)++; goto _out; } }}
	break;
	case 71:
#line 70 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::OPAREN; {(   m_source)++; goto _out; } }}
	break;
	case 72:
#line 71 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::CPAREN; {(   m_source)++; goto _out; } }}
	break;
	case 73:
#line 72 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::OBRACE; {(   m_source)++; goto _out; } }}
	break;
	case 74:
#line 73 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::CBRACE; {(   m_source)++; goto _out; } }}
	break;
	case 75:
#line 74 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::OBRACKET; {(   m_source)++; goto _out; } }}
	break;
	case 76:
#line 75 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::CBRACKET; {(   m_source)++; goto _out; } }}
	break;
	case 77:
#line 76 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::DOTPLUS; {(   m_source)++; goto _out; } }}
	break;
	case 78:
#line 77 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::DOTMINUS; {(   m_source)++; goto _out; } }}
	break;
	case 79:
#line 78 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::DOTSTAR; {(   m_source)++; goto _out; } }}
	break;
	case 80:
#line 79 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::DOTSLASH; {(   m_source)++; goto _out; } }}
	break;
	case 81:
#line 83 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::STAR; {(   m_source)++; goto _out; } }}
	break;
	case 82:
#line 85 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::COMPNE; {(   m_source)++; goto _out; } }}
	break;
	case 83:
#line 86 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::LOWEREQ; {(   m_source)++; goto _out; } }}
	break;
	case 84:
#line 88 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::GREATEREQ; {(   m_source)++; goto _out; } }}
	break;
	case 85:
#line 90 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::ASSING; {(   m_source)++; goto _out; } }}
	break;
	case 86:
#line 93 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::INITIALALG; {(   m_source)++; goto _out; } }}
	break;
	case 87:
#line 94 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::INITIALEQ; {(   m_source)++; goto _out; } }}
	break;
	case 88:
#line 156 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::NEWLINE; {(   m_source)++; goto _out; } }}
	break;
	case 89:
#line 159 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::STRING; {(   m_source)++; goto _out; } }}
	break;
	case 90:
#line 161 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::COMMENT; {(   m_source)++; goto _out; } }}
	break;
	case 91:
#line 162 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source)+1;{ type = Lexeme::Type::ANYLEFTOUT; {(   m_source)++; goto _out; } }}
	break;
	case 92:
#line 65 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::EQUAL; {(   m_source)++; goto _out; } }}
	break;
	case 93:
#line 80 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::DOT; {(   m_source)++; goto _out; } }}
	break;
	case 94:
#line 84 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::SLASH; {(   m_source)++; goto _out; } }}
	break;
	case 95:
#line 87 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::LOWER; {(   m_source)++; goto _out; } }}
	break;
	case 96:
#line 89 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::GREATER; {(   m_source)++; goto _out; } }}
	break;
	case 97:
#line 91 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::COLON; {(   m_source)++; goto _out; } }}
	break;
	case 98:
#line 101 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::CONNECT; {(   m_source)++; goto _out; } }}
	break;
	case 99:
#line 108 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::ELSE; {(   m_source)++; goto _out; } }}
	break;
	case 100:
#line 127 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::IN; {(   m_source)++; goto _out; } }}
	break;
	case 101:
#line 155 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::SPACES; {(   m_source)++; goto _out; } }}
	break;
	case 102:
#line 157 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::INT; {(   m_source)++; goto _out; } }}
	break;
	case 103:
#line 158 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::FLOAT; {(   m_source)++; goto _out; } }}
	break;
	case 104:
#line 159 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::STRING; {(   m_source)++; goto _out; } }}
	break;
	case 105:
#line 160 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::IDENT; {(   m_source)++; goto _out; } }}
	break;
	case 106:
#line 161 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::COMMENT; {(   m_source)++; goto _out; } }}
	break;
	case 107:
#line 162 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{(  m_te) = (   m_source);(   m_source)--;{ type = Lexeme::Type::ANYLEFTOUT; {(   m_source)++; goto _out; } }}
	break;
	case 108:
#line 84 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{{(   m_source) = (((  m_te)))-1;}{ type = Lexeme::Type::SLASH; {(   m_source)++; goto _out; } }}
	break;
	case 109:
#line 162 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
	{{(   m_source) = (((  m_te)))-1;}{ type = Lexeme::Type::ANYLEFTOUT; {(   m_source)++; goto _out; } }}
	break;
	case 110:
#line 1 "NONE"
	{	switch( ( m_act) ) {
	case 18:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::PLUS; {(   m_source)++; goto _out; } }
	break;
	case 19:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::MINUS; {(   m_source)++; goto _out; } }
	break;
	case 29:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::INITIALALG; {(   m_source)++; goto _out; } }
	break;
	case 30:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::INITIALEQ; {(   m_source)++; goto _out; } }
	break;
	case 32:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::AND; {(   m_source)++; goto _out; } }
	break;
	case 33:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::ANNOTATION; {(   m_source)++; goto _out; } }
	break;
	case 34:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::BLOCK; {(   m_source)++; goto _out; } }
	break;
	case 35:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::BREAK; {(   m_source)++; goto _out; } }
	break;
	case 36:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::CLASS; {(   m_source)++; goto _out; } }
	break;
	case 38:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::CONNECTOR; {(   m_source)++; goto _out; } }
	break;
	case 39:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::CONSTANT; {(   m_source)++; goto _out; } }
	break;
	case 40:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::CONSTRAINEDBY; {(   m_source)++; goto _out; } }
	break;
	case 41:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::DER; {(   m_source)++; goto _out; } }
	break;
	case 42:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::DISCRETE; {(   m_source)++; goto _out; } }
	break;
	case 43:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::EACH; {(   m_source)++; goto _out; } }
	break;
	case 45:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::ELSEIF; {(   m_source)++; goto _out; } }
	break;
	case 46:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::ELSEWHEN; {(   m_source)++; goto _out; } }
	break;
	case 47:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::ENCAPSULATED; {(   m_source)++; goto _out; } }
	break;
	case 48:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::END; {(   m_source)++; goto _out; } }
	break;
	case 50:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::ENUMERATION; {(   m_source)++; goto _out; } }
	break;
	case 52:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::EXPANDABLE; {(   m_source)++; goto _out; } }
	break;
	case 53:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::EXTENDS; {(   m_source)++; goto _out; } }
	break;
	case 54:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::EXTERNAL; {(   m_source)++; goto _out; } }
	break;
	case 55:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::FALSE; {(   m_source)++; goto _out; } }
	break;
	case 56:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::FINAL; {(   m_source)++; goto _out; } }
	break;
	case 57:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::FLOW; {(   m_source)++; goto _out; } }
	break;
	case 58:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::FOR; {(   m_source)++; goto _out; } }
	break;
	case 59:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::FUNCTION; {(   m_source)++; goto _out; } }
	break;
	case 60:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::IF; {(   m_source)++; goto _out; } }
	break;
	case 61:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::IMPORT; {(   m_source)++; goto _out; } }
	break;
	case 62:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::IMPURE; {(   m_source)++; goto _out; } }
	break;
	case 63:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::IN; {(   m_source)++; goto _out; } }
	break;
	case 64:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::INNER; {(   m_source)++; goto _out; } }
	break;
	case 65:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::INPUT; {(   m_source)++; goto _out; } }
	break;
	case 66:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::LOOP; {(   m_source)++; goto _out; } }
	break;
	case 67:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::MODEL; {(   m_source)++; goto _out; } }
	break;
	case 68:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::NOT; {(   m_source)++; goto _out; } }
	break;
	case 69:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::OPERATOR; {(   m_source)++; goto _out; } }
	break;
	case 70:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::OR; {(   m_source)++; goto _out; } }
	break;
	case 71:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::OUTER; {(   m_source)++; goto _out; } }
	break;
	case 72:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::OUTPUT; {(   m_source)++; goto _out; } }
	break;
	case 73:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::PACKAGE; {(   m_source)++; goto _out; } }
	break;
	case 74:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::PARAMETER; {(   m_source)++; goto _out; } }
	break;
	case 75:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::PARTIAL; {(   m_source)++; goto _out; } }
	break;
	case 76:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::PROTECTED; {(   m_source)++; goto _out; } }
	break;
	case 77:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::PUBLIC; {(   m_source)++; goto _out; } }
	break;
	case 78:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::PURE; {(   m_source)++; goto _out; } }
	break;
	case 79:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::RECORD; {(   m_source)++; goto _out; } }
	break;
	case 80:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::REDECLARE; {(   m_source)++; goto _out; } }
	break;
	case 81:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::REPLACEABLE; {(   m_source)++; goto _out; } }
	break;
	case 82:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::RETURN; {(   m_source)++; goto _out; } }
	break;
	case 83:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::STREAM; {(   m_source)++; goto _out; } }
	break;
	case 84:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::THEN; {(   m_source)++; goto _out; } }
	break;
	case 85:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::TRUE; {(   m_source)++; goto _out; } }
	break;
	case 86:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::TYPE; {(   m_source)++; goto _out; } }
	break;
	case 87:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::WHEN; {(   m_source)++; goto _out; } }
	break;
	case 88:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::WHILE; {(   m_source)++; goto _out; } }
	break;
	case 89:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::WITHIN; {(   m_source)++; goto _out; } }
	break;
	case 92:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::INT; {(   m_source)++; goto _out; } }
	break;
	case 93:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::FLOAT; {(   m_source)++; goto _out; } }
	break;
	case 94:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::STRING; {(   m_source)++; goto _out; } }
	break;
	case 95:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::IDENT; {(   m_source)++; goto _out; } }
	break;
	case 97:
	{{(   m_source) = (((  m_te)))-1;} type = Lexeme::Type::ANYLEFTOUT; {(   m_source)++; goto _out; } }
	break;
	}
	}
	break;
#line 1801 "lexer.cc"
		}
	}

_again:
	_acts = _umodLexer_actions + _umodLexer_to_state_actions[(  m_current_state)];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 ) {
		switch ( *_acts++ ) {
	case 0:
#line 1 "NONE"
	{(  m_ts) = 0;}
	break;
#line 1814 "lexer.cc"
		}
	}

	if ( ++(   m_source) != (  m_source_end) )
		goto _resume;
	_test_eof: {}
	if ( (   m_source) == ( m_source_eof) )
	{
	if ( _umodLexer_eof_trans[(  m_current_state)] > 0 ) {
		_trans = _umodLexer_eof_trans[(  m_current_state)] - 1;
		goto _eof_trans;
	}
	}

	_out: {}
	}

#line 184 "/Users/phryne/Desktop/magmaleon/src/parse/lex/lexer.rl"
    }

    unsigned int size = m_te - m_ts;
    Lexeme::pos_t position = m_position;

    if (type == Lexeme::Type::NEWLINE)
    {
        m_position.first += 1;
        m_position.second = size;
    }
    else
    {
        m_position.second += size;
    }

    return new Lexeme(type, std::string(m_ts, size), position);
}

