/* Driver template for the LEMON parser generator.
** The author disclaims copyright to this source code.
*/
/* First off, code is included that follows the "include" declaration
** in the input grammar file. */
#include <stdio.h>
#line 5 "/Users/phryne/Desktop/mojito/src/parse/parser/lemon-parser.lm"

    #include <cassert>
    #include <cstdio>
    #include <vector>
    #include <string>
    #include <iostream>
    #include "lexeme.h"
    #include "parser.h"
    
    #include "ast/StoredDefinition.h"
    using namespace std;
    using namespace umod;
    using namespace umod::ast;
#line 22 "/Users/phryne/Desktop/mojito/src/parse/parser/lemon-parser.c"
/* Next is all token values, in a form suitable for use by makeheaders.
** This section will be null unless lemon is run with the -m switch.
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
/* Make sure the INTERFACE macro is defined.
*/
#ifndef INTERFACE
# define INTERFACE 1
#endif
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 terminals
**                       and nonterminals.  "int" is used otherwise.
**    YYNOCODE           is a number of type YYCODETYPE which corresponds
**                       to no legal terminal or nonterminal number.  This
**                       number is used to fill in empty slots of the hash 
**                       table.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       have fall-back values which should be used if the
**                       original value of the token will not parse.
**    YYACTIONTYPE       is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 rules and
**                       states combined.  "int" is used otherwise.
**    umodParseTOKENTYPE     is the data type used for minor tokens given 
**                       directly to the parser from the tokenizer.
**    YYMINORTYPE        is the data type used for all minor tokens.
**                       This is typically a union of many types, one of
**                       which is umodParseTOKENTYPE.  The entry in the union
**                       for base tokens is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.  If
**                       zero the stack is dynamically sized using realloc()
**    umodParseARG_SDECL     A static variable declaration for the %extra_argument
**    umodParseARG_PDECL     A parameter declaration for the %extra_argument
**    umodParseARG_STORE     Code to store %extra_argument into yypParser
**    umodParseARG_FETCH     Code to extract %extra_argument from yypParser
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
*/
#define YYCODETYPE unsigned char
#define YYNOCODE 214
#define YYACTIONTYPE unsigned short int
#define umodParseTOKENTYPE lex::Lexeme *
typedef union {
  int yyinit;
  umodParseTOKENTYPE yy0;
} YYMINORTYPE;
#ifndef YYSTACKDEPTH
#define YYSTACKDEPTH 1000
#endif
#define umodParseARG_SDECL parser::Parser *parser;
#define umodParseARG_PDECL ,parser::Parser *parser
#define umodParseARG_FETCH parser::Parser *parser = yypParser->parser
#define umodParseARG_STORE yypParser->parser = parser
#define YYNSTATE 485
#define YYNRULE 271
#define YY_NO_ACTION      (YYNSTATE+YYNRULE+2)
#define YY_ACCEPT_ACTION  (YYNSTATE+YYNRULE+1)
#define YY_ERROR_ACTION   (YYNSTATE+YYNRULE)

/* The yyzerominor constant is used to initialize instances of
** YYMINORTYPE objects to zero. */
static const YYMINORTYPE yyzerominor = { 0 };

/* Define the yytestcase() macro to be a no-op if is not already defined
** otherwise.
**
** Applications can choose to define yytestcase() in the %include section
** to a macro that can assist in verifying code coverage.  For production
** code the yytestcase() macro should be turned off.  But it is useful
** for testing.
*/
#ifndef yytestcase
# define yytestcase(X)
#endif


/* Next are the tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < YYNSTATE                  Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   YYNSTATE <= N < YYNSTATE+YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == YYNSTATE+YYNRULE              A syntax error has occurred.
**
**   N == YYNSTATE+YYNRULE+1            The parser accepts its input.
**
**   N == YYNSTATE+YYNRULE+2            No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as
**
**      yy_action[ yy_shift_ofst[S] + X ]
**
** If the index value yy_shift_ofst[S]+X is out of range or if the value
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X or if yy_shift_ofst[S]
** is equal to YY_SHIFT_USE_DFLT, it means that the action is not in the table
** and that yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
** YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
*/
static const YYACTIONTYPE yy_action[] = {
 /*     0 */    60,  131,   61,   62,   20,   54,  125,   55,   56,   57,
 /*    10 */    58,   50,   59,  247,   55,   56,   57,   58,   50,   59,
 /*    20 */    84,  131,   77,  427,   21,  268,  456,  454,   64,   23,
 /*    30 */   264,  170,  232,  247,  269,    6,  106,  100,  471,  177,
 /*    40 */   445,  203,  124,  407,  343,  339,   28,  249,   37,   38,
 /*    50 */    42,  331,   53,   54,  373,   55,   56,   57,   58,   50,
 /*    60 */    59,  194,  138,  265,  324,  312,  266,  484,   35,  179,
 /*    70 */    33,  286,  446,   14,   59,  433,  431,  428,  425,   60,
 /*    80 */     1,   61,   62,  309,   52,  209,  448,  440,  180,  245,
 /*    90 */   390,  256,  235,  404,  323,  250,  333,  175,  145,  183,
 /*   100 */   131,   76,  427,   21,  372,  259,  260,  228,  560,  204,
 /*   110 */   207,  166,  247,  123,    6,  441,  130,  119,   67,  445,
 /*   120 */   560,  122,  388,   90,  206,  193,  191,  205,   38,  343,
 /*   130 */   339,  560,  560,  560,  560,  560,  461,  319,  320,   41,
 /*   140 */   199,  138,  322,   60,   82,   61,   62,   35,  232,  149,
 /*   150 */   286,  446,   14,  417,  433,  431,  428,  425,   60,  396,
 /*   160 */    61,   62,  373,   67,  131,  248,  427,   21,  469,  475,
 /*   170 */   474,  473,  417,  481,  155,  434,  247,  301,    6,  131,
 /*   180 */   324,  427,   21,  445,  248,  179,   56,   57,   58,   50,
 /*   190 */    59,  247,   38,    6,  268,  456,  454,   64,  445,  309,
 /*   200 */   170,  209,  448,  440,  180,  138,  409,  374,  296,  149,
 /*   210 */   129,   35,  254,  264,  286,  446,   14,  131,  433,  431,
 /*   220 */   428,  425,   60,  257,   61,   62,  560,  343,  339,  247,
 /*   230 */   446,   14,  232,  433,  431,  428,  425,  415,  560,  148,
 /*   240 */   411,  252,  250,  131,  185,  427,   21,  343,  339,  560,
 /*   250 */   560,  560,  560,  560,  130,  247,  393,    6,   63,  413,
 /*   260 */   405,  279,  445,  245,  280,   88,   94,   98,  107,  182,
 /*   270 */   287,   38,  305,  181,  232,  144,  367,  333,  175,  105,
 /*   280 */   104,   87,   93,  413,  138,  209,  448,  440,  180,  328,
 /*   290 */    35,  481,  377,  286,  446,   14,   73,  433,  431,  428,
 /*   300 */   425,   60,  146,   61,   62,  249,  379,  376,  361,  184,
 /*   310 */   232,  179,   53,   54,    1,   55,   56,   57,   58,   50,
 /*   320 */    59,   18,  131,  245,  427,   21,  130,  243,  448,  440,
 /*   330 */   180,  384,  321,  187,  247,   60,    6,   61,   62,  279,
 /*   340 */    26,  445,  280,   88,   94,   98,  107,  182,  262,  232,
 /*   350 */    39,  162,  363,  360,  282,  270,  115,  729,  427,   21,
 /*   360 */   392,  257,  467,  209,  448,  440,  180,  248,  247,   32,
 /*   370 */     6,   73,   13,  446,   14,  445,  433,  431,  428,  425,
 /*   380 */   249,  324,  757,  164,   39,  135,  179,  334,  221,  373,
 /*   390 */   232,  238,  239,  466,  376,  361,  184,   34,  173,  257,
 /*   400 */   309,  407,  209,  448,  440,  180,  273,  446,   14,  257,
 /*   410 */   433,  431,  428,  425,   60,  114,   61,   62,  253,  402,
 /*   420 */   232,  298,  324,  130,  148,  297,   92,  179,  729,  349,
 /*   430 */   162,  407,  331,  257,  130,  131,  197,  427,   21,  143,
 /*   440 */   403,  309,  223,  209,  448,  440,  180,  247,  246,    6,
 /*   450 */   235,  404,  324,  250,  445,  287,  130,  179,   58,   50,
 /*   460 */    59,  423,  347,   39,  105,  104,   87,   93,  148,  232,
 /*   470 */    18,  309,  444,  209,  448,  440,  180,  317,  406,   81,
 /*   480 */   235,  404,  183,  250,   76,  307,  446,   14,  173,  433,
 /*   490 */   431,  428,  425,   60,  429,   61,   62,  299,  279,  287,
 /*   500 */   119,  280,   88,   94,   98,  107,  182,  148,  105,  104,
 /*   510 */    87,   93,  300,  435,  131,   15,  427,   21,  284,  178,
 /*   520 */    19,  587,  209,  448,  440,  180,  247,  249,    6,   32,
 /*   530 */   257,   73,  149,  445,   31,  358,  340,  335,  287,  262,
 /*   540 */   133,  257,   39,  249,   17,  232,  187,  105,  104,   87,
 /*   550 */    93,  136,  290,  139,  126,  232,  441,   34,  348,  346,
 /*   560 */   344,  130,  267,  257,   13,  446,   14,  422,  433,  431,
 /*   570 */   428,  425,   95,  118,  279,  467,  140,  280,   88,   94,
 /*   580 */    98,  107,  182,   13,  279,  247,  436,  280,   88,   94,
 /*   590 */    98,  107,  182,  389,  385,  232,  331,  130,  209,  448,
 /*   600 */   440,  180,  154,  483,  544,  233,  402,  159,  209,  448,
 /*   610 */   440,  180,  544,  544,  544,   53,   54,  331,   55,   56,
 /*   620 */    57,   58,   50,   59,  237,  134,  316,  544,  544,  544,
 /*   630 */   544,  154,  179,  543,  130,  441,  159,  232,  173,  315,
 /*   640 */   314,  543,  543,  543,   99,  421,  130,   51,  214,  448,
 /*   650 */   440,  180,  356,  249,  544,  316,  543,  543,  543,  543,
 /*   660 */   154,  131,  541,  109,   20,  159,  338,  410,  257,  250,
 /*   670 */   541,  541,  541,  247,  179,  130,  190,  326,  318,  258,
 /*   680 */   113,  302,   76,  543,  316,  541,  541,  541,  541,   23,
 /*   690 */   220,  448,  440,  180,  455,  560,  106,  100,  391,  102,
 /*   700 */    24,  189,  124,  130,  257,   66,   28,  560,   37,  412,
 /*   710 */   317,  303,  541,  232,  103,  147,  343,  339,  560,  560,
 /*   720 */   560,  560,  560,  310,  392,  371,  370,  748,  368,  742,
 /*   730 */   365,  364,  278,  232,  261,  359,  357,  352,  350,  216,
 /*   740 */   441,  257,    7,  375,  396,  324,  443,  274,  232,  317,
 /*   750 */   179,  130,  234,  257,  693,  472,  369,  351,  441,  396,
 /*   760 */   276,   25,  437,  245,  309,  324,  209,  448,  440,  180,
 /*   770 */   179,  245,  465,  177,   43,   22,  366,  148,  485,  141,
 /*   780 */   324,  186,  257,  338,  309,  179,  209,  448,  440,  180,
 /*   790 */    25,  288,  249,  131,  327,   63,   20,  275,  355,  309,
 /*   800 */   232,  209,  448,  440,  180,  247,  749,   83,  287,  101,
 /*   810 */   257,  396,  275,  226,  402,  232,   80,  105,  104,   87,
 /*   820 */    93,   23,  257,  156,  130,  462,  386,  294,  106,  100,
 /*   830 */   416,  245,  324,  176,  124,  460,  130,  179,   28,  447,
 /*   840 */    37,  441,  313,  458,  134,  137,  150,  324,  308,  201,
 /*   850 */   169,  309,  179,  209,  448,  440,  180,  222,  257,  325,
 /*   860 */   329,  232,  560,  112,  255,  479,  309,   16,  209,  448,
 /*   870 */   440,  180,  386,  277,  560,  128,  336,  341,   29,  196,
 /*   880 */   459,  229,  383,  343,  339,  560,  560,  560,  560,  560,
 /*   890 */   362,  131,  158,  324,   20,  149,  195,  399,  179,  380,
 /*   900 */   208,  130,  188,  247,  130,  161,  430,  457,  192,  232,
 /*   910 */   304,  198,  309,  408,  209,  448,  440,  180,  463,   23,
 /*   920 */   407,  202,  472,  157,  130,  127,  106,  100,  387,  130,
 /*   930 */   420,  257,  124,  432,  442,  418,   28,  373,   37,  131,
 /*   940 */   251,  324,   20,  257,  232,  142,  179,  130,  167,  153,
 /*   950 */   168,  247,   73,  414,   13,  293,  472,   91,  151,  232,
 /*   960 */   309,  354,  209,  448,  440,  180,  481,   23,   96,  419,
 /*   970 */   241,   86,  232,  130,  106,  100,  324,   97,  117,  353,
 /*   980 */   124,  179,  111,   89,   28,  451,   37,  458,  134,  121,
 /*   990 */   225,  324,  152,  224,  231,  309,  179,  209,  448,  440,
 /*  1000 */   180,  230,  160,  132,  324,  232,  480,  112,  257,  179,
 /*  1010 */   309,  257,  209,  448,  440,  180,  330,  337,  232,  453,
 /*  1020 */    30,  400,  120,  309,  459,  209,  448,  440,  180,  378,
 /*  1030 */   232,  257,  464,  272,  311,  479,  257,  324,  232,  149,
 /*  1040 */   130,  165,  179,  172,   45,  478,  468,  130,  174,  295,
 /*  1050 */   324,  401,  477,  345,  257,  179,  309,  476,  209,  448,
 /*  1060 */   440,  180,  324,   36,  332,  103,  232,  179,   27,  309,
 /*  1070 */   324,  209,  448,  440,  180,  179,  232,  470,  306,  108,
 /*  1080 */   257,  309,  426,  209,  448,  440,  180,  236,  227,  309,
 /*  1090 */     1,  209,  448,  440,  180,  439,  130,  271,  324,  263,
 /*  1100 */   438,   85,  424,  179,  232,  482,   78,  342,  324,  452,
 /*  1110 */   449,  467,   48,  179,  232,  285,  171,  309,   69,  209,
 /*  1120 */   448,  440,  180,   74,  232,  292,   75,  309,   65,  209,
 /*  1130 */   448,  440,  180,  200,   11,  395,  324,   12,   72,  232,
 /*  1140 */    68,  179,   49,    3,    4,  398,  324,  257,    8,   10,
 /*  1150 */   281,  179,  382,    2,  257,  309,  324,  209,  448,  440,
 /*  1160 */   180,  179,    5,   46,   79,  309,   71,  209,  448,  440,
 /*  1170 */   180,  324,  232,   70,   40,  309,  179,  209,  448,  440,
 /*  1180 */   180,    9,   44,  397,   47,  232,  116,  758,  758,  758,
 /*  1190 */   309,  758,  209,  448,  440,  180,  163,  758,  758,  758,
 /*  1200 */   232,  758,  758,  257,  324,  758,  758,  758,  758,  179,
 /*  1210 */   232,  240,  758,  758,  758,  758,  758,  324,  758,  758,
 /*  1220 */   232,  110,  179,  309,  758,  209,  448,  440,  180,  758,
 /*  1230 */   758,  283,  324,  758,  758,  232,  309,  179,  209,  448,
 /*  1240 */   440,  180,  324,  758,  758,  758,  450,  179,  232,  758,
 /*  1250 */   758,  309,  324,  209,  448,  440,  180,  179,  758,  289,
 /*  1260 */   758,  309,  758,  209,  448,  440,  180,  324,  232,  758,
 /*  1270 */   758,  309,  179,  209,  448,  440,  180,  758,  758,  291,
 /*  1280 */   324,  758,  758,  232,  758,  179,  309,  758,  209,  448,
 /*  1290 */   440,  180,  758,  758,  381,  232,  758,  758,  758,  309,
 /*  1300 */   324,  209,  448,  440,  180,  179,  394,  758,  758,  758,
 /*  1310 */   758,  758,  758,  758,  758,  324,  232,  758,  758,  309,
 /*  1320 */   179,  209,  448,  440,  180,  758,  758,  324,  758,  232,
 /*  1330 */   758,  758,  179,  758,  309,  758,  209,  448,  440,  180,
 /*  1340 */   232,  758,  758,  758,  232,  758,  309,  758,  209,  448,
 /*  1350 */   440,  180,  758,  179,  232,  758,  758,  758,  758,  758,
 /*  1360 */   758,  758,  758,  758,  232,  758,  179,  758,  758,  215,
 /*  1370 */   448,  440,  180,  758,  758,  232,  758,  179,  758,  232,
 /*  1380 */   758,  179,  212,  448,  440,  180,  232,  758,  758,  758,
 /*  1390 */   232,  179,  758,  211,  448,  440,  180,  218,  448,  440,
 /*  1400 */   180,  179,  758,  758,  758,  758,  758,  210,  448,  440,
 /*  1410 */   180,  758,  179,  758,  758,  758,  179,  219,  448,  440,
 /*  1420 */   180,  758,  758,  179,  758,  758,  758,  179,  242,  448,
 /*  1430 */   440,  180,  244,  448,  440,  180,  758,  758,  758,  217,
 /*  1440 */   448,  440,  180,  213,  448,  440,  180,
};
static const YYCODETYPE yy_lookahead[] = {
 /*     0 */     3,   24,    5,    6,   27,    2,  111,    4,    5,    6,
 /*    10 */     7,    8,    9,   36,    4,    5,    6,    7,    8,    9,
 /*    20 */   113,   24,  120,   26,   27,  123,  124,  125,  126,   52,
 /*    30 */    31,  129,  143,   36,  146,   38,   59,   60,  150,  151,
 /*    40 */    43,   64,   65,  154,   45,   46,   69,   36,   71,   52,
 /*    50 */    73,  156,    1,    2,   43,    4,    5,    6,    7,    8,
 /*    60 */     9,   64,   65,  114,  175,  116,  117,  118,   71,  180,
 /*    70 */    73,   74,   75,   76,    9,   78,   79,   80,   81,    3,
 /*    80 */    27,    5,    6,  194,   33,  196,  197,  198,  199,   36,
 /*    90 */   201,  202,  203,  204,  153,  206,  155,  156,   24,   97,
 /*   100 */    24,   99,   26,   27,  100,  101,  102,  103,   24,   40,
 /*   110 */    41,   42,   36,   28,   38,  208,  104,  115,   34,   43,
 /*   120 */    36,  121,  110,  151,   55,   56,   57,   58,   52,   45,
 /*   130 */    46,   47,   48,   49,   50,   51,  136,  137,  138,   63,
 /*   140 */    64,   65,  170,    3,   25,    5,    6,   71,  143,  147,
 /*   150 */    74,   75,   76,   24,   78,   79,   80,   81,    3,  154,
 /*   160 */     5,    6,   43,   34,   24,   36,   26,   27,  166,  167,
 /*   170 */   168,  169,   24,   89,  112,   39,   36,  115,   38,   24,
 /*   180 */   175,   26,   27,   43,   36,  180,    5,    6,    7,    8,
 /*   190 */     9,   36,   52,   38,  123,  124,  125,  126,   43,  194,
 /*   200 */   129,  196,  197,  198,  199,   65,   29,   67,   26,  147,
 /*   210 */    24,   71,  207,   31,   74,   75,   76,   24,   78,   79,
 /*   220 */    80,   81,    3,  211,    5,    6,   24,   45,   46,   36,
 /*   230 */    75,   76,  143,   78,   79,   80,   81,   24,   36,  143,
 /*   240 */   204,  205,  206,   24,  105,   26,   27,   45,   46,   47,
 /*   250 */    48,   49,   50,   51,  104,   36,   29,   38,  119,   24,
 /*   260 */   110,  172,   43,   36,  175,  176,  177,  178,  179,  180,
 /*   270 */   174,   52,   37,   38,  143,  153,  187,  155,  156,  183,
 /*   280 */   184,  185,  186,   24,   65,  196,  197,  198,  199,  193,
 /*   290 */    71,   89,  104,   74,   75,   76,   27,   78,   79,   80,
 /*   300 */    81,    3,  104,    5,    6,   36,  160,  161,  162,  163,
 /*   310 */   143,  180,    1,    2,   27,    4,    5,    6,    7,    8,
 /*   320 */     9,   25,   24,   36,   26,   27,  104,  196,  197,  198,
 /*   330 */   199,   33,  110,   54,   36,    3,   38,    5,    6,  172,
 /*   340 */    53,   43,  175,  176,  177,  178,  179,  180,  108,  143,
 /*   350 */    52,   19,   19,   20,  187,   24,   24,   11,   26,   27,
 /*   360 */   154,  211,   83,  196,  197,  198,  199,   36,   36,   25,
 /*   370 */    38,   27,   76,   75,   76,   43,   78,   79,   80,   81,
 /*   380 */    36,  175,   91,   92,   52,  145,  180,  111,  182,   43,
 /*   390 */   143,  158,  159,  160,  161,  162,  163,   53,   28,  211,
 /*   400 */   194,  154,  196,  197,  198,  199,  141,   75,   76,  211,
 /*   410 */    78,   79,   80,   81,    3,   24,    5,    6,  189,  190,
 /*   420 */   143,   30,  175,  104,  143,   28,   29,  180,   82,  110,
 /*   430 */    19,  154,  156,  211,  104,   24,   66,   26,   27,  140,
 /*   440 */   110,  194,  143,  196,  197,  198,  199,   36,  201,   38,
 /*   450 */   203,  204,  175,  206,   43,  174,  104,  180,    7,    8,
 /*   460 */     9,  113,  110,   52,  183,  184,  185,  186,  143,  143,
 /*   470 */    25,  194,  122,  196,  197,  198,  199,  212,  201,  108,
 /*   480 */   203,  204,   97,  206,   99,   98,   75,   76,   28,   78,
 /*   490 */    79,   80,   81,    3,  107,    5,    6,   93,  172,  174,
 /*   500 */   115,  175,  176,  177,  178,  179,  180,  143,  183,  184,
 /*   510 */   185,  186,  108,  188,   24,   27,   26,   27,  192,   28,
 /*   520 */    11,   29,  196,  197,  198,  199,   36,   36,   38,   25,
 /*   530 */   211,   27,  147,   43,   28,  164,  165,  166,  174,  108,
 /*   540 */   113,  211,   52,   36,   28,  143,   54,  183,  184,  185,
 /*   550 */   186,  111,  188,  168,  169,  143,  208,   53,   47,   48,
 /*   560 */    49,  104,  212,  211,   76,   75,   76,  110,   78,   79,
 /*   570 */    80,   81,  111,   24,  172,   83,  145,  175,  176,  177,
 /*   580 */   178,  179,  180,   76,  172,   36,   77,  175,  176,  177,
 /*   590 */   178,  179,  180,   77,  192,  143,  156,  104,  196,  197,
 /*   600 */   198,  199,   30,  110,   32,  189,  190,   35,  196,  197,
 /*   610 */   198,  199,   40,   41,   42,    1,    2,  156,    4,    5,
 /*   620 */     6,    7,    8,    9,   95,   96,   54,   55,   56,   57,
 /*   630 */    58,   30,  180,   32,  104,  208,   35,  143,   28,  141,
 /*   640 */   110,   40,   41,   42,   27,  113,  104,   33,  196,  197,
 /*   650 */   198,  199,  110,   36,   82,   54,   55,   56,   57,   58,
 /*   660 */    30,   24,   32,  113,   27,   35,  133,  204,  211,  206,
 /*   670 */    40,   41,   42,   36,  180,  104,   66,  144,  141,    6,
 /*   680 */    97,  110,   99,   82,   54,   55,   56,   57,   58,   52,
 /*   690 */   196,  197,  198,  199,  128,   24,   59,   60,   29,  133,
 /*   700 */    63,   64,   65,  104,  211,   34,   69,   36,   71,  110,
 /*   710 */   212,    8,   82,  143,   24,  104,   45,   46,   47,   48,
 /*   720 */    49,   50,   51,   33,  154,   12,   13,   14,   15,   16,
 /*   730 */    17,   18,  142,  143,   21,   22,   23,   50,   51,   36,
 /*   740 */   208,  211,   28,   43,  154,  175,  113,  142,  143,  212,
 /*   750 */   180,  104,  182,  211,   27,   84,   14,  110,  208,  154,
 /*   760 */    25,   28,   29,   36,  194,  175,  196,  197,  198,  199,
 /*   770 */   180,   36,  150,  151,   63,   64,   16,  143,    0,   65,
 /*   780 */   175,  105,  211,  133,  194,  180,  196,  197,  198,  199,
 /*   790 */    28,   29,   36,   24,  144,  119,   27,  207,   85,  194,
 /*   800 */   143,  196,  197,  198,  199,   36,   14,   25,  174,   29,
 /*   810 */   211,  154,  207,  189,  190,  143,   27,  183,  184,  185,
 /*   820 */   186,   52,  211,   28,  104,   11,  154,  193,   59,   60,
 /*   830 */   110,   36,  175,   28,   65,   11,  104,  180,   69,   70,
 /*   840 */    71,  208,  110,   95,   96,   28,   25,  175,   39,   61,
 /*   850 */    28,  194,  180,  196,  197,  198,  199,  200,  211,   11,
 /*   860 */    29,  143,   24,  115,  207,   87,  194,   27,  196,  197,
 /*   870 */   198,  199,  154,   24,   36,  127,   29,   11,   25,   61,
 /*   880 */   132,  209,  210,   45,   46,   47,   48,   49,   50,   51,
 /*   890 */    62,   24,   27,  175,   27,  147,   61,   11,  180,   72,
 /*   900 */    61,  104,   61,   36,  104,   53,   62,  110,   66,  143,
 /*   910 */   110,   61,  194,   24,  196,  197,  198,  199,   72,   52,
 /*   920 */   154,   61,   84,   27,  104,   24,   59,   60,  210,  104,
 /*   930 */   110,  211,   65,   11,   67,  110,   69,   43,   71,   24,
 /*   940 */    24,  175,   27,  211,  143,   24,  180,  104,   24,   44,
 /*   950 */    82,   36,   27,  110,   76,  154,   84,  181,  148,  143,
 /*   960 */   194,  149,  196,  197,  198,  199,   89,   52,  134,  203,
 /*   970 */   154,  108,  143,  104,   59,   60,  175,  181,  108,  110,
 /*   980 */    65,  180,  108,  154,   69,  195,   71,   95,   96,  108,
 /*   990 */   108,  175,  108,  108,  143,  194,  180,  196,  197,  198,
 /*  1000 */   199,  143,  143,   94,  175,  143,  195,  115,  211,  180,
 /*  1010 */   194,  211,  196,  197,  198,  199,  154,   43,  143,  127,
 /*  1020 */    68,  191,  139,  194,  132,  196,  197,  198,  199,  154,
 /*  1030 */   143,  211,  156,   24,  135,   87,  211,  175,  143,  147,
 /*  1040 */   104,  154,  180,   94,   94,   86,  110,  104,  130,  154,
 /*  1050 */   175,  190,   88,  110,  211,  180,  194,  131,  196,  197,
 /*  1060 */   198,  199,  175,   25,  157,   24,  143,  180,   52,  194,
 /*  1070 */   175,  196,  197,  198,  199,  180,  143,  154,  118,  152,
 /*  1080 */   211,  194,   24,  196,  197,  198,  199,  154,  109,  194,
 /*  1090 */    27,  196,  197,  198,  199,  181,  104,  135,  175,   24,
 /*  1100 */   181,  181,  110,  180,  143,  107,   94,  106,  175,  106,
 /*  1110 */    32,   83,  173,  180,  143,  154,  163,  194,  173,  196,
 /*  1120 */   197,  198,  199,  119,  143,  154,  119,  194,  173,  196,
 /*  1130 */   197,  198,  199,   61,  171,  154,  175,  171,  173,  143,
 /*  1140 */   173,  180,  173,  171,  171,   11,  175,  211,  171,  171,
 /*  1150 */   154,  180,   29,  171,  211,  194,  175,  196,  197,  198,
 /*  1160 */   199,  180,  171,  173,   28,  194,  173,  196,  197,  198,
 /*  1170 */   199,  175,  143,  173,   61,  194,  180,  196,  197,  198,
 /*  1180 */   199,  171,   61,  154,  173,  143,   10,  213,  213,  213,
 /*  1190 */   194,  213,  196,  197,  198,  199,  154,  213,  213,  213,
 /*  1200 */   143,  213,  213,  211,  175,  213,  213,  213,  213,  180,
 /*  1210 */   143,  154,  213,  213,  213,  213,  213,  175,  213,  213,
 /*  1220 */   143,  154,  180,  194,  213,  196,  197,  198,  199,  213,
 /*  1230 */   213,  154,  175,  213,  213,  143,  194,  180,  196,  197,
 /*  1240 */   198,  199,  175,  213,  213,  213,  154,  180,  143,  213,
 /*  1250 */   213,  194,  175,  196,  197,  198,  199,  180,  213,  154,
 /*  1260 */   213,  194,  213,  196,  197,  198,  199,  175,  143,  213,
 /*  1270 */   213,  194,  180,  196,  197,  198,  199,  213,  213,  154,
 /*  1280 */   175,  213,  213,  143,  213,  180,  194,  213,  196,  197,
 /*  1290 */   198,  199,  213,  213,  154,  143,  213,  213,  213,  194,
 /*  1300 */   175,  196,  197,  198,  199,  180,  154,  213,  213,  213,
 /*  1310 */   213,  213,  213,  213,  213,  175,  143,  213,  213,  194,
 /*  1320 */   180,  196,  197,  198,  199,  213,  213,  175,  213,  143,
 /*  1330 */   213,  213,  180,  213,  194,  213,  196,  197,  198,  199,
 /*  1340 */   143,  213,  213,  213,  143,  213,  194,  213,  196,  197,
 /*  1350 */   198,  199,  213,  180,  143,  213,  213,  213,  213,  213,
 /*  1360 */   213,  213,  213,  213,  143,  213,  180,  213,  213,  196,
 /*  1370 */   197,  198,  199,  213,  213,  143,  213,  180,  213,  143,
 /*  1380 */   213,  180,  196,  197,  198,  199,  143,  213,  213,  213,
 /*  1390 */   143,  180,  213,  196,  197,  198,  199,  196,  197,  198,
 /*  1400 */   199,  180,  213,  213,  213,  213,  213,  196,  197,  198,
 /*  1410 */   199,  213,  180,  213,  213,  213,  180,  196,  197,  198,
 /*  1420 */   199,  213,  213,  180,  213,  213,  213,  180,  196,  197,
 /*  1430 */   198,  199,  196,  197,  198,  199,  213,  213,  213,  196,
 /*  1440 */   197,  198,  199,  196,  197,  198,  199,
};
#define YY_SHIFT_USE_DFLT (-24)
#define YY_SHIFT_MAX 300
static const short yy_shift_ofst[] = {
 /*     0 */  1176,  332,   76,   -3,   -3,   76,  332,  332,  140,  219,
 /*    10 */   219,  219,  219,  298,  490,  490,  490,  298,  411,  490,
 /*    20 */   490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
 /*    30 */   490,  490,  490,  490,  490,  490,  490,  490,  490,  490,
 /*    40 */   490,  490,  490,  490,  490,   84,  -23,  637,  637,  -23,
 /*    50 */   155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
 /*    60 */   155,  155,  155,  630,  671,  867,  838,  202,  769,  915,
 /*    70 */   915,  915,  915,  492,  601,  572,  713,   69,  129,  279,
 /*    80 */   690,  344,  182,   -1,  504,  346,   11,  894,  894,  894,
 /*    90 */   894,  894,  894,  894,  894,  894,  894,  894,  894,  916,
 /*   100 */   894,  894,  894,  894,  894,  894,  894,  894,  894,  921,
 /*   110 */   894,  269,  148,  391,  119,  296,  148,  269,  488,  148,
 /*   120 */   549,  507,  868,  916,  924,  868,  905,  925,  905,  878,
 /*   130 */   868,  878,  872,  925,  877,  878,  894,  921,  924,  905,
 /*   140 */   921,  924,  878,  868,  894,  878,  -24,  -24,  287,  511,
 /*   150 */   148,  687,  703,  148,  148,  148,  193,  148,  193,  331,
 /*   160 */    53,  193,  148,  711,  778,  711,  974,  952,  925, 1009,
 /*   170 */   948,  948,  959,  924,  964, 1038, 1041, 1016, 1058, 1063,
 /*   180 */  1063, 1009, 1063, 1075,  948, 1078, 1078, 1028,  -24,  -24,
 /*   190 */   -24,  -24,  -24,  -24,  -24,  -24,  -24,  -24,  -24,  -24,
 /*   200 */   -24,  -24,  -24,  -24,  -24,  -24,  -24,  -24,  -24,  614,
 /*   210 */    51,  311,    3,   10,   10,  181,  235,  451,  451,  451,
 /*   220 */   451,  762,  509,  735,  617,  491,  370,  397,  333,  516,
 /*   230 */   795,  227,  727,  610,  733,  714, 1072, 1134, 1123, 1136,
 /*   240 */  1113, 1121,   65,   65,   65,   74,  136,  186,  213,  259,
 /*   250 */    85,  445,  177,  460,  506,  506,  669,  673,  700,  742,
 /*   260 */   760,  792,  756,  782,  789,  780,  805,  814,  824,  817,
 /*   270 */   821,  809,  822,  848,  831,  506,  849,  840,  847,  866,
 /*   280 */   853,  788,  828,  818,  827,  835,  865,  886,  852,  839,
 /*   290 */   844,  841,  842,  850,  846,  860,  896,  889,  901,  922,
 /*   300 */   756,
};
#define YY_REDUCE_USE_DFLT (-113)
#define YY_REDUCE_MAX 208
static const short yy_reduce_ofst[] = {
 /*     0 */   291, -111,   89,  402,  326,  167,  247,  277,  412,  412,
 /*    10 */   412,  412,  412,  672,  657,  605,  590,  718,  766,    5,
 /*    20 */   206,  570, 1092, 1105, 1125, 1152,  829,  923,  971, 1067,
 /*    30 */  1029,  981, 1140,  961,  875, 1077,  862,  801,  996, 1057,
 /*    40 */   887,  933,  895,  816, 1042,    2,   96,  364,  325,  634,
 /*    50 */   131, 1211, 1197, 1186, 1247, 1173, 1201, 1221, 1232, 1236,
 /*    60 */   452,  494, 1243,  -98,  892,  281,  748,  385,  281,  281,
 /*    70 */   281,  281,  281,  233,   71,   71,    4,    0,  371,  146,
 /*    80 */   -51,  122,   62,   62,  -59,  542,  493,  457,  352,  330,
 /*    90 */   222,  150,   12,  992,  319,  530,  571,  599,  647,   36,
 /*   100 */   720,  732,  797,  800,  820,  825,  843,  869,  936, -112,
 /*   110 */   943, -105,  240,  387,  198,  348,  404,  276,  348,  431,
 /*   120 */   299,  427,  350,  463,  416,  498,  533,  440,  566,  532,
 /*   130 */   537,  348,  529,  461,  583,  550,  611,  622,  624,  650,
 /*   140 */   -28,  229,  -93,  265,  188,  633,  676,  139,  776,  810,
 /*   150 */   863,  812,  834,  870,  874,  881,  851,  882,  858,  884,
 /*   160 */   796,  859,  885,  790,  909,  811,  883,  830,  876,  899,
 /*   170 */   949,  950,  918,  861,  926,  907,  960,  927,  979,  914,
 /*   180 */   919,  962,  920,  998, 1012, 1001, 1003,  953,  939,  945,
 /*   190 */   955,  965,  967,  963,  966,  972,  973,  977,  969,  978,
 /*   200 */   982,  991,  990,  993, 1004, 1000, 1010, 1007, 1011,
};
static const YYACTIONTYPE yy_default[] = {
 /*     0 */   486,  698,  630,  646,  646,  630,  756,  756,  756,  606,
 /*    10 */   632,  607,  648,  756,  756,  715,  715,  756,  756,  756,
 /*    20 */   711,  711,  756,  756,  756,  714,  756,  756,  756,  756,
 /*    30 */   756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
 /*    40 */   756,  756,  756,  756,  756,  752,  650,  634,  634,  650,
 /*    50 */   756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
 /*    60 */   756,  756,  756,  754,  740,  756,  740,  752,  756,  636,
 /*    70 */   611,  652,  610,  738,  754,  754,  501,  547,  756,  738,
 /*    80 */   516,  577,  560,  560,  577,  678,  729,  729,  729,  729,
 /*    90 */   729,  729,  729,  729,  729,  729,  729,  729,  729,  704,
 /*   100 */   729,  729,  729,  729,  729,  729,  729,  729,  729,  756,
 /*   110 */   729,  584,  756,  756,  729,  721,  688,  584,  721,  756,
 /*   120 */   551,  721,  736,  756,  756,  733,  555,  584,  531,  721,
 /*   130 */   733,  721,  740,  584,  752,  721,  729,  756,  756,  555,
 /*   140 */   756,  756,  721,  733,  729,  721,  522,  522,  756,  563,
 /*   150 */   756,  567,  535,  756,  756,  756,  756,  756,  756,  756,
 /*   160 */   756,  756,  756,  756,  746,  756,  549,  642,  756,  756,
 /*   170 */   746,  746,  744,  756,  750,  582,  756,  575,  756,  756,
 /*   180 */   756,  756,  756,  756,  746,  756,  756,  738,  612,  612,
 /*   190 */   612,  612,  612,  608,  608,  608,  608,  608,  612,  608,
 /*   200 */   608,  608,  612,  612,  522,  612,  608,  522,  612,  659,
 /*   210 */   660,  661,  663,  664,  665,  666,  756,  670,  667,  668,
 /*   220 */   669,  756,  756,  756,  756,  756,  756,  756,  756,  756,
 /*   230 */   756,  756,  676,  756,  756,  700,  756,  756,  756,  588,
 /*   240 */   756,  756,  671,  672,  673,  756,  756,  756,  756,  756,
 /*   250 */   706,  756,  756,  702,  720,  719,  756,  730,  756,  756,
 /*   260 */   756,  500,  570,  756,  756,  756,  517,  756,  756,  558,
 /*   270 */   690,  756,  539,  756,  756,  716,  756,  756,  756,  756,
 /*   280 */   756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
 /*   290 */   756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
 /*   300 */   689,  513,  534,  536,  520,  537,  519,  489,  538,  655,
 /*   310 */   515,  540,  514,  509,  508,  554,  755,  734,  728,  545,
 /*   320 */   546,  604,  603,  574,  654,  548,  602,  601,  651,  552,
 /*   330 */   583,  585,  579,  578,  557,  595,  553,  550,  556,  562,
 /*   340 */   594,  609,  507,  561,  566,  614,  565,  615,  564,  616,
 /*   350 */   569,  617,  568,  618,  559,  743,  619,  503,  593,  502,
 /*   360 */   499,  592,  629,  498,  497,  496,  495,  631,  494,  493,
 /*   370 */   492,  491,  490,  732,  637,  731,  591,  596,  581,  590,
 /*   380 */   645,  580,  586,  724,  727,  647,  726,  725,  506,  723,
 /*   390 */   699,  697,  712,  653,  713,  718,  717,  643,  488,  613,
 /*   400 */   641,  640,  639,  620,  703,  621,  701,  710,  511,  709,
 /*   410 */   707,  705,  622,  692,  623,  691,  624,  690,  625,  708,
 /*   420 */   626,  695,  627,  694,  628,  687,  510,  686,  685,  505,
 /*   430 */   633,  684,  487,  683,  682,  635,  681,  680,  679,  678,
 /*   440 */   677,  722,  638,  696,  521,  675,  674,  644,  662,  512,
 /*   450 */   658,  657,  504,  526,  525,  527,  524,  532,  529,  530,
 /*   460 */   523,  542,  737,  649,  735,  572,  589,  739,  573,  600,
 /*   470 */   576,  571,  741,  599,  598,  597,  528,  751,  745,  747,
 /*   480 */   656,  753,  605,  533,  518,
};
#define YY_SZ_ACTTAB (int)(sizeof(yy_action)/sizeof(yy_action[0]))

/* The next table maps tokens into fallback tokens.  If a construct
** like the following:
** 
**      %fallback ID X Y Z.
**
** appears in the grammar, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
*/
#ifdef YYFALLBACK
static const YYCODETYPE yyFallback[] = {
};
#endif /* YYFALLBACK */

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
*/
struct yyStackEntry {
  YYACTIONTYPE stateno;  /* The state-number */
  YYCODETYPE major;      /* The major token value.  This is the code
                         ** number for the token at this stack level */
  YYMINORTYPE minor;     /* The user-supplied minor token value.  This
                         ** is the value of the token  */
};
typedef struct yyStackEntry yyStackEntry;

/* The state of the parser is completely contained in an instance of
** the following structure */
struct yyParser {
  int yyidx;                    /* Index of top element in stack */
#ifdef YYTRACKMAXSTACKDEPTH
  int yyidxMax;                 /* Maximum value of yyidx */
#endif
  int yyerrcnt;                 /* Shifts left before out of the error */
  umodParseARG_SDECL                /* A place to hold %extra_argument */
#if YYSTACKDEPTH<=0
  int yystksz;                  /* Current side of the stack */
  yyStackEntry *yystack;        /* The parser's stack */
#else
  yyStackEntry yystack[YYSTACKDEPTH];  /* The parser's stack */
#endif
};
typedef struct yyParser yyParser;

#ifndef NDEBUG
#include <stdio.h>
static FILE *yyTraceFILE = 0;
static char *yyTracePrompt = 0;
#endif /* NDEBUG */

#ifndef NDEBUG
/* 
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL 
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
void umodParseTrace(FILE *TraceFILE, char *zTracePrompt){
  yyTraceFILE = TraceFILE;
  yyTracePrompt = zTracePrompt;
  if( yyTraceFILE==0 ) yyTracePrompt = 0;
  else if( yyTracePrompt==0 ) yyTraceFILE = 0;
}
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static const char *const yyTokenName[] = { 
  "$",             "OR",            "AND",           "NOT",         
  "REL_OP",        "ADD_OP_PARTIAL",  "PLUS",          "MUL_OP_PARTIAL",
  "DOT_STAR",      "EXP_OP",        "WITHIN",        "SEMICOLON",   
  "CLASS",         "MODEL",         "RECORD",        "BLOCK",       
  "CONNECTOR",     "TYPE",          "PACKAGE",       "FUNCTION",    
  "OPERATOR_FUNCTION",  "OPERATOR",      "PURE",          "IMPURE",      
  "IDENT",         "EQUAL",         "DER",           "OPAREN",      
  "COMMA",         "CPAREN",        "EXTENDS",       "ENUMERATION", 
  "END_IDENT",     "COLON",         "REPLACEABLE",   "IMPORT",      
  "DOT",           "STAR",          "OBRACE",        "CBRACE",      
  "PUBLIC",        "PROTECTED",     "EXTERNAL",      "STRING",      
  "CONSTRAINEDBY",  "FLOW",          "STREAM",        "DISCRETE",    
  "PARAMETER",     "CONSTANT",      "INPUT",         "OUTPUT",      
  "IF",            "ASSIGN_OP",     "REDECLARE",     "INITIAL_EQUATION",
  "EQUATION",      "INITIAL_ALGORITHM",  "ALGORITHM",     "BREAK",       
  "RETURN",        "THEN",          "END_IF",        "ELSEIF",      
  "ELSE",          "FOR",           "LOOP",          "END_FOR",     
  "IN",            "WHILE",         "END_WHILE",     "WHEN",        
  "END_WHEN",      "ELSEWHEN",      "CONNECT",       "UNSIGNED_NUMBER",
  "OBRACKET",      "CBRACKET",      "END",           "TRUE",        
  "FALSE",         "INITIAL",       "ANNOTATION",    "EACH",        
  "ENCAPSULATED",  "EXPANDABLE",    "INNER",         "FINAL",       
  "OUTER",         "PARTIAL",       "error",         "program",     
  "stored_definition",  "opt_name",      "opt_final",     "class_definition",
  "opt_encapsulated",  "class_prefixes",  "class_specifier",  "opt_partial", 
  "kind",          "opt_operator",  "opt_expandable",  "opt_purity",  
  "string_comment",  "composition",   "end_ident",     "short_class_specifier",
  "name",          "ident_list",    "comment",       "opt_class_modification",
  "base_prefix",   "opt_array_subscripts",  "opt_enum_list_or_colon",  "type_prefix", 
  "opt_enum_list",  "enum_list",     "enumeration_literal",  "element_list",
  "section_list",  "opt_external",  "opt_annotation_semicolon",  "element",     
  "import_clause",  "extends_clause",  "element_decorations",  "class_definition_or_component_clause",
  "opt_constraining_clause_comment",  "opt_redeclare",  "opt_inner",     "opt_outer",   
  "component_clause",  "constraining_clause",  "opt_import_filter",  "import_list", 
  "section",       "algorithm_section",  "equation_section",  "opt_language_specification",
  "opt_external_function_call",  "opt_annotation",  "opt_expression_list",  "component_reference",
  "opt_constraining_clause",  "type_specifier",  "component_list",  "flow_prefix", 
  "variability_prefix",  "causality_prefix",  "component_declaration",  "declaration", 
  "opt_condition_attribute",  "opt_modification",  "expression",    "modification",
  "class_modification",  "opt_eq_expression",  "opt_argument_list",  "argument_list",
  "argument",      "element_modification_or_replacable",  "element_redeclaration",  "opt_each",    
  "element_modification_or_replacable_definition",  "element_modification",  "element_replacable",  "element_redeclaration_definition",
  "short_class_definition",  "component_clause1",  "component_declaration1",  "equation_list",
  "equation",      "statement_list",  "statement",     "simple_expression",
  "if_equation",   "for_equation",  "connect_clause",  "when_equation",
  "fname",         "function_call_args",  "output_expression_list",  "if_statement",
  "for_statement",  "while_statement",  "when_statement",  "elseif_equation",
  "elseif_statement",  "for_indices",   "for_index",     "opt_in_expression",
  "elsewhen_equation",  "elsewhen_statement",  "if_expression",  "elseif_else_expression",
  "basic_expression",  "primary",       "primary_boolean",  "primary_operator",
  "expression_matrix",  "function_arguments",  "opt_function_arguments",  "function_argument",
  "named_arguments",  "opt_named_arguments",  "named_argument",  "expression_list",
  "array_subscripts",  "subscripts",    "subscript",     "string_concatenation",
  "annotation",  
};
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing reduce actions, the names of all rules are required.
*/
static const char *const yyRuleName[] = {
 /*   0 */ "program ::= stored_definition",
 /*   1 */ "stored_definition ::=",
 /*   2 */ "stored_definition ::= WITHIN opt_name SEMICOLON",
 /*   3 */ "stored_definition ::= stored_definition opt_final class_definition SEMICOLON",
 /*   4 */ "class_definition ::= opt_encapsulated class_prefixes class_specifier",
 /*   5 */ "class_prefixes ::= opt_partial kind",
 /*   6 */ "kind ::= CLASS",
 /*   7 */ "kind ::= MODEL",
 /*   8 */ "kind ::= opt_operator RECORD",
 /*   9 */ "kind ::= BLOCK",
 /*  10 */ "kind ::= opt_expandable CONNECTOR",
 /*  11 */ "kind ::= TYPE",
 /*  12 */ "kind ::= PACKAGE",
 /*  13 */ "kind ::= opt_purity FUNCTION",
 /*  14 */ "kind ::= opt_purity OPERATOR_FUNCTION",
 /*  15 */ "kind ::= OPERATOR",
 /*  16 */ "opt_purity ::=",
 /*  17 */ "opt_purity ::= PURE",
 /*  18 */ "opt_purity ::= IMPURE",
 /*  19 */ "class_specifier ::= IDENT string_comment composition end_ident",
 /*  20 */ "class_specifier ::= short_class_specifier",
 /*  21 */ "class_specifier ::= IDENT EQUAL DER OPAREN name COMMA ident_list CPAREN comment",
 /*  22 */ "class_specifier ::= EXTENDS IDENT opt_class_modification string_comment composition end_ident",
 /*  23 */ "short_class_specifier ::= IDENT EQUAL base_prefix name opt_array_subscripts opt_class_modification comment",
 /*  24 */ "short_class_specifier ::= IDENT EQUAL ENUMERATION OPAREN opt_enum_list_or_colon CPAREN comment",
 /*  25 */ "ident_list ::= IDENT",
 /*  26 */ "ident_list ::= ident_list COMMA IDENT",
 /*  27 */ "end_ident ::= END_IDENT",
 /*  28 */ "base_prefix ::= type_prefix",
 /*  29 */ "opt_enum_list_or_colon ::= opt_enum_list",
 /*  30 */ "opt_enum_list_or_colon ::= COLON",
 /*  31 */ "opt_enum_list ::=",
 /*  32 */ "opt_enum_list ::= enum_list",
 /*  33 */ "enum_list ::= enumeration_literal",
 /*  34 */ "enum_list ::= enum_list COMMA enumeration_literal",
 /*  35 */ "enumeration_literal ::= IDENT comment",
 /*  36 */ "composition ::= element_list section_list opt_external opt_annotation_semicolon",
 /*  37 */ "element_list ::=",
 /*  38 */ "element_list ::= element_list element SEMICOLON",
 /*  39 */ "element ::= import_clause",
 /*  40 */ "element ::= extends_clause",
 /*  41 */ "element ::= element_decorations class_definition_or_component_clause",
 /*  42 */ "element ::= element_decorations REPLACEABLE class_definition_or_component_clause opt_constraining_clause_comment",
 /*  43 */ "element_decorations ::= opt_redeclare opt_final opt_inner opt_outer",
 /*  44 */ "class_definition_or_component_clause ::= class_definition",
 /*  45 */ "class_definition_or_component_clause ::= component_clause",
 /*  46 */ "opt_constraining_clause_comment ::=",
 /*  47 */ "opt_constraining_clause_comment ::= constraining_clause comment",
 /*  48 */ "import_clause ::= IMPORT IDENT EQUAL name comment",
 /*  49 */ "import_clause ::= IMPORT name opt_import_filter comment",
 /*  50 */ "opt_import_filter ::=",
 /*  51 */ "opt_import_filter ::= DOT_STAR",
 /*  52 */ "opt_import_filter ::= DOT STAR",
 /*  53 */ "opt_import_filter ::= DOT OBRACE import_list CBRACE",
 /*  54 */ "import_list ::= IDENT",
 /*  55 */ "import_list ::= IDENT COMMA import_list",
 /*  56 */ "section_list ::=",
 /*  57 */ "section_list ::= section_list section",
 /*  58 */ "section ::= PUBLIC element_list",
 /*  59 */ "section ::= PROTECTED element_list",
 /*  60 */ "section ::= algorithm_section",
 /*  61 */ "section ::= equation_section",
 /*  62 */ "opt_external ::=",
 /*  63 */ "opt_external ::= EXTERNAL opt_language_specification opt_external_function_call opt_annotation SEMICOLON",
 /*  64 */ "opt_language_specification ::=",
 /*  65 */ "opt_language_specification ::= STRING",
 /*  66 */ "opt_external_function_call ::=",
 /*  67 */ "opt_external_function_call ::= IDENT OPAREN opt_expression_list CPAREN",
 /*  68 */ "opt_external_function_call ::= component_reference EQUAL IDENT OPAREN opt_expression_list CPAREN",
 /*  69 */ "extends_clause ::= EXTENDS name opt_class_modification opt_annotation",
 /*  70 */ "opt_constraining_clause ::=",
 /*  71 */ "opt_constraining_clause ::= constraining_clause",
 /*  72 */ "constraining_clause ::= CONSTRAINEDBY name opt_class_modification",
 /*  73 */ "component_clause ::= type_prefix type_specifier opt_array_subscripts component_list",
 /*  74 */ "type_prefix ::= flow_prefix variability_prefix causality_prefix",
 /*  75 */ "flow_prefix ::=",
 /*  76 */ "flow_prefix ::= FLOW",
 /*  77 */ "flow_prefix ::= STREAM",
 /*  78 */ "variability_prefix ::=",
 /*  79 */ "variability_prefix ::= DISCRETE",
 /*  80 */ "variability_prefix ::= PARAMETER",
 /*  81 */ "variability_prefix ::= CONSTANT",
 /*  82 */ "causality_prefix ::=",
 /*  83 */ "causality_prefix ::= INPUT",
 /*  84 */ "causality_prefix ::= OUTPUT",
 /*  85 */ "type_specifier ::= name",
 /*  86 */ "component_list ::= component_declaration",
 /*  87 */ "component_list ::= component_list COMMA component_declaration",
 /*  88 */ "component_declaration ::= declaration opt_condition_attribute comment",
 /*  89 */ "declaration ::= IDENT opt_array_subscripts opt_modification",
 /*  90 */ "opt_condition_attribute ::=",
 /*  91 */ "opt_condition_attribute ::= IF expression",
 /*  92 */ "opt_modification ::=",
 /*  93 */ "opt_modification ::= modification",
 /*  94 */ "modification ::= class_modification opt_eq_expression",
 /*  95 */ "modification ::= EQUAL expression",
 /*  96 */ "modification ::= ASSIGN_OP expression",
 /*  97 */ "opt_eq_expression ::=",
 /*  98 */ "opt_eq_expression ::= EQUAL expression",
 /*  99 */ "opt_class_modification ::=",
 /* 100 */ "opt_class_modification ::= class_modification",
 /* 101 */ "class_modification ::= OPAREN opt_argument_list CPAREN",
 /* 102 */ "opt_argument_list ::=",
 /* 103 */ "opt_argument_list ::= argument_list",
 /* 104 */ "argument_list ::= argument",
 /* 105 */ "argument_list ::= argument_list COMMA argument",
 /* 106 */ "argument ::= element_modification_or_replacable",
 /* 107 */ "argument ::= element_redeclaration",
 /* 108 */ "element_modification_or_replacable ::= opt_each opt_final element_modification_or_replacable_definition",
 /* 109 */ "element_modification_or_replacable_definition ::= element_modification",
 /* 110 */ "element_modification_or_replacable_definition ::= element_replacable",
 /* 111 */ "element_modification ::= name opt_modification string_comment",
 /* 112 */ "element_redeclaration ::= REDECLARE opt_each opt_final element_redeclaration_definition",
 /* 113 */ "element_redeclaration_definition ::= short_class_definition",
 /* 114 */ "element_redeclaration_definition ::= component_clause1",
 /* 115 */ "element_redeclaration_definition ::= element_replacable",
 /* 116 */ "element_replacable ::= REPLACEABLE short_class_definition opt_constraining_clause",
 /* 117 */ "element_replacable ::= REPLACEABLE component_clause1 opt_constraining_clause",
 /* 118 */ "component_clause1 ::= type_prefix type_specifier component_declaration1",
 /* 119 */ "component_declaration1 ::= declaration comment",
 /* 120 */ "short_class_definition ::= class_prefixes short_class_specifier",
 /* 121 */ "equation_section ::= INITIAL_EQUATION equation_list",
 /* 122 */ "equation_section ::= EQUATION equation_list",
 /* 123 */ "equation_list ::=",
 /* 124 */ "equation_list ::= equation_list equation SEMICOLON",
 /* 125 */ "algorithm_section ::= INITIAL_ALGORITHM statement_list",
 /* 126 */ "algorithm_section ::= ALGORITHM statement_list",
 /* 127 */ "statement_list ::=",
 /* 128 */ "statement_list ::= statement_list statement SEMICOLON",
 /* 129 */ "equation ::= simple_expression EQUAL expression comment",
 /* 130 */ "equation ::= if_equation comment",
 /* 131 */ "equation ::= for_equation comment",
 /* 132 */ "equation ::= connect_clause comment",
 /* 133 */ "equation ::= when_equation comment",
 /* 134 */ "equation ::= fname function_call_args comment",
 /* 135 */ "statement ::= component_reference ASSIGN_OP expression comment",
 /* 136 */ "statement ::= component_reference function_call_args comment",
 /* 137 */ "statement ::= OPAREN output_expression_list CPAREN ASSIGN_OP component_reference function_call_args comment",
 /* 138 */ "statement ::= BREAK comment",
 /* 139 */ "statement ::= RETURN comment",
 /* 140 */ "statement ::= if_statement comment",
 /* 141 */ "statement ::= for_statement comment",
 /* 142 */ "statement ::= while_statement comment",
 /* 143 */ "statement ::= when_statement comment",
 /* 144 */ "if_equation ::= IF expression THEN equation_list elseif_equation END_IF",
 /* 145 */ "elseif_equation ::=",
 /* 146 */ "elseif_equation ::= ELSEIF expression THEN equation_list elseif_equation",
 /* 147 */ "elseif_equation ::= ELSE equation_list",
 /* 148 */ "if_statement ::= IF expression THEN statement_list elseif_statement END_IF",
 /* 149 */ "elseif_statement ::=",
 /* 150 */ "elseif_statement ::= ELSEIF expression THEN statement_list elseif_statement",
 /* 151 */ "elseif_statement ::= ELSE statement_list",
 /* 152 */ "for_equation ::= FOR for_indices LOOP equation_list END_FOR",
 /* 153 */ "for_statement ::= FOR for_indices LOOP statement_list END_FOR",
 /* 154 */ "for_indices ::= for_index",
 /* 155 */ "for_indices ::= for_indices COMMA for_index",
 /* 156 */ "for_index ::= IDENT opt_in_expression",
 /* 157 */ "opt_in_expression ::=",
 /* 158 */ "opt_in_expression ::= IN expression",
 /* 159 */ "while_statement ::= WHILE expression LOOP statement_list END_WHILE",
 /* 160 */ "when_equation ::= WHEN expression THEN equation_list elsewhen_equation END_WHEN",
 /* 161 */ "elsewhen_equation ::=",
 /* 162 */ "elsewhen_equation ::= ELSEWHEN expression THEN equation_list elsewhen_equation",
 /* 163 */ "elsewhen_equation ::= ELSE equation_list",
 /* 164 */ "when_statement ::= WHEN expression THEN statement_list elsewhen_statement END_WHEN",
 /* 165 */ "elsewhen_statement ::=",
 /* 166 */ "elsewhen_statement ::= ELSEWHEN expression THEN statement_list elsewhen_statement",
 /* 167 */ "elsewhen_statement ::= ELSE statement_list",
 /* 168 */ "connect_clause ::= CONNECT OPAREN component_reference COMMA component_reference CPAREN",
 /* 169 */ "expression ::= simple_expression",
 /* 170 */ "expression ::= if_expression",
 /* 171 */ "if_expression ::= IF expression THEN expression elseif_else_expression",
 /* 172 */ "elseif_else_expression ::= ELSEIF expression THEN expression elseif_else_expression",
 /* 173 */ "elseif_else_expression ::= ELSE expression",
 /* 174 */ "simple_expression ::= basic_expression",
 /* 175 */ "simple_expression ::= basic_expression COLON basic_expression",
 /* 176 */ "simple_expression ::= basic_expression COLON basic_expression COLON basic_expression",
 /* 177 */ "basic_expression ::= primary",
 /* 178 */ "basic_expression ::= basic_expression OR basic_expression",
 /* 179 */ "basic_expression ::= basic_expression AND basic_expression",
 /* 180 */ "basic_expression ::= NOT basic_expression",
 /* 181 */ "basic_expression ::= basic_expression REL_OP basic_expression",
 /* 182 */ "basic_expression ::= basic_expression ADD_OP_PARTIAL basic_expression",
 /* 183 */ "basic_expression ::= basic_expression PLUS basic_expression",
 /* 184 */ "basic_expression ::= ADD_OP_PARTIAL basic_expression",
 /* 185 */ "basic_expression ::= PLUS basic_expression",
 /* 186 */ "basic_expression ::= basic_expression MUL_OP_PARTIAL basic_expression",
 /* 187 */ "basic_expression ::= basic_expression DOT_STAR basic_expression",
 /* 188 */ "basic_expression ::= basic_expression EXP_OP basic_expression",
 /* 189 */ "primary ::= UNSIGNED_NUMBER",
 /* 190 */ "primary ::= STRING",
 /* 191 */ "primary ::= component_reference",
 /* 192 */ "primary ::= primary_boolean",
 /* 193 */ "primary ::= fname function_call_args",
 /* 194 */ "primary ::= primary_operator function_call_args",
 /* 195 */ "primary ::= OPAREN output_expression_list CPAREN",
 /* 196 */ "primary ::= OBRACKET expression_matrix CBRACKET",
 /* 197 */ "primary ::= OBRACE function_arguments CBRACE",
 /* 198 */ "primary ::= END",
 /* 199 */ "primary_boolean ::= TRUE",
 /* 200 */ "primary_boolean ::= FALSE",
 /* 201 */ "primary_operator ::= DER",
 /* 202 */ "primary_operator ::= INITIAL",
 /* 203 */ "opt_name ::=",
 /* 204 */ "opt_name ::= name",
 /* 205 */ "name ::= IDENT",
 /* 206 */ "name ::= DOT IDENT",
 /* 207 */ "name ::= name DOT IDENT",
 /* 208 */ "fname ::= component_reference",
 /* 209 */ "component_reference ::= IDENT opt_array_subscripts",
 /* 210 */ "component_reference ::= DOT IDENT opt_array_subscripts",
 /* 211 */ "component_reference ::= component_reference DOT IDENT opt_array_subscripts",
 /* 212 */ "function_call_args ::= OPAREN opt_function_arguments CPAREN",
 /* 213 */ "opt_function_arguments ::=",
 /* 214 */ "opt_function_arguments ::= function_arguments",
 /* 215 */ "function_arguments ::= function_argument",
 /* 216 */ "function_arguments ::= function_argument COMMA function_arguments",
 /* 217 */ "function_arguments ::= function_argument FOR for_indices",
 /* 218 */ "function_arguments ::= named_arguments",
 /* 219 */ "opt_named_arguments ::=",
 /* 220 */ "opt_named_arguments ::= named_arguments",
 /* 221 */ "named_arguments ::= named_argument",
 /* 222 */ "named_arguments ::= named_argument COMMA named_arguments",
 /* 223 */ "named_argument ::= IDENT EQUAL function_argument",
 /* 224 */ "function_argument ::= FUNCTION name OPAREN opt_named_arguments CPAREN",
 /* 225 */ "function_argument ::= expression",
 /* 226 */ "output_expression_list ::=",
 /* 227 */ "output_expression_list ::= expression",
 /* 228 */ "output_expression_list ::= output_expression_list COMMA expression",
 /* 229 */ "output_expression_list ::= output_expression_list COMMA",
 /* 230 */ "opt_expression_list ::=",
 /* 231 */ "opt_expression_list ::= expression_list",
 /* 232 */ "expression_list ::= expression",
 /* 233 */ "expression_list ::= expression_list COMMA expression",
 /* 234 */ "expression_matrix ::= expression_list",
 /* 235 */ "expression_matrix ::= expression_matrix SEMICOLON expression_list",
 /* 236 */ "opt_array_subscripts ::=",
 /* 237 */ "opt_array_subscripts ::= array_subscripts",
 /* 238 */ "array_subscripts ::= OBRACKET subscripts CBRACKET",
 /* 239 */ "subscripts ::= subscript",
 /* 240 */ "subscripts ::= subscripts COMMA subscript",
 /* 241 */ "subscript ::= expression",
 /* 242 */ "subscript ::= COLON",
 /* 243 */ "comment ::= string_comment opt_annotation",
 /* 244 */ "string_comment ::=",
 /* 245 */ "string_comment ::= string_concatenation",
 /* 246 */ "string_concatenation ::= string_concatenation PLUS STRING",
 /* 247 */ "string_concatenation ::= STRING",
 /* 248 */ "opt_annotation ::=",
 /* 249 */ "opt_annotation ::= annotation",
 /* 250 */ "annotation ::= ANNOTATION class_modification",
 /* 251 */ "opt_annotation_semicolon ::=",
 /* 252 */ "opt_annotation_semicolon ::= annotation SEMICOLON",
 /* 253 */ "opt_each ::=",
 /* 254 */ "opt_each ::= EACH",
 /* 255 */ "opt_encapsulated ::=",
 /* 256 */ "opt_encapsulated ::= ENCAPSULATED",
 /* 257 */ "opt_expandable ::=",
 /* 258 */ "opt_expandable ::= EXPANDABLE",
 /* 259 */ "opt_inner ::=",
 /* 260 */ "opt_inner ::= INNER",
 /* 261 */ "opt_final ::=",
 /* 262 */ "opt_final ::= FINAL",
 /* 263 */ "opt_operator ::=",
 /* 264 */ "opt_operator ::= OPERATOR",
 /* 265 */ "opt_outer ::=",
 /* 266 */ "opt_outer ::= OUTER",
 /* 267 */ "opt_partial ::=",
 /* 268 */ "opt_partial ::= PARTIAL",
 /* 269 */ "opt_redeclare ::=",
 /* 270 */ "opt_redeclare ::= REDECLARE",
};
#endif /* NDEBUG */


#if YYSTACKDEPTH<=0
/*
** Try to increase the size of the parser stack.
*/
static void yyGrowStack(yyParser *p){
  int newSize;
  yyStackEntry *pNew;

  newSize = p->yystksz*2 + 100;
  pNew = realloc(p->yystack, newSize*sizeof(pNew[0]));
  if( pNew ){
    p->yystack = pNew;
    p->yystksz = newSize;
#ifndef NDEBUG
    if( yyTraceFILE ){
      fprintf(yyTraceFILE,"%sStack grows to %d entries!\n",
              yyTracePrompt, p->yystksz);
    }
#endif
  }
}
#endif

/* 
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to umodParse and umodParseFree.
*/
void *umodParseAlloc(void *(*mallocProc)(size_t)){
  yyParser *pParser;
  pParser = (yyParser*)(*mallocProc)( (size_t)sizeof(yyParser) );
  if( pParser ){
    pParser->yyidx = -1;
#ifdef YYTRACKMAXSTACKDEPTH
    pParser->yyidxMax = 0;
#endif
#if YYSTACKDEPTH<=0
    pParser->yystack = NULL;
    pParser->yystksz = 0;
    yyGrowStack(pParser);
#endif
  }
  return pParser;
}

/* The following function deletes the value associated with a
** symbol.  The symbol can be either a terminal or nonterminal.
** "yymajor" is the symbol code, and "yypminor" is a pointer to
** the value.
*/
static void yy_destructor(
  yyParser *yypParser,    /* The parser */
  YYCODETYPE yymajor,     /* Type code for object to destroy */
  YYMINORTYPE *yypminor   /* The object to be destroyed */
){
  umodParseARG_FETCH;
  switch( yymajor ){
    /* Here is inserted the actions which take place when a
    ** terminal or non-terminal is destroyed.  This can happen
    ** when the symbol is popped from the stack during a
    ** reduce or during error processing or when a parser is 
    ** being destroyed before it is finished parsing.
    **
    ** Note: during a reduce, the only symbols destroyed are those
    ** which appear on the RHS of the rule, but which are not used
    ** inside the C code.
    */
    default:  break;   /* If no destructor action specified: do nothing */
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
**
** Return the major token number for the symbol popped.
*/
static int yy_pop_parser_stack(yyParser *pParser){
  YYCODETYPE yymajor;
  yyStackEntry *yytos = &pParser->yystack[pParser->yyidx];

  if( pParser->yyidx<0 ) return 0;
#ifndef NDEBUG
  if( yyTraceFILE && pParser->yyidx>=0 ){
    fprintf(yyTraceFILE,"%sPopping %s\n",
      yyTracePrompt,
      yyTokenName[yytos->major]);
  }
#endif
  yymajor = yytos->major;
  yy_destructor(pParser, yymajor, &yytos->minor);
  pParser->yyidx--;
  return yymajor;
}

/* 
** Deallocate and destroy a parser.  Destructors are all called for
** all stack elements before shutting the parser down.
**
** Inputs:
** <ul>
** <li>  A pointer to the parser.  This should be a pointer
**       obtained from umodParseAlloc.
** <li>  A pointer to a function used to reclaim memory obtained
**       from malloc.
** </ul>
*/
void umodParseFree(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*)     /* Function used to reclaim memory */
){
  yyParser *pParser = (yyParser*)p;
  if( pParser==0 ) return;
  while( pParser->yyidx>=0 ) yy_pop_parser_stack(pParser);
#if YYSTACKDEPTH<=0
  free(pParser->yystack);
#endif
  (*freeProc)((void*)pParser);
}

/*
** Return the peak depth of the stack for a parser.
*/
#ifdef YYTRACKMAXSTACKDEPTH
int umodParseStackPeak(void *p){
  yyParser *pParser = (yyParser*)p;
  return pParser->yyidxMax;
}
#endif

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_shift_action(
  yyParser *pParser,        /* The parser */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
  int stateno = pParser->yystack[pParser->yyidx].stateno;
 
  if( stateno>YY_SHIFT_MAX || (i = yy_shift_ofst[stateno])==YY_SHIFT_USE_DFLT ){
    return yy_default[stateno];
  }
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
  if( i<0 || i>=YY_SZ_ACTTAB || yy_lookahead[i]!=iLookAhead ){
    if( iLookAhead>0 ){
#ifdef YYFALLBACK
      YYCODETYPE iFallback;            /* Fallback token */
      if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])
             && (iFallback = yyFallback[iLookAhead])!=0 ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
             yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);
        }
#endif
        return yy_find_shift_action(pParser, iFallback);
      }
#endif
#ifdef YYWILDCARD
      {
        int j = i - iLookAhead + YYWILDCARD;
        if( j>=0 && j<YY_SZ_ACTTAB && yy_lookahead[j]==YYWILDCARD ){
#ifndef NDEBUG
          if( yyTraceFILE ){
            fprintf(yyTraceFILE, "%sWILDCARD %s => %s\n",
               yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[YYWILDCARD]);
          }
#endif /* NDEBUG */
          return yy_action[j];
        }
      }
#endif /* YYWILDCARD */
    }
    return yy_default[stateno];
  }else{
    return yy_action[i];
  }
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_reduce_action(
  int stateno,              /* Current state number */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
#ifdef YYERRORSYMBOL
  if( stateno>YY_REDUCE_MAX ){
    return yy_default[stateno];
  }
#else
  assert( stateno<=YY_REDUCE_MAX );
#endif
  i = yy_reduce_ofst[stateno];
  assert( i!=YY_REDUCE_USE_DFLT );
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
#ifdef YYERRORSYMBOL
  if( i<0 || i>=YY_SZ_ACTTAB || yy_lookahead[i]!=iLookAhead ){
    return yy_default[stateno];
  }
#else
  assert( i>=0 && i<YY_SZ_ACTTAB );
  assert( yy_lookahead[i]==iLookAhead );
#endif
  return yy_action[i];
}

/*
** The following routine is called if the stack overflows.
*/
static void yyStackOverflow(yyParser *yypParser, YYMINORTYPE *yypMinor){
   umodParseARG_FETCH;
   yypParser->yyidx--;
#ifndef NDEBUG
   if( yyTraceFILE ){
     fprintf(yyTraceFILE,"%sStack Overflow!\n",yyTracePrompt);
   }
#endif
   while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
   /* Here code is inserted which will execute if the parser
   ** stack every overflows */
#line 35 "/Users/phryne/Desktop/mojito/src/parse/parser/lemon-parser.lm"

    std::cerr<<"Giving up.  Parser stack overflow :( \n";
#line 1237 "/Users/phryne/Desktop/mojito/src/parse/parser/lemon-parser.c"
   umodParseARG_STORE; /* Suppress warning about unused %extra_argument var */
}

/*
** Perform a shift action.
*/
static void yy_shift(
  yyParser *yypParser,          /* The parser to be shifted */
  int yyNewState,               /* The new state to shift in */
  int yyMajor,                  /* The major token to shift in */
  YYMINORTYPE *yypMinor         /* Pointer to the minor token to shift in */
){
  yyStackEntry *yytos;
  yypParser->yyidx++;
#ifdef YYTRACKMAXSTACKDEPTH
  if( yypParser->yyidx>yypParser->yyidxMax ){
    yypParser->yyidxMax = yypParser->yyidx;
  }
#endif
#if YYSTACKDEPTH>0 
  if( yypParser->yyidx>=YYSTACKDEPTH ){
    yyStackOverflow(yypParser, yypMinor);
    return;
  }
#else
  if( yypParser->yyidx>=yypParser->yystksz ){
    yyGrowStack(yypParser);
    if( yypParser->yyidx>=yypParser->yystksz ){
      yyStackOverflow(yypParser, yypMinor);
      return;
    }
  }
#endif
  yytos = &yypParser->yystack[yypParser->yyidx];
  yytos->stateno = (YYACTIONTYPE)yyNewState;
  yytos->major = (YYCODETYPE)yyMajor;
  yytos->minor = *yypMinor;
#ifndef NDEBUG
  if( yyTraceFILE && yypParser->yyidx>0 ){
    int i;
    fprintf(yyTraceFILE,"%sShift %d\n",yyTracePrompt,yyNewState);
    fprintf(yyTraceFILE,"%sStack:",yyTracePrompt);
    for(i=1; i<=yypParser->yyidx; i++)
      fprintf(yyTraceFILE," %s",yyTokenName[yypParser->yystack[i].major]);
    fprintf(yyTraceFILE,"\n");
  }
#endif
}

/* The following table contains information about every rule that
** is used during the reduce.
*/
static const struct {
  YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */
  unsigned char nrhs;     /* Number of right-hand side symbols in the rule */
} yyRuleInfo[] = {
  { 91, 1 },
  { 92, 0 },
  { 92, 3 },
  { 92, 4 },
  { 95, 3 },
  { 97, 2 },
  { 100, 1 },
  { 100, 1 },
  { 100, 2 },
  { 100, 1 },
  { 100, 2 },
  { 100, 1 },
  { 100, 1 },
  { 100, 2 },
  { 100, 2 },
  { 100, 1 },
  { 103, 0 },
  { 103, 1 },
  { 103, 1 },
  { 98, 4 },
  { 98, 1 },
  { 98, 9 },
  { 98, 6 },
  { 107, 7 },
  { 107, 7 },
  { 109, 1 },
  { 109, 3 },
  { 106, 1 },
  { 112, 1 },
  { 114, 1 },
  { 114, 1 },
  { 116, 0 },
  { 116, 1 },
  { 117, 1 },
  { 117, 3 },
  { 118, 2 },
  { 105, 4 },
  { 119, 0 },
  { 119, 3 },
  { 123, 1 },
  { 123, 1 },
  { 123, 2 },
  { 123, 4 },
  { 126, 4 },
  { 127, 1 },
  { 127, 1 },
  { 128, 0 },
  { 128, 2 },
  { 124, 5 },
  { 124, 4 },
  { 134, 0 },
  { 134, 1 },
  { 134, 2 },
  { 134, 4 },
  { 135, 1 },
  { 135, 3 },
  { 120, 0 },
  { 120, 2 },
  { 136, 2 },
  { 136, 2 },
  { 136, 1 },
  { 136, 1 },
  { 121, 0 },
  { 121, 5 },
  { 139, 0 },
  { 139, 1 },
  { 140, 0 },
  { 140, 4 },
  { 140, 6 },
  { 125, 4 },
  { 144, 0 },
  { 144, 1 },
  { 133, 3 },
  { 132, 4 },
  { 115, 3 },
  { 147, 0 },
  { 147, 1 },
  { 147, 1 },
  { 148, 0 },
  { 148, 1 },
  { 148, 1 },
  { 148, 1 },
  { 149, 0 },
  { 149, 1 },
  { 149, 1 },
  { 145, 1 },
  { 146, 1 },
  { 146, 3 },
  { 150, 3 },
  { 151, 3 },
  { 152, 0 },
  { 152, 2 },
  { 153, 0 },
  { 153, 1 },
  { 155, 2 },
  { 155, 2 },
  { 155, 2 },
  { 157, 0 },
  { 157, 2 },
  { 111, 0 },
  { 111, 1 },
  { 156, 3 },
  { 158, 0 },
  { 158, 1 },
  { 159, 1 },
  { 159, 3 },
  { 160, 1 },
  { 160, 1 },
  { 161, 3 },
  { 164, 1 },
  { 164, 1 },
  { 165, 3 },
  { 162, 4 },
  { 167, 1 },
  { 167, 1 },
  { 167, 1 },
  { 166, 3 },
  { 166, 3 },
  { 169, 3 },
  { 170, 2 },
  { 168, 2 },
  { 138, 2 },
  { 138, 2 },
  { 171, 0 },
  { 171, 3 },
  { 137, 2 },
  { 137, 2 },
  { 173, 0 },
  { 173, 3 },
  { 172, 4 },
  { 172, 2 },
  { 172, 2 },
  { 172, 2 },
  { 172, 2 },
  { 172, 3 },
  { 174, 4 },
  { 174, 3 },
  { 174, 7 },
  { 174, 2 },
  { 174, 2 },
  { 174, 2 },
  { 174, 2 },
  { 174, 2 },
  { 174, 2 },
  { 176, 6 },
  { 187, 0 },
  { 187, 5 },
  { 187, 2 },
  { 183, 6 },
  { 188, 0 },
  { 188, 5 },
  { 188, 2 },
  { 177, 5 },
  { 184, 5 },
  { 189, 1 },
  { 189, 3 },
  { 190, 2 },
  { 191, 0 },
  { 191, 2 },
  { 185, 5 },
  { 179, 6 },
  { 192, 0 },
  { 192, 5 },
  { 192, 2 },
  { 186, 6 },
  { 193, 0 },
  { 193, 5 },
  { 193, 2 },
  { 178, 6 },
  { 154, 1 },
  { 154, 1 },
  { 194, 5 },
  { 195, 5 },
  { 195, 2 },
  { 175, 1 },
  { 175, 3 },
  { 175, 5 },
  { 196, 1 },
  { 196, 3 },
  { 196, 3 },
  { 196, 2 },
  { 196, 3 },
  { 196, 3 },
  { 196, 3 },
  { 196, 2 },
  { 196, 2 },
  { 196, 3 },
  { 196, 3 },
  { 196, 3 },
  { 197, 1 },
  { 197, 1 },
  { 197, 1 },
  { 197, 1 },
  { 197, 2 },
  { 197, 2 },
  { 197, 3 },
  { 197, 3 },
  { 197, 3 },
  { 197, 1 },
  { 198, 1 },
  { 198, 1 },
  { 199, 1 },
  { 199, 1 },
  { 93, 0 },
  { 93, 1 },
  { 108, 1 },
  { 108, 2 },
  { 108, 3 },
  { 180, 1 },
  { 143, 2 },
  { 143, 3 },
  { 143, 4 },
  { 181, 3 },
  { 202, 0 },
  { 202, 1 },
  { 201, 1 },
  { 201, 3 },
  { 201, 3 },
  { 201, 1 },
  { 205, 0 },
  { 205, 1 },
  { 204, 1 },
  { 204, 3 },
  { 206, 3 },
  { 203, 5 },
  { 203, 1 },
  { 182, 0 },
  { 182, 1 },
  { 182, 3 },
  { 182, 2 },
  { 142, 0 },
  { 142, 1 },
  { 207, 1 },
  { 207, 3 },
  { 200, 1 },
  { 200, 3 },
  { 113, 0 },
  { 113, 1 },
  { 208, 3 },
  { 209, 1 },
  { 209, 3 },
  { 210, 1 },
  { 210, 1 },
  { 110, 2 },
  { 104, 0 },
  { 104, 1 },
  { 211, 3 },
  { 211, 1 },
  { 141, 0 },
  { 141, 1 },
  { 212, 2 },
  { 122, 0 },
  { 122, 2 },
  { 163, 0 },
  { 163, 1 },
  { 96, 0 },
  { 96, 1 },
  { 102, 0 },
  { 102, 1 },
  { 130, 0 },
  { 130, 1 },
  { 94, 0 },
  { 94, 1 },
  { 101, 0 },
  { 101, 1 },
  { 131, 0 },
  { 131, 1 },
  { 99, 0 },
  { 99, 1 },
  { 129, 0 },
  { 129, 1 },
};

static void yy_accept(yyParser*);  /* Forward Declaration */

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
*/
static void yy_reduce(
  yyParser *yypParser,         /* The parser */
  int yyruleno                 /* Number of the rule by which to reduce */
){
  int yygoto;                     /* The next state */
  int yyact;                      /* The next action */
  YYMINORTYPE yygotominor;        /* The LHS of the rule reduced */
  yyStackEntry *yymsp;            /* The top of the parser's stack */
  int yysize;                     /* Amount to pop the stack */
  umodParseARG_FETCH;
  yymsp = &yypParser->yystack[yypParser->yyidx];
#ifndef NDEBUG
  if( yyTraceFILE && yyruleno>=0 
        && yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) ){
    fprintf(yyTraceFILE, "%sReduce [%s].\n", yyTracePrompt,
      yyRuleName[yyruleno]);
  }
#endif /* NDEBUG */

  /* Silence complaints from purify about yygotominor being uninitialized
  ** in some cases when it is copied into the stack after the following
  ** switch.  yygotominor is uninitialized when a rule reduces that does
  ** not set the value of its left-hand side nonterminal.  Leaving the
  ** value of the nonterminal uninitialized is utterly harmless as long
  ** as the value is never used.  So really the only thing this code
  ** accomplishes is to quieten purify.  
  **
  ** 2007-01-16:  The wireshark project (www.wireshark.org) reports that
  ** without this code, their parser segfaults.  I'm not sure what there
  ** parser is doing to make this happen.  This is the second bug report
  ** from wireshark this week.  Clearly they are stressing Lemon in ways
  ** that it has not been previously stressed...  (SQLite ticket #2172)
  */
  /*memset(&yygotominor, 0, sizeof(yygotominor));*/
  yygotominor = yyzerominor;


  switch( yyruleno ){
  /* Beginning here are the reduction cases.  A typical example
  ** follows:
  **   case 0:
  **  #line <lineno> <grammarfile>
  **     { ... }           // User supplied code
  **  #line <lineno> <thisfile>
  **     break;
  */
      case 0: /* program ::= stored_definition */
      case 1: /* stored_definition ::= */ yytestcase(yyruleno==1);
      case 2: /* stored_definition ::= WITHIN opt_name SEMICOLON */ yytestcase(yyruleno==2);
      case 3: /* stored_definition ::= stored_definition opt_final class_definition SEMICOLON */ yytestcase(yyruleno==3);
      case 4: /* class_definition ::= opt_encapsulated class_prefixes class_specifier */ yytestcase(yyruleno==4);
      case 5: /* class_prefixes ::= opt_partial kind */ yytestcase(yyruleno==5);
      case 6: /* kind ::= CLASS */ yytestcase(yyruleno==6);
      case 7: /* kind ::= MODEL */ yytestcase(yyruleno==7);
      case 8: /* kind ::= opt_operator RECORD */ yytestcase(yyruleno==8);
      case 9: /* kind ::= BLOCK */ yytestcase(yyruleno==9);
      case 10: /* kind ::= opt_expandable CONNECTOR */ yytestcase(yyruleno==10);
      case 11: /* kind ::= TYPE */ yytestcase(yyruleno==11);
      case 12: /* kind ::= PACKAGE */ yytestcase(yyruleno==12);
      case 13: /* kind ::= opt_purity FUNCTION */ yytestcase(yyruleno==13);
      case 14: /* kind ::= opt_purity OPERATOR_FUNCTION */ yytestcase(yyruleno==14);
      case 15: /* kind ::= OPERATOR */ yytestcase(yyruleno==15);
      case 16: /* opt_purity ::= */ yytestcase(yyruleno==16);
      case 17: /* opt_purity ::= PURE */ yytestcase(yyruleno==17);
      case 18: /* opt_purity ::= IMPURE */ yytestcase(yyruleno==18);
      case 19: /* class_specifier ::= IDENT string_comment composition end_ident */ yytestcase(yyruleno==19);
      case 20: /* class_specifier ::= short_class_specifier */ yytestcase(yyruleno==20);
      case 21: /* class_specifier ::= IDENT EQUAL DER OPAREN name COMMA ident_list CPAREN comment */ yytestcase(yyruleno==21);
      case 22: /* class_specifier ::= EXTENDS IDENT opt_class_modification string_comment composition end_ident */ yytestcase(yyruleno==22);
      case 23: /* short_class_specifier ::= IDENT EQUAL base_prefix name opt_array_subscripts opt_class_modification comment */ yytestcase(yyruleno==23);
      case 24: /* short_class_specifier ::= IDENT EQUAL ENUMERATION OPAREN opt_enum_list_or_colon CPAREN comment */ yytestcase(yyruleno==24);
      case 25: /* ident_list ::= IDENT */ yytestcase(yyruleno==25);
      case 26: /* ident_list ::= ident_list COMMA IDENT */ yytestcase(yyruleno==26);
      case 27: /* end_ident ::= END_IDENT */ yytestcase(yyruleno==27);
      case 28: /* base_prefix ::= type_prefix */ yytestcase(yyruleno==28);
      case 29: /* opt_enum_list_or_colon ::= opt_enum_list */ yytestcase(yyruleno==29);
      case 30: /* opt_enum_list_or_colon ::= COLON */ yytestcase(yyruleno==30);
      case 31: /* opt_enum_list ::= */ yytestcase(yyruleno==31);
      case 32: /* opt_enum_list ::= enum_list */ yytestcase(yyruleno==32);
      case 33: /* enum_list ::= enumeration_literal */ yytestcase(yyruleno==33);
      case 34: /* enum_list ::= enum_list COMMA enumeration_literal */ yytestcase(yyruleno==34);
      case 35: /* enumeration_literal ::= IDENT comment */ yytestcase(yyruleno==35);
      case 36: /* composition ::= element_list section_list opt_external opt_annotation_semicolon */ yytestcase(yyruleno==36);
      case 37: /* element_list ::= */ yytestcase(yyruleno==37);
      case 38: /* element_list ::= element_list element SEMICOLON */ yytestcase(yyruleno==38);
      case 39: /* element ::= import_clause */ yytestcase(yyruleno==39);
      case 40: /* element ::= extends_clause */ yytestcase(yyruleno==40);
      case 41: /* element ::= element_decorations class_definition_or_component_clause */ yytestcase(yyruleno==41);
      case 42: /* element ::= element_decorations REPLACEABLE class_definition_or_component_clause opt_constraining_clause_comment */ yytestcase(yyruleno==42);
      case 43: /* element_decorations ::= opt_redeclare opt_final opt_inner opt_outer */ yytestcase(yyruleno==43);
      case 44: /* class_definition_or_component_clause ::= class_definition */ yytestcase(yyruleno==44);
      case 45: /* class_definition_or_component_clause ::= component_clause */ yytestcase(yyruleno==45);
      case 46: /* opt_constraining_clause_comment ::= */ yytestcase(yyruleno==46);
      case 47: /* opt_constraining_clause_comment ::= constraining_clause comment */ yytestcase(yyruleno==47);
      case 48: /* import_clause ::= IMPORT IDENT EQUAL name comment */ yytestcase(yyruleno==48);
      case 49: /* import_clause ::= IMPORT name opt_import_filter comment */ yytestcase(yyruleno==49);
      case 50: /* opt_import_filter ::= */ yytestcase(yyruleno==50);
      case 51: /* opt_import_filter ::= DOT_STAR */ yytestcase(yyruleno==51);
      case 52: /* opt_import_filter ::= DOT STAR */ yytestcase(yyruleno==52);
      case 53: /* opt_import_filter ::= DOT OBRACE import_list CBRACE */ yytestcase(yyruleno==53);
      case 54: /* import_list ::= IDENT */ yytestcase(yyruleno==54);
      case 55: /* import_list ::= IDENT COMMA import_list */ yytestcase(yyruleno==55);
      case 56: /* section_list ::= */ yytestcase(yyruleno==56);
      case 57: /* section_list ::= section_list section */ yytestcase(yyruleno==57);
      case 58: /* section ::= PUBLIC element_list */ yytestcase(yyruleno==58);
      case 59: /* section ::= PROTECTED element_list */ yytestcase(yyruleno==59);
      case 60: /* section ::= algorithm_section */ yytestcase(yyruleno==60);
      case 61: /* section ::= equation_section */ yytestcase(yyruleno==61);
      case 62: /* opt_external ::= */ yytestcase(yyruleno==62);
      case 63: /* opt_external ::= EXTERNAL opt_language_specification opt_external_function_call opt_annotation SEMICOLON */ yytestcase(yyruleno==63);
      case 64: /* opt_language_specification ::= */ yytestcase(yyruleno==64);
      case 65: /* opt_language_specification ::= STRING */ yytestcase(yyruleno==65);
      case 66: /* opt_external_function_call ::= */ yytestcase(yyruleno==66);
      case 67: /* opt_external_function_call ::= IDENT OPAREN opt_expression_list CPAREN */ yytestcase(yyruleno==67);
      case 68: /* opt_external_function_call ::= component_reference EQUAL IDENT OPAREN opt_expression_list CPAREN */ yytestcase(yyruleno==68);
      case 69: /* extends_clause ::= EXTENDS name opt_class_modification opt_annotation */ yytestcase(yyruleno==69);
      case 70: /* opt_constraining_clause ::= */ yytestcase(yyruleno==70);
      case 71: /* opt_constraining_clause ::= constraining_clause */ yytestcase(yyruleno==71);
      case 72: /* constraining_clause ::= CONSTRAINEDBY name opt_class_modification */ yytestcase(yyruleno==72);
      case 73: /* component_clause ::= type_prefix type_specifier opt_array_subscripts component_list */ yytestcase(yyruleno==73);
      case 74: /* type_prefix ::= flow_prefix variability_prefix causality_prefix */ yytestcase(yyruleno==74);
      case 75: /* flow_prefix ::= */ yytestcase(yyruleno==75);
      case 76: /* flow_prefix ::= FLOW */ yytestcase(yyruleno==76);
      case 77: /* flow_prefix ::= STREAM */ yytestcase(yyruleno==77);
      case 78: /* variability_prefix ::= */ yytestcase(yyruleno==78);
      case 79: /* variability_prefix ::= DISCRETE */ yytestcase(yyruleno==79);
      case 80: /* variability_prefix ::= PARAMETER */ yytestcase(yyruleno==80);
      case 81: /* variability_prefix ::= CONSTANT */ yytestcase(yyruleno==81);
      case 82: /* causality_prefix ::= */ yytestcase(yyruleno==82);
      case 83: /* causality_prefix ::= INPUT */ yytestcase(yyruleno==83);
      case 84: /* causality_prefix ::= OUTPUT */ yytestcase(yyruleno==84);
      case 85: /* type_specifier ::= name */ yytestcase(yyruleno==85);
      case 86: /* component_list ::= component_declaration */ yytestcase(yyruleno==86);
      case 87: /* component_list ::= component_list COMMA component_declaration */ yytestcase(yyruleno==87);
      case 88: /* component_declaration ::= declaration opt_condition_attribute comment */ yytestcase(yyruleno==88);
      case 89: /* declaration ::= IDENT opt_array_subscripts opt_modification */ yytestcase(yyruleno==89);
      case 90: /* opt_condition_attribute ::= */ yytestcase(yyruleno==90);
      case 91: /* opt_condition_attribute ::= IF expression */ yytestcase(yyruleno==91);
      case 92: /* opt_modification ::= */ yytestcase(yyruleno==92);
      case 93: /* opt_modification ::= modification */ yytestcase(yyruleno==93);
      case 94: /* modification ::= class_modification opt_eq_expression */ yytestcase(yyruleno==94);
      case 95: /* modification ::= EQUAL expression */ yytestcase(yyruleno==95);
      case 96: /* modification ::= ASSIGN_OP expression */ yytestcase(yyruleno==96);
      case 97: /* opt_eq_expression ::= */ yytestcase(yyruleno==97);
      case 98: /* opt_eq_expression ::= EQUAL expression */ yytestcase(yyruleno==98);
      case 99: /* opt_class_modification ::= */ yytestcase(yyruleno==99);
      case 100: /* opt_class_modification ::= class_modification */ yytestcase(yyruleno==100);
      case 101: /* class_modification ::= OPAREN opt_argument_list CPAREN */ yytestcase(yyruleno==101);
      case 102: /* opt_argument_list ::= */ yytestcase(yyruleno==102);
      case 103: /* opt_argument_list ::= argument_list */ yytestcase(yyruleno==103);
      case 104: /* argument_list ::= argument */ yytestcase(yyruleno==104);
      case 105: /* argument_list ::= argument_list COMMA argument */ yytestcase(yyruleno==105);
      case 106: /* argument ::= element_modification_or_replacable */ yytestcase(yyruleno==106);
      case 107: /* argument ::= element_redeclaration */ yytestcase(yyruleno==107);
      case 108: /* element_modification_or_replacable ::= opt_each opt_final element_modification_or_replacable_definition */ yytestcase(yyruleno==108);
      case 109: /* element_modification_or_replacable_definition ::= element_modification */ yytestcase(yyruleno==109);
      case 110: /* element_modification_or_replacable_definition ::= element_replacable */ yytestcase(yyruleno==110);
      case 111: /* element_modification ::= name opt_modification string_comment */ yytestcase(yyruleno==111);
      case 112: /* element_redeclaration ::= REDECLARE opt_each opt_final element_redeclaration_definition */ yytestcase(yyruleno==112);
      case 113: /* element_redeclaration_definition ::= short_class_definition */ yytestcase(yyruleno==113);
      case 114: /* element_redeclaration_definition ::= component_clause1 */ yytestcase(yyruleno==114);
      case 115: /* element_redeclaration_definition ::= element_replacable */ yytestcase(yyruleno==115);
      case 116: /* element_replacable ::= REPLACEABLE short_class_definition opt_constraining_clause */ yytestcase(yyruleno==116);
      case 117: /* element_replacable ::= REPLACEABLE component_clause1 opt_constraining_clause */ yytestcase(yyruleno==117);
      case 118: /* component_clause1 ::= type_prefix type_specifier component_declaration1 */ yytestcase(yyruleno==118);
      case 119: /* component_declaration1 ::= declaration comment */ yytestcase(yyruleno==119);
      case 120: /* short_class_definition ::= class_prefixes short_class_specifier */ yytestcase(yyruleno==120);
      case 121: /* equation_section ::= INITIAL_EQUATION equation_list */ yytestcase(yyruleno==121);
      case 122: /* equation_section ::= EQUATION equation_list */ yytestcase(yyruleno==122);
      case 123: /* equation_list ::= */ yytestcase(yyruleno==123);
      case 124: /* equation_list ::= equation_list equation SEMICOLON */ yytestcase(yyruleno==124);
      case 125: /* algorithm_section ::= INITIAL_ALGORITHM statement_list */ yytestcase(yyruleno==125);
      case 126: /* algorithm_section ::= ALGORITHM statement_list */ yytestcase(yyruleno==126);
      case 127: /* statement_list ::= */ yytestcase(yyruleno==127);
      case 128: /* statement_list ::= statement_list statement SEMICOLON */ yytestcase(yyruleno==128);
      case 129: /* equation ::= simple_expression EQUAL expression comment */ yytestcase(yyruleno==129);
      case 130: /* equation ::= if_equation comment */ yytestcase(yyruleno==130);
      case 131: /* equation ::= for_equation comment */ yytestcase(yyruleno==131);
      case 132: /* equation ::= connect_clause comment */ yytestcase(yyruleno==132);
      case 133: /* equation ::= when_equation comment */ yytestcase(yyruleno==133);
      case 134: /* equation ::= fname function_call_args comment */ yytestcase(yyruleno==134);
      case 135: /* statement ::= component_reference ASSIGN_OP expression comment */ yytestcase(yyruleno==135);
      case 136: /* statement ::= component_reference function_call_args comment */ yytestcase(yyruleno==136);
      case 137: /* statement ::= OPAREN output_expression_list CPAREN ASSIGN_OP component_reference function_call_args comment */ yytestcase(yyruleno==137);
      case 138: /* statement ::= BREAK comment */ yytestcase(yyruleno==138);
      case 139: /* statement ::= RETURN comment */ yytestcase(yyruleno==139);
      case 140: /* statement ::= if_statement comment */ yytestcase(yyruleno==140);
      case 141: /* statement ::= for_statement comment */ yytestcase(yyruleno==141);
      case 142: /* statement ::= while_statement comment */ yytestcase(yyruleno==142);
      case 143: /* statement ::= when_statement comment */ yytestcase(yyruleno==143);
      case 144: /* if_equation ::= IF expression THEN equation_list elseif_equation END_IF */ yytestcase(yyruleno==144);
      case 145: /* elseif_equation ::= */ yytestcase(yyruleno==145);
      case 146: /* elseif_equation ::= ELSEIF expression THEN equation_list elseif_equation */ yytestcase(yyruleno==146);
      case 147: /* elseif_equation ::= ELSE equation_list */ yytestcase(yyruleno==147);
      case 148: /* if_statement ::= IF expression THEN statement_list elseif_statement END_IF */ yytestcase(yyruleno==148);
      case 149: /* elseif_statement ::= */ yytestcase(yyruleno==149);
      case 150: /* elseif_statement ::= ELSEIF expression THEN statement_list elseif_statement */ yytestcase(yyruleno==150);
      case 151: /* elseif_statement ::= ELSE statement_list */ yytestcase(yyruleno==151);
      case 152: /* for_equation ::= FOR for_indices LOOP equation_list END_FOR */ yytestcase(yyruleno==152);
      case 153: /* for_statement ::= FOR for_indices LOOP statement_list END_FOR */ yytestcase(yyruleno==153);
      case 154: /* for_indices ::= for_index */ yytestcase(yyruleno==154);
      case 155: /* for_indices ::= for_indices COMMA for_index */ yytestcase(yyruleno==155);
      case 156: /* for_index ::= IDENT opt_in_expression */ yytestcase(yyruleno==156);
      case 157: /* opt_in_expression ::= */ yytestcase(yyruleno==157);
      case 158: /* opt_in_expression ::= IN expression */ yytestcase(yyruleno==158);
      case 159: /* while_statement ::= WHILE expression LOOP statement_list END_WHILE */ yytestcase(yyruleno==159);
      case 160: /* when_equation ::= WHEN expression THEN equation_list elsewhen_equation END_WHEN */ yytestcase(yyruleno==160);
      case 161: /* elsewhen_equation ::= */ yytestcase(yyruleno==161);
      case 162: /* elsewhen_equation ::= ELSEWHEN expression THEN equation_list elsewhen_equation */ yytestcase(yyruleno==162);
      case 163: /* elsewhen_equation ::= ELSE equation_list */ yytestcase(yyruleno==163);
      case 164: /* when_statement ::= WHEN expression THEN statement_list elsewhen_statement END_WHEN */ yytestcase(yyruleno==164);
      case 165: /* elsewhen_statement ::= */ yytestcase(yyruleno==165);
      case 166: /* elsewhen_statement ::= ELSEWHEN expression THEN statement_list elsewhen_statement */ yytestcase(yyruleno==166);
      case 167: /* elsewhen_statement ::= ELSE statement_list */ yytestcase(yyruleno==167);
      case 168: /* connect_clause ::= CONNECT OPAREN component_reference COMMA component_reference CPAREN */ yytestcase(yyruleno==168);
      case 169: /* expression ::= simple_expression */ yytestcase(yyruleno==169);
      case 170: /* expression ::= if_expression */ yytestcase(yyruleno==170);
      case 171: /* if_expression ::= IF expression THEN expression elseif_else_expression */ yytestcase(yyruleno==171);
      case 172: /* elseif_else_expression ::= ELSEIF expression THEN expression elseif_else_expression */ yytestcase(yyruleno==172);
      case 173: /* elseif_else_expression ::= ELSE expression */ yytestcase(yyruleno==173);
      case 174: /* simple_expression ::= basic_expression */ yytestcase(yyruleno==174);
      case 175: /* simple_expression ::= basic_expression COLON basic_expression */ yytestcase(yyruleno==175);
      case 176: /* simple_expression ::= basic_expression COLON basic_expression COLON basic_expression */ yytestcase(yyruleno==176);
      case 177: /* basic_expression ::= primary */ yytestcase(yyruleno==177);
      case 178: /* basic_expression ::= basic_expression OR basic_expression */ yytestcase(yyruleno==178);
      case 179: /* basic_expression ::= basic_expression AND basic_expression */ yytestcase(yyruleno==179);
      case 180: /* basic_expression ::= NOT basic_expression */ yytestcase(yyruleno==180);
      case 181: /* basic_expression ::= basic_expression REL_OP basic_expression */ yytestcase(yyruleno==181);
      case 182: /* basic_expression ::= basic_expression ADD_OP_PARTIAL basic_expression */ yytestcase(yyruleno==182);
      case 183: /* basic_expression ::= basic_expression PLUS basic_expression */ yytestcase(yyruleno==183);
      case 184: /* basic_expression ::= ADD_OP_PARTIAL basic_expression */ yytestcase(yyruleno==184);
      case 185: /* basic_expression ::= PLUS basic_expression */ yytestcase(yyruleno==185);
      case 186: /* basic_expression ::= basic_expression MUL_OP_PARTIAL basic_expression */ yytestcase(yyruleno==186);
      case 187: /* basic_expression ::= basic_expression DOT_STAR basic_expression */ yytestcase(yyruleno==187);
      case 188: /* basic_expression ::= basic_expression EXP_OP basic_expression */ yytestcase(yyruleno==188);
      case 189: /* primary ::= UNSIGNED_NUMBER */ yytestcase(yyruleno==189);
      case 190: /* primary ::= STRING */ yytestcase(yyruleno==190);
      case 191: /* primary ::= component_reference */ yytestcase(yyruleno==191);
      case 192: /* primary ::= primary_boolean */ yytestcase(yyruleno==192);
      case 193: /* primary ::= fname function_call_args */ yytestcase(yyruleno==193);
      case 194: /* primary ::= primary_operator function_call_args */ yytestcase(yyruleno==194);
      case 195: /* primary ::= OPAREN output_expression_list CPAREN */ yytestcase(yyruleno==195);
      case 196: /* primary ::= OBRACKET expression_matrix CBRACKET */ yytestcase(yyruleno==196);
      case 197: /* primary ::= OBRACE function_arguments CBRACE */ yytestcase(yyruleno==197);
      case 198: /* primary ::= END */ yytestcase(yyruleno==198);
      case 199: /* primary_boolean ::= TRUE */ yytestcase(yyruleno==199);
      case 200: /* primary_boolean ::= FALSE */ yytestcase(yyruleno==200);
#line 68 "/Users/phryne/Desktop/mojito/src/parse/parser/lemon-parser.lm"
{}
#line 1822 "/Users/phryne/Desktop/mojito/src/parse/parser/lemon-parser.c"
        break;
      default:
      /* (201) primary_operator ::= DER */ yytestcase(yyruleno==201);
      /* (202) primary_operator ::= INITIAL */ yytestcase(yyruleno==202);
      /* (203) opt_name ::= */ yytestcase(yyruleno==203);
      /* (204) opt_name ::= name */ yytestcase(yyruleno==204);
      /* (205) name ::= IDENT */ yytestcase(yyruleno==205);
      /* (206) name ::= DOT IDENT */ yytestcase(yyruleno==206);
      /* (207) name ::= name DOT IDENT */ yytestcase(yyruleno==207);
      /* (208) fname ::= component_reference */ yytestcase(yyruleno==208);
      /* (209) component_reference ::= IDENT opt_array_subscripts */ yytestcase(yyruleno==209);
      /* (210) component_reference ::= DOT IDENT opt_array_subscripts */ yytestcase(yyruleno==210);
      /* (211) component_reference ::= component_reference DOT IDENT opt_array_subscripts */ yytestcase(yyruleno==211);
      /* (212) function_call_args ::= OPAREN opt_function_arguments CPAREN */ yytestcase(yyruleno==212);
      /* (213) opt_function_arguments ::= */ yytestcase(yyruleno==213);
      /* (214) opt_function_arguments ::= function_arguments */ yytestcase(yyruleno==214);
      /* (215) function_arguments ::= function_argument */ yytestcase(yyruleno==215);
      /* (216) function_arguments ::= function_argument COMMA function_arguments */ yytestcase(yyruleno==216);
      /* (217) function_arguments ::= function_argument FOR for_indices */ yytestcase(yyruleno==217);
      /* (218) function_arguments ::= named_arguments */ yytestcase(yyruleno==218);
      /* (219) opt_named_arguments ::= */ yytestcase(yyruleno==219);
      /* (220) opt_named_arguments ::= named_arguments */ yytestcase(yyruleno==220);
      /* (221) named_arguments ::= named_argument */ yytestcase(yyruleno==221);
      /* (222) named_arguments ::= named_argument COMMA named_arguments */ yytestcase(yyruleno==222);
      /* (223) named_argument ::= IDENT EQUAL function_argument */ yytestcase(yyruleno==223);
      /* (224) function_argument ::= FUNCTION name OPAREN opt_named_arguments CPAREN */ yytestcase(yyruleno==224);
      /* (225) function_argument ::= expression */ yytestcase(yyruleno==225);
      /* (226) output_expression_list ::= */ yytestcase(yyruleno==226);
      /* (227) output_expression_list ::= expression */ yytestcase(yyruleno==227);
      /* (228) output_expression_list ::= output_expression_list COMMA expression */ yytestcase(yyruleno==228);
      /* (229) output_expression_list ::= output_expression_list COMMA */ yytestcase(yyruleno==229);
      /* (230) opt_expression_list ::= */ yytestcase(yyruleno==230);
      /* (231) opt_expression_list ::= expression_list */ yytestcase(yyruleno==231);
      /* (232) expression_list ::= expression */ yytestcase(yyruleno==232);
      /* (233) expression_list ::= expression_list COMMA expression */ yytestcase(yyruleno==233);
      /* (234) expression_matrix ::= expression_list */ yytestcase(yyruleno==234);
      /* (235) expression_matrix ::= expression_matrix SEMICOLON expression_list */ yytestcase(yyruleno==235);
      /* (236) opt_array_subscripts ::= */ yytestcase(yyruleno==236);
      /* (237) opt_array_subscripts ::= array_subscripts */ yytestcase(yyruleno==237);
      /* (238) array_subscripts ::= OBRACKET subscripts CBRACKET */ yytestcase(yyruleno==238);
      /* (239) subscripts ::= subscript */ yytestcase(yyruleno==239);
      /* (240) subscripts ::= subscripts COMMA subscript */ yytestcase(yyruleno==240);
      /* (241) subscript ::= expression */ yytestcase(yyruleno==241);
      /* (242) subscript ::= COLON */ yytestcase(yyruleno==242);
      /* (243) comment ::= string_comment opt_annotation */ yytestcase(yyruleno==243);
      /* (244) string_comment ::= */ yytestcase(yyruleno==244);
      /* (245) string_comment ::= string_concatenation */ yytestcase(yyruleno==245);
      /* (246) string_concatenation ::= string_concatenation PLUS STRING */ yytestcase(yyruleno==246);
      /* (247) string_concatenation ::= STRING */ yytestcase(yyruleno==247);
      /* (248) opt_annotation ::= */ yytestcase(yyruleno==248);
      /* (249) opt_annotation ::= annotation */ yytestcase(yyruleno==249);
      /* (250) annotation ::= ANNOTATION class_modification */ yytestcase(yyruleno==250);
      /* (251) opt_annotation_semicolon ::= */ yytestcase(yyruleno==251);
      /* (252) opt_annotation_semicolon ::= annotation SEMICOLON */ yytestcase(yyruleno==252);
      /* (253) opt_each ::= */ yytestcase(yyruleno==253);
      /* (254) opt_each ::= EACH */ yytestcase(yyruleno==254);
      /* (255) opt_encapsulated ::= */ yytestcase(yyruleno==255);
      /* (256) opt_encapsulated ::= ENCAPSULATED */ yytestcase(yyruleno==256);
      /* (257) opt_expandable ::= */ yytestcase(yyruleno==257);
      /* (258) opt_expandable ::= EXPANDABLE */ yytestcase(yyruleno==258);
      /* (259) opt_inner ::= */ yytestcase(yyruleno==259);
      /* (260) opt_inner ::= INNER */ yytestcase(yyruleno==260);
      /* (261) opt_final ::= */ yytestcase(yyruleno==261);
      /* (262) opt_final ::= FINAL */ yytestcase(yyruleno==262);
      /* (263) opt_operator ::= */ yytestcase(yyruleno==263);
      /* (264) opt_operator ::= OPERATOR */ yytestcase(yyruleno==264);
      /* (265) opt_outer ::= */ yytestcase(yyruleno==265);
      /* (266) opt_outer ::= OUTER */ yytestcase(yyruleno==266);
      /* (267) opt_partial ::= */ yytestcase(yyruleno==267);
      /* (268) opt_partial ::= PARTIAL */ yytestcase(yyruleno==268);
      /* (269) opt_redeclare ::= */ yytestcase(yyruleno==269);
      /* (270) opt_redeclare ::= REDECLARE */ yytestcase(yyruleno==270);
        break;
  };
  yygoto = yyRuleInfo[yyruleno].lhs;
  yysize = yyRuleInfo[yyruleno].nrhs;
  yypParser->yyidx -= yysize;
  yyact = yy_find_reduce_action(yymsp[-yysize].stateno,(YYCODETYPE)yygoto);
  if( yyact < YYNSTATE ){
#ifdef NDEBUG
    /* If we are not debugging and the reduce action popped at least
    ** one element off the stack, then we can push the new element back
    ** onto the stack here, and skip the stack overflow test in yy_shift().
    ** That gives a significant speed improvement. */
    if( yysize ){
      yypParser->yyidx++;
      yymsp -= yysize-1;
      yymsp->stateno = (YYACTIONTYPE)yyact;
      yymsp->major = (YYCODETYPE)yygoto;
      yymsp->minor = yygotominor;
    }else
#endif
    {
      yy_shift(yypParser,yyact,yygoto,&yygotominor);
    }
  }else{
    assert( yyact == YYNSTATE + YYNRULE + 1 );
    yy_accept(yypParser);
  }
}

/*
** The following code executes when the parse fails
*/
#ifndef YYNOERRORRECOVERY
static void yy_parse_failed(
  yyParser *yypParser           /* The parser */
){
  umodParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sFail!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
#line 31 "/Users/phryne/Desktop/mojito/src/parse/parser/lemon-parser.lm"

    std::cerr<<"Giving up.  Parser is hopelessly lost :( \n";
#line 1943 "/Users/phryne/Desktop/mojito/src/parse/parser/lemon-parser.c"
  umodParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}
#endif /* YYNOERRORRECOVERY */

/*
** The following code executes when a syntax error first occurs.
*/
static void yy_syntax_error(
  yyParser *yypParser,           /* The parser */
  int yymajor,                   /* The major type of the error token */
  YYMINORTYPE yyminor            /* The minor type of the error token */
){
  umodParseARG_FETCH;
#define TOKEN (yyminor.yy0)
#line 39 "/Users/phryne/Desktop/mojito/src/parse/parser/lemon-parser.lm"

        #ifndef NDEBUG
            int n = sizeof(yyTokenName)/ sizeof(*yyTokenName);
            for (int i = 0; i< n; i++)
            {
                int a = yy_find_shift_action(yypParser, static_cast<YYCODETYPE>(i));
                //if (a < YY_ERROR_ACTION)
                if (a < YYNSTATE + YYNRULE)
                {
                    parser->errors().push_back(yyTokenName[i]);
                }
            }
            parser->error(true);
        #endif
#line 1973 "/Users/phryne/Desktop/mojito/src/parse/parser/lemon-parser.c"
  umodParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/*
** The following is executed when the parser accepts
*/
static void yy_accept(
  yyParser *yypParser           /* The parser */
){
  umodParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sAccept!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
#line 27 "/Users/phryne/Desktop/mojito/src/parse/parser/lemon-parser.lm"

    std::cout<<"Parsing Complete !! \n ";
#line 1995 "/Users/phryne/Desktop/mojito/src/parse/parser/lemon-parser.c"
  umodParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "umodParseAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
void umodParse(
  void *yyp,                   /* The parser */
  int yymajor,                 /* The major token code number */
  umodParseTOKENTYPE yyminor       /* The value for the token */
  umodParseARG_PDECL               /* Optional %extra_argument parameter */
){
  YYMINORTYPE yyminorunion;
  int yyact;            /* The parser action. */
  int yyendofinput;     /* True if we are at the end of input */
#ifdef YYERRORSYMBOL
  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
#endif
  yyParser *yypParser;  /* The parser */

  /* (re)initialize the parser, if necessary */
  yypParser = (yyParser*)yyp;
  if( yypParser->yyidx<0 ){
#if YYSTACKDEPTH<=0
    if( yypParser->yystksz <=0 ){
      /*memset(&yyminorunion, 0, sizeof(yyminorunion));*/
      yyminorunion = yyzerominor;
      yyStackOverflow(yypParser, &yyminorunion);
      return;
    }
#endif
    yypParser->yyidx = 0;
    yypParser->yyerrcnt = -1;
    yypParser->yystack[0].stateno = 0;
    yypParser->yystack[0].major = 0;
  }
  yyminorunion.yy0 = yyminor;
  yyendofinput = (yymajor==0);
  umodParseARG_STORE;

#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sInput %s\n",yyTracePrompt,yyTokenName[yymajor]);
  }
#endif

  do{
    yyact = yy_find_shift_action(yypParser,(YYCODETYPE)yymajor);
    if( yyact<YYNSTATE ){
      assert( !yyendofinput );  /* Impossible to shift the $ token */
      yy_shift(yypParser,yyact,yymajor,&yyminorunion);
      yypParser->yyerrcnt--;
      yymajor = YYNOCODE;
    }else if( yyact < YYNSTATE + YYNRULE ){
      yy_reduce(yypParser,yyact-YYNSTATE);
    }else{
      assert( yyact == YY_ERROR_ACTION );
#ifdef YYERRORSYMBOL
      int yymx;
#endif
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE,"%sSyntax Error!\n",yyTracePrompt);
      }
#endif
#ifdef YYERRORSYMBOL
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".  
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( yypParser->yyerrcnt<0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yymx = yypParser->yystack[yypParser->yyidx].major;
      if( yymx==YYERRORSYMBOL || yyerrorhit ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE,"%sDiscard input token %s\n",
             yyTracePrompt,yyTokenName[yymajor]);
        }
#endif
        yy_destructor(yypParser, (YYCODETYPE)yymajor,&yyminorunion);
        yymajor = YYNOCODE;
      }else{
         while(
          yypParser->yyidx >= 0 &&
          yymx != YYERRORSYMBOL &&
          (yyact = yy_find_reduce_action(
                        yypParser->yystack[yypParser->yyidx].stateno,
                        YYERRORSYMBOL)) >= YYNSTATE
        ){
          yy_pop_parser_stack(yypParser);
        }
        if( yypParser->yyidx < 0 || yymajor==0 ){
          yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
          yy_parse_failed(yypParser);
          yymajor = YYNOCODE;
        }else if( yymx!=YYERRORSYMBOL ){
          YYMINORTYPE u2;
          u2.YYERRSYMDT = 0;
          yy_shift(yypParser,yyact,YYERRORSYMBOL,&u2);
        }
      }
      yypParser->yyerrcnt = 3;
      yyerrorhit = 1;
#elif defined(YYNOERRORRECOVERY)
      /* If the YYNOERRORRECOVERY macro is defined, then do not attempt to
      ** do any kind of error recovery.  Instead, simply invoke the syntax
      ** error routine and continue going as if nothing had happened.
      **
      ** Applications can set this macro (for example inside %include) if
      ** they intend to abandon the parse upon the first syntax error seen.
      */
      yy_syntax_error(yypParser,yymajor,yyminorunion);
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      yymajor = YYNOCODE;
      
#else  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( yypParser->yyerrcnt<=0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yypParser->yyerrcnt = 3;
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      if( yyendofinput ){
        yy_parse_failed(yypParser);
      }
      yymajor = YYNOCODE;
#endif
    }
  }while( yymajor!=YYNOCODE && yypParser->yyidx>=0 );
  return;
}
