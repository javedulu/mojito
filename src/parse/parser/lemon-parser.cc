/* Driver template for the LEMON parser generator.
** The author disclaims copyright to this source code.
*/
/* First off, code is included that follows the "include" declaration
** in the input grammar file. */
#include <stdio.h>
#line 5 "/Users/phryne/Desktop/magmaleon/src/parse/parser/lemon-parser.lm"

    #include <cassert>
    #include <cstdio>
    #include <vector>
    #include <string>
    #include <iostream>
    #include "lexeme.h"
    #include "parser.h"
    using namespace umod;
#line 18 "/Users/phryne/Desktop/magmaleon/src/parse/parser/lemon-parser.c"
/* Next is all token values, in a form suitable for use by makeheaders.
** This section will be null unless lemon is run with the -m switch.
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
/* Make sure the INTERFACE macro is defined.
*/
#ifndef INTERFACE
# define INTERFACE 1
#endif
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 terminals
**                       and nonterminals.  "int" is used otherwise.
**    YYNOCODE           is a number of type YYCODETYPE which corresponds
**                       to no legal terminal or nonterminal number.  This
**                       number is used to fill in empty slots of the hash 
**                       table.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       have fall-back values which should be used if the
**                       original value of the token will not parse.
**    YYACTIONTYPE       is the data type used for storing terminal
**                       and nonterminal numbers.  "unsigned char" is
**                       used if there are fewer than 250 rules and
**                       states combined.  "int" is used otherwise.
**    umodParseTOKENTYPE     is the data type used for minor tokens given 
**                       directly to the parser from the tokenizer.
**    YYMINORTYPE        is the data type used for all minor tokens.
**                       This is typically a union of many types, one of
**                       which is umodParseTOKENTYPE.  The entry in the union
**                       for base tokens is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.  If
**                       zero the stack is dynamically sized using realloc()
**    umodParseARG_SDECL     A static variable declaration for the %extra_argument
**    umodParseARG_PDECL     A parameter declaration for the %extra_argument
**    umodParseARG_STORE     Code to store %extra_argument into yypParser
**    umodParseARG_FETCH     Code to extract %extra_argument from yypParser
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
*/
#define YYCODETYPE unsigned char
#define YYNOCODE 233
#define YYACTIONTYPE unsigned short int
#define umodParseTOKENTYPE lex::Lexeme *
typedef union {
  int yyinit;
  umodParseTOKENTYPE yy0;
} YYMINORTYPE;
#ifndef YYSTACKDEPTH
#define YYSTACKDEPTH 100
#endif
#define umodParseARG_SDECL parser::Parser *parser;
#define umodParseARG_PDECL ,parser::Parser *parser
#define umodParseARG_FETCH parser::Parser *parser = yypParser->parser
#define umodParseARG_STORE yypParser->parser = parser
#define YYNSTATE 598
#define YYNRULE 318
#define YY_NO_ACTION      (YYNSTATE+YYNRULE+2)
#define YY_ACCEPT_ACTION  (YYNSTATE+YYNRULE+1)
#define YY_ERROR_ACTION   (YYNSTATE+YYNRULE)

/* The yyzerominor constant is used to initialize instances of
** YYMINORTYPE objects to zero. */
static const YYMINORTYPE yyzerominor = { 0 };

/* Define the yytestcase() macro to be a no-op if is not already defined
** otherwise.
**
** Applications can choose to define yytestcase() in the %include section
** to a macro that can assist in verifying code coverage.  For production
** code the yytestcase() macro should be turned off.  But it is useful
** for testing.
*/
#ifndef yytestcase
# define yytestcase(X)
#endif


/* Next are the tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < YYNSTATE                  Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   YYNSTATE <= N < YYNSTATE+YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == YYNSTATE+YYNRULE              A syntax error has occurred.
**
**   N == YYNSTATE+YYNRULE+1            The parser accepts its input.
**
**   N == YYNSTATE+YYNRULE+2            No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as
**
**      yy_action[ yy_shift_ofst[S] + X ]
**
** If the index value yy_shift_ofst[S]+X is out of range or if the value
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X or if yy_shift_ofst[S]
** is equal to YY_SHIFT_USE_DFLT, it means that the action is not in the table
** and that yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array and YY_REDUCE_USE_DFLT is used in place of
** YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
*/
static const YYACTIONTYPE yy_action[] = {
 /*     0 */    65,  365,  269,  143,  142,  141,  139,  372,  180,   64,
 /*    10 */   503,   63,  555,  223,  225,   37,  572,  573,  631,  587,
 /*    20 */   615,  591,  421,  618,  351,   19,   29,   43,   16,   44,
 /*    30 */   355,  250,  501,  375,  380,  533,  224,  470,  513,  519,
 /*    40 */   474,  502,  510,  448,  455,  393,  910,  190,  910,    2,
 /*    50 */   376,  169,  208,  910,  725,   85,  483,   54,   55,   93,
 /*    60 */    99,   97,  101,  104,  103,  110,   48,   47,   49,   56,
 /*    70 */   427,  105,  107,  108,  109,   51,   53,  392,  493,  205,
 /*    80 */   138,  234,   66,  219,   34,  385,  458,  215,  148,  507,
 /*    90 */   504,  499,  498,  207,  459,  248,  467,   85,   58,   54,
 /*   100 */    55,   93,   99,   97,  101,  104,  103,  110,   48,   47,
 /*   110 */    49,   51,   53,  105,  107,  108,  109,   51,   53,  258,
 /*   120 */   361,   85,  162,   54,   55,   93,   99,   97,  101,  104,
 /*   130 */   103,  110,   48,   47,   49,   68,   69,  105,  107,  108,
 /*   140 */   109,   51,   53,  256,  189,   85,  212,   54,   55,   93,
 /*   150 */    99,   97,  101,  104,  103,  110,   48,   47,   49,   65,
 /*   160 */   429,  105,  107,  108,  109,   51,   53,  416,   64,   28,
 /*   170 */    63,  555,  223,  225,  406,  572,  573,  112,  587,  615,
 /*   180 */   591,  421,  618,  351,   19,   36,   43,  169,   44,  525,
 /*   190 */   250,  501,  506,  380,   70,  411,  294,   71,  361,  100,
 /*   200 */   102,   74,   76,   75,   77,   79,   78,   87,   89,   88,
 /*   210 */    91,  208,  418,   80,   81,   82,   84,   92,   95,  486,
 /*   220 */   353,  352,  354,  110,   48,   47,   49,  446,   56,  105,
 /*   230 */   107,  108,  109,   51,   53,  475,  473,  471,  216,  138,
 /*   240 */   117,   66,  391,  158,  385,  406,  536,  538,  507,  504,
 /*   250 */   499,  498,  207,  459,   72,  338,   85,  470,   54,   55,
 /*   260 */    93,   99,   97,  101,  104,  103,  110,   48,   47,   49,
 /*   270 */   419,  496,  105,  107,  108,  109,   51,   53,   59,  546,
 /*   280 */    85,   29,   54,   55,   93,   99,   97,  101,  104,  103,
 /*   290 */   110,   48,   47,   49,  462,  330,  105,  107,  108,  109,
 /*   300 */    51,   53,   85,  159,   54,   55,   93,   99,   97,  101,
 /*   310 */   104,  103,  110,   48,   47,   49,  448,  455,  105,  107,
 /*   320 */   108,  109,   51,   53,   85,  124,   54,   55,   93,   99,
 /*   330 */    97,  101,  104,  103,  110,   48,   47,   49,  406,  191,
 /*   340 */   105,  107,  108,  109,   51,   53,   93,   99,   97,  101,
 /*   350 */   104,  103,  110,   48,   47,   49,   39,  413,  105,  107,
 /*   360 */   108,  109,   51,   53,  105,  107,  108,  109,   51,   53,
 /*   370 */   234,  365,  269,  143,  142,  141,  139,  372,   42,  474,
 /*   380 */   502,  510,  251,  202,   85,  467,   54,   55,   93,   99,
 /*   390 */    97,  101,  104,  103,  110,   48,   47,   49,  528,  176,
 /*   400 */   105,  107,  108,  109,   51,   53,  239,  470,   85,  217,
 /*   410 */    54,   55,   93,   99,   97,  101,  104,  103,  110,   48,
 /*   420 */    47,   49,  245,  179,  105,  107,  108,  109,   51,   53,
 /*   430 */    85,   61,   54,   55,   93,   99,   97,  101,  104,  103,
 /*   440 */   110,   48,   47,   49,  433,  517,  105,  107,  108,  109,
 /*   450 */    51,   53,  241,  152,   85,  174,   54,   55,   93,   99,
 /*   460 */    97,  101,  104,  103,  110,   48,   47,   49,  552,  370,
 /*   470 */   105,  107,  108,  109,   51,   53,  247,  338,   85,  136,
 /*   480 */    54,   55,   93,   99,   97,  101,  104,  103,  110,   48,
 /*   490 */    47,   49,   28,  437,  105,  107,  108,  109,   51,   53,
 /*   500 */   254,   29,   85,   35,   54,   55,   93,   99,   97,  101,
 /*   510 */   104,  103,  110,   48,   47,   49,  522,   73,  105,  107,
 /*   520 */   108,  109,   51,   53,   85,  156,   54,   55,   93,   99,
 /*   530 */    97,  101,  104,  103,  110,   48,   47,   49,  324,  281,
 /*   540 */   105,  107,  108,  109,   51,   53,   85,  291,   54,   55,
 /*   550 */    93,   99,   97,  101,  104,  103,  110,   48,   47,   49,
 /*   560 */   336,  457,  105,  107,  108,  109,   51,   53,  673,  446,
 /*   570 */   446,  169,  203,  673,  128,  559,  500,  655,  446,  361,
 /*   580 */   378,  203,  655,  128,  559,  917,  377,  240,  673,  673,
 /*   590 */   400,  405,  673,  673,  673,  673,  673,   33,   32,  470,
 /*   600 */   470,  655,  261,  253,  249,  263,  255,  477,  470,  146,
 /*   610 */   390,  342,   85,   52,   54,   55,   93,   99,   97,  101,
 /*   620 */   104,  103,  110,   48,   47,   49,  550,  487,  105,  107,
 /*   630 */   108,  109,   51,   53,   85,  243,   54,   55,   93,   99,
 /*   640 */    97,  101,  104,  103,  110,   48,   47,   49,  484,    2,
 /*   650 */   105,  107,  108,  109,   51,   53,   85,  410,   54,   55,
 /*   660 */    93,   99,   97,  101,  104,  103,  110,   48,   47,   49,
 /*   670 */   588,  552,  105,  107,  108,  109,   51,   53,  441,  555,
 /*   680 */   223,  225,  425,  572,  573,  631,  587,  615,  591,  421,
 /*   690 */   618,  351,  450,   98,  237,  281,  558,  696,  169,  523,
 /*   700 */   696,  586,   94,  505,   90,  513,  519,  474,  502,  510,
 /*   710 */   448,  455,   98,   68,   69,  419,  496,  451,   19,  586,
 /*   720 */    43,   94,   40,   90,  250,  501,  446,  380,  513,  519,
 /*   730 */   474,  502,  510,  448,  455,  169,  222,   19,  420,   43,
 /*   740 */   443,   40,  460,  250,  501,  208,  380,   28,  334,  513,
 /*   750 */   519,  474,  502,  510,  448,  455,  470,  532,  252,  196,
 /*   760 */   458,  215,   57,  306,  208,  199,   98,   45,   41,  155,
 /*   770 */   155,  477,  348,  348,  390,   94,  130,   90,  599,  238,
 /*   780 */    86,   57,  507,  504,  499,  498,  207,  459,  195,  402,
 /*   790 */   360,   19,   29,   43,  446,   40,  210,  123,  501,  406,
 /*   800 */   380,  507,  504,  499,  498,  207,  459,  169,   96,  362,
 /*   810 */   554,   98,  571,  196,  595,  593,  229,  437,  208,  144,
 /*   820 */    94,  111,   90,  465,  470,  163,  165,   50,  365,  269,
 /*   830 */   143,  142,  141,  139,  372,   57,   19,  422,   43,  319,
 /*   840 */    40,  494,  250,  501,   60,  380,  359,  394,   13,  390,
 /*   850 */   131,  153,  512,  160,  161,  507,  504,  499,  498,  207,
 /*   860 */   459,  164,  259,  208,  470,  563,  283,   54,   55,   93,
 /*   870 */    99,   97,  101,  104,  103,  110,   48,   47,   49,  273,
 /*   880 */    57,  105,  107,  108,  109,   51,   53,   98,  362,  122,
 /*   890 */   563,  172,  194,  595,  593,  229,   94,  446,   90,  437,
 /*   900 */   507,  504,  499,  498,  207,  459,   28,  374,  242,  566,
 /*   910 */   446,  406,   19,  170,   43,  545,   40,  435,  206,  501,
 /*   920 */   213,  380,  209,  366,  576,  547,  386,  470,  426,  200,
 /*   930 */   186,  409,  412,  582,  196,   62,  552,  401,  242,  208,
 /*   940 */   470,   98,  513,  519,  474,  502,  510,  448,  455,  169,
 /*   950 */    94,  403,   90,  442,  440,  437,   57,  340,  353,  352,
 /*   960 */   354,  137,  134,  461,  183,  348,   19,  118,   43,   16,
 /*   970 */    40,  341,  250,  501,  523,  380,  507,  504,  499,  498,
 /*   980 */   207,  459,  490,  205,  169,  340,  353,  352,  354,  438,
 /*   990 */   333,  343,  169,  208,  523,  446,  129,  436,  169,  426,
 /*  1000 */   200,  186,  130,  434,  169,  437,  283,  226,  696,  551,
 /*  1010 */    57,  696,  586,   41,  399,  155,  565,  224,  348,  531,
 /*  1020 */   530,  529,  543,  540,  129,  470,  337,  426,  200,  186,
 /*  1030 */   507,  504,  499,  498,  207,  459,  175,  446,   15,  513,
 /*  1040 */   519,  474,  502,  510,  448,  455,  488,  106,  145,  166,
 /*  1050 */   577,  158,  552,   96,  286,   41,  521,  155,  289,  523,
 /*  1060 */   348,  583,  495,  169,  144,  170,  111,  470,  553,  283,
 /*  1070 */   163,  165,   50,  394,  387,  432,  398,  153,  512,  160,
 /*  1080 */   161,  552,  193,  580,  167,  446,  157,  170,  126,  446,
 /*  1090 */   130,  169,  581,  575,  133,   96,  482,  426,  200,  186,
 /*  1100 */   446,  596,  242,  382,  169,  214,  144,  453,  111,  511,
 /*  1110 */   114,  169,  163,  165,   50,  470,  514,  417,  283,  470,
 /*  1120 */   358,  201,  127,  213,  218,  209,  169,  597,  149,  379,
 /*  1130 */   470,  516,  169,  350,  539,  235,  218,  518,  595,  593,
 /*  1140 */   229,  577,  158,  492,  452,  350,   37,  235,  437,  446,
 /*  1150 */   595,  593,  229,   16,  547,  169,  472,  426,  200,  186,
 /*  1160 */   520,  394,  590,  563,  182,  153,  512,  160,  161,  326,
 /*  1170 */   124,  574,  213,   12,  209,  563,  367,  184,  469,  470,
 /*  1180 */   509,  463,  437,  579,  575,  133,  184,  415,  426,  200,
 /*  1190 */   186,   33,   32,  183,  184,  236,  261,  253,  249,  263,
 /*  1200 */   408,  407,  527,  473,  471,  216,  362,  560,  446,  362,
 /*  1210 */   562,  595,  593,  229,  595,  593,  229,  446,  364,  325,
 /*  1220 */   345,   58,  423,  462,  446,  446,  183,  395,  303,  169,
 /*  1230 */   314,  262,  265,  304,  564,  388,  315,  322,  470,  316,
 /*  1240 */    39,  439,  119,  297,  317,  276,  279,  470,  305,  465,
 /*  1250 */   446,  183,  287,  456,  470,  470,  113,  446,   83,  446,
 /*  1260 */   524,  446,  231,  446,  446,  292,  178,  446,  446,  437,
 /*  1270 */   446,  312,  548,  446,  446,  446,  446,  446,  357,  446,
 /*  1280 */   470,  544,  446,  446,  332,  298,  537,  470,  569,  470,
 /*  1290 */   284,  470,  356,  470,  470,  556,  446,  470,  470,  280,
 /*  1300 */   470,  570,  446,  470,  470,  470,  470,  470,  327,  470,
 /*  1310 */    67,  310,  470,  470,  169,  446,  446,  329,  285,  542,
 /*  1320 */   151,  446,  534,  321,  264,  302,  470,  301,  299,    5,
 /*  1330 */   446,  274,  470,  300,  288,  309,   38,   14,  535,  446,
 /*  1340 */   290,  584,  446,  293,  227,  470,  470,  344,  446,  446,
 /*  1350 */   272,  470,  335,  147,  446,  446,  446,  228,  446,  446,
 /*  1360 */   470,  430,  446,  135,  446,  446,  446,  185,  308,  470,
 /*  1370 */   152,  446,  470,  449,  446,  282,  277,  267,  470,  470,
 /*  1380 */     1,  446,  467,  446,  470,  470,  470,   22,  470,  470,
 /*  1390 */   307,  271,  470,  296,  470,  470,  470,  121,  446,  446,
 /*  1400 */   169,  470,  278,  295,  470,  549,  446,  446,  446,  313,
 /*  1410 */   397,  470,  268,  470,  270,  233,  369,  331,  275,  323,
 /*  1420 */    24,  446,  446,  132,  446,  311,  384,  318,  470,  470,
 /*  1430 */   266,  328,   17,  446,  446,  346,  470,  470,  470,  169,
 /*  1440 */   446,  446,    6,  446,  479,  446,  368,  446,  446,  446,
 /*  1450 */    20,  470,  470,  373,  470,   10,  446,   26,  446,   25,
 /*  1460 */     4,  446,  446,  470,  470,   11,    7,  125,   18,   21,
 /*  1470 */   470,  470,    9,  470,    3,  470,  120,  470,  470,  470,
 /*  1480 */   320,    8,  406,  349,   23,   27,  470,  339,  470,  515,
 /*  1490 */   230,  470,  470,  508,   35,  347,   31,  489,  424,  171,
 /*  1500 */   173,  630,  589,  154,  585,  541,  221,  204,  188,  220,
 /*  1510 */    30,  363,  557,  578,  567,   53,  371,  431,  592,  140,
 /*  1520 */   776,  246,  447,  598,  444,  454,  381,  383,  211,  466,
 /*  1530 */   257,  192,  468,  198,  476,  389,  481,  478,  568,  485,
 /*  1540 */   497,  396,  187,  526,  428,  168,  480,  445,  116,  460,
 /*  1550 */   177,  491,  244,  404,  594,  197,  260,  918,  561,  918,
 /*  1560 */    46,  464,  150,  414,  181,  115,  918,  918,  918,  918,
 /*  1570 */   918,  918,  918,  918,  918,  232,
};
static const YYCODETYPE yy_lookahead[] = {
 /*     0 */     6,  190,  191,  192,  193,  194,  195,  196,  205,   15,
 /*    10 */   207,   17,   42,   43,   44,    2,   46,   47,   48,   49,
 /*    20 */    50,   51,   52,   53,   54,   31,   33,   33,   35,   35,
 /*    30 */   156,   37,   38,   40,   40,  161,  162,  226,   68,   69,
 /*    40 */    70,   71,   72,   73,   74,   37,   33,  107,   35,   79,
 /*    50 */    56,  119,   58,   40,   36,    5,  124,    7,    8,    9,
 /*    60 */    10,   11,   12,   13,   14,   15,   16,   17,   18,   75,
 /*    70 */    20,   21,   22,   23,   24,   25,   26,  217,  218,  219,
 /*    80 */    86,   63,   88,  164,    2,   91,  167,  168,  148,   95,
 /*    90 */    96,   97,   98,   99,  100,    3,   78,    5,   85,    7,
 /*   100 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*   110 */    18,   25,   26,   21,   22,   23,   24,   25,   26,    3,
 /*   120 */    38,    5,   37,    7,    8,    9,   10,   11,   12,   13,
 /*   130 */    14,   15,   16,   17,   18,    1,    2,   21,   22,   23,
 /*   140 */    24,   25,   26,    3,   37,    5,   37,    7,    8,    9,
 /*   150 */    10,   11,   12,   13,   14,   15,   16,   17,   18,    6,
 /*   160 */    34,   21,   22,   23,   24,   25,   26,   60,   15,   35,
 /*   170 */    17,   42,   43,   44,   40,   46,   47,  107,   49,   50,
 /*   180 */    51,   52,   53,   54,   31,   59,   33,  119,   35,  129,
 /*   190 */    37,   38,  124,   40,    2,  135,  165,    5,   38,    7,
 /*   200 */     8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
 /*   210 */    18,   58,  125,   21,   22,   23,   24,   25,   26,  115,
 /*   220 */   116,  117,  118,   15,   16,   17,   18,  196,   75,   21,
 /*   230 */    22,   23,   24,   25,   26,  172,  173,  174,  175,   86,
 /*   240 */    35,   88,  110,  111,   91,   40,  176,  177,   95,   96,
 /*   250 */    97,   98,   99,  100,    3,  107,    5,  226,    7,    8,
 /*   260 */     9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
 /*   270 */   183,  184,   21,   22,   23,   24,   25,   26,    3,   24,
 /*   280 */     5,   33,    7,    8,    9,   10,   11,   12,   13,   14,
 /*   290 */    15,   16,   17,   18,  200,   40,   21,   22,   23,   24,
 /*   300 */    25,   26,    5,  155,    7,    8,    9,   10,   11,   12,
 /*   310 */    13,   14,   15,   16,   17,   18,   73,   74,   21,   22,
 /*   320 */    23,   24,   25,   26,    5,  231,    7,    8,    9,   10,
 /*   330 */    11,   12,   13,   14,   15,   16,   17,   18,   40,   66,
 /*   340 */    21,   22,   23,   24,   25,   26,    9,   10,   11,   12,
 /*   350 */    13,   14,   15,   16,   17,   18,   59,   59,   21,   22,
 /*   360 */    23,   24,   25,   26,   21,   22,   23,   24,   25,   26,
 /*   370 */    63,  190,  191,  192,  193,  194,  195,  196,   59,   70,
 /*   380 */    71,   72,    3,  202,    5,   78,    7,    8,    9,   10,
 /*   390 */    11,   12,   13,   14,   15,   16,   17,   18,  108,  109,
 /*   400 */    21,   22,   23,   24,   25,   26,    3,  226,    5,   80,
 /*   410 */     7,    8,    9,   10,   11,   12,   13,   14,   15,   16,
 /*   420 */    17,   18,  160,  123,   21,   22,   23,   24,   25,   26,
 /*   430 */     5,    4,    7,    8,    9,   10,   11,   12,   13,   14,
 /*   440 */    15,   16,   17,   18,   19,   29,   21,   22,   23,   24,
 /*   450 */    25,   26,    3,   37,    5,  122,    7,    8,    9,   10,
 /*   460 */    11,   12,   13,   14,   15,   16,   17,   18,  168,  207,
 /*   470 */    21,   22,   23,   24,   25,   26,    3,  107,    5,   39,
 /*   480 */     7,    8,    9,   10,   11,   12,   13,   14,   15,   16,
 /*   490 */    17,   18,   35,  160,   21,   22,   23,   24,   25,   26,
 /*   500 */     3,   33,    5,   35,    7,    8,    9,   10,   11,   12,
 /*   510 */    13,   14,   15,   16,   17,   18,   55,   90,   21,   22,
 /*   520 */    23,   24,   25,   26,    5,  155,    7,    8,    9,   10,
 /*   530 */    11,   12,   13,   14,   15,   16,   17,   18,  165,  165,
 /*   540 */    21,   22,   23,   24,   25,   26,    5,  165,    7,    8,
 /*   550 */     9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
 /*   560 */   186,  187,   21,   22,   23,   24,   25,   26,   56,  196,
 /*   570 */   196,  119,   60,   61,   62,   63,  124,   56,  196,   38,
 /*   580 */    56,   60,   61,   62,   63,  102,  103,  104,   76,   77,
 /*   590 */   106,  107,   80,   81,   82,   83,   84,   76,   77,  226,
 /*   600 */   226,   80,   81,   82,   83,   84,   87,   37,  226,  131,
 /*   610 */    40,  133,    5,   89,    7,    8,    9,   10,   11,   12,
 /*   620 */    13,   14,   15,   16,   17,   18,  123,   20,   21,   22,
 /*   630 */    23,   24,   25,   26,    5,  160,    7,    8,    9,   10,
 /*   640 */    11,   12,   13,   14,   15,   16,   17,   18,   19,   79,
 /*   650 */    21,   22,   23,   24,   25,   26,    5,  125,    7,    8,
 /*   660 */     9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
 /*   670 */   229,  168,   21,   22,   23,   24,   25,   26,  215,   42,
 /*   680 */    43,   44,  207,   46,   47,   48,   49,   50,   51,   52,
 /*   690 */    53,   54,    5,    6,    4,  165,  132,   37,  119,  135,
 /*   700 */    40,   41,   15,  124,   17,   68,   69,   70,   71,   72,
 /*   710 */    73,   74,    6,    1,    2,  183,  184,  187,   31,   41,
 /*   720 */    33,   15,   35,   17,   37,   38,  196,   40,   68,   69,
 /*   730 */    70,   71,   72,   73,   74,  119,   31,   31,   57,   33,
 /*   740 */   124,   35,   37,   37,   38,   58,   40,   35,  225,   68,
 /*   750 */    69,   70,   71,   72,   73,   74,  226,  164,    4,   53,
 /*   760 */   167,  168,   75,  165,   58,  112,    6,  114,   35,   37,
 /*   770 */    37,   37,   40,   40,   40,   15,  133,   17,    0,  122,
 /*   780 */    90,   75,   95,   96,   97,   98,   99,  100,  158,   56,
 /*   790 */   107,   31,   33,   33,  196,   35,  133,   37,   38,   40,
 /*   800 */    40,   95,   96,   97,   98,   99,  100,  119,   75,  136,
 /*   810 */   137,    6,  124,   53,  141,  142,  143,  160,   58,   86,
 /*   820 */    15,   88,   17,   45,  226,   92,   93,   94,  190,  191,
 /*   830 */   192,  193,  194,  195,  196,   75,   31,  138,   33,  201,
 /*   840 */    35,   36,   37,   38,   90,   40,   37,  204,  119,   40,
 /*   850 */   107,  208,  209,  210,  211,   95,   96,   97,   98,   99,
 /*   860 */   100,  122,  138,   58,  226,  166,  165,    7,    8,    9,
 /*   870 */    10,   11,   12,   13,   14,   15,   16,   17,   18,  165,
 /*   880 */    75,   21,   22,   23,   24,   25,   26,    6,  136,  137,
 /*   890 */   166,  123,  121,  141,  142,  143,   15,  196,   17,  160,
 /*   900 */    95,   96,   97,   98,   99,  100,   35,  197,  198,  147,
 /*   910 */   196,   40,   31,  151,   33,  149,   35,  122,   37,   38,
 /*   920 */   219,   40,  221,  222,  223,  154,  133,  226,  157,  158,
 /*   930 */   159,   57,   58,  134,   53,    1,  168,  197,  198,   58,
 /*   940 */   226,    6,   68,   69,   70,   71,   72,   73,   74,  119,
 /*   950 */    15,  214,   17,  182,  124,  160,   75,  115,  116,  117,
 /*   960 */   118,  107,   37,  157,  165,   40,   31,  122,   33,   35,
 /*   970 */    35,  132,   37,   38,  135,   40,   95,   96,   97,   98,
 /*   980 */    99,  100,  218,  219,  119,  115,  116,  117,  118,  124,
 /*   990 */   107,  132,  119,   58,  135,  196,  154,  124,  119,  157,
 /*  1000 */   158,  159,  133,  124,  119,  160,  165,  123,   37,  124,
 /*  1010 */    75,   40,   41,   35,   56,   37,  161,  162,   40,  177,
 /*  1020 */   178,  179,  180,  181,  154,  226,  107,  157,  158,  159,
 /*  1030 */    95,   96,   97,   98,   99,  100,  123,  196,   67,   68,
 /*  1040 */    69,   70,   71,   72,   73,   74,  113,   89,  178,  179,
 /*  1050 */   110,  111,  168,   75,  165,   35,  132,   37,  165,  135,
 /*  1060 */    40,  147,  221,  119,   86,  151,   88,  226,  124,  165,
 /*  1070 */    92,   93,   94,  204,  133,  157,   56,  208,  209,  210,
 /*  1080 */   211,  168,  213,  147,  162,  196,  146,  151,  107,  196,
 /*  1090 */   133,  119,  152,  153,  154,   75,  124,  157,  158,  159,
 /*  1100 */   196,  197,  198,  203,  119,  216,   86,  185,   88,  124,
 /*  1110 */   122,  119,   92,   93,   94,  226,  124,  120,  165,  226,
 /*  1120 */    38,  121,  107,  219,  127,  221,  119,  223,   59,  120,
 /*  1130 */   226,  124,  119,  136,  140,  138,  127,  124,  141,  142,
 /*  1140 */   143,  110,  111,  220,  122,  136,    2,  138,  160,  196,
 /*  1150 */   141,  142,  143,   35,  154,  119,  207,  157,  158,  159,
 /*  1160 */   124,  204,  134,  166,   36,  208,  209,  210,  211,  212,
 /*  1170 */   231,  207,  219,   59,  221,  166,  223,  165,  224,  226,
 /*  1180 */   207,  198,  160,  152,  153,  154,  165,   59,  157,  158,
 /*  1190 */   159,   76,   77,  165,  165,  134,   81,   82,   83,   84,
 /*  1200 */   170,  171,  172,  173,  174,  175,  136,  137,  196,  136,
 /*  1210 */   137,  141,  142,  143,  141,  142,  143,  196,  206,  165,
 /*  1220 */   134,   85,  224,  200,  196,  196,  165,  206,  165,  119,
 /*  1230 */   165,  122,  165,  165,  124,  206,  165,  165,  226,  165,
 /*  1240 */    59,  215,  165,  165,  165,  165,  165,  226,  165,   45,
 /*  1250 */   196,  165,  165,  169,  226,  226,  109,  196,    2,  196,
 /*  1260 */   168,  196,   61,  196,  196,  165,  128,  196,  196,  160,
 /*  1270 */   196,  165,  140,  196,  196,  196,  196,  196,   37,  196,
 /*  1280 */   226,  150,  196,  196,  165,  165,  119,  226,   54,  226,
 /*  1290 */   165,  226,  150,  226,  226,  118,  196,  226,  226,  165,
 /*  1300 */   226,  118,  196,  226,  226,  226,  226,  226,  165,  226,
 /*  1310 */    75,  165,  226,  226,  119,  196,  196,  165,  165,  124,
 /*  1320 */   163,  196,   65,  165,  165,  165,  226,  165,  165,  145,
 /*  1330 */   196,  165,  226,  165,  165,  165,   29,  119,   64,  196,
 /*  1340 */   165,   34,  196,  165,  144,  226,  226,   37,  196,  196,
 /*  1350 */   165,  226,  165,  131,  196,  196,  196,  109,  196,  196,
 /*  1360 */   226,   38,  196,  130,  196,  196,  196,  165,  165,  226,
 /*  1370 */    37,  196,  226,  184,  196,  165,  165,  165,  226,  226,
 /*  1380 */   109,  196,   78,  196,  226,  226,  226,  189,  226,  226,
 /*  1390 */   165,  165,  226,  165,  226,  226,  226,  139,  196,  196,
 /*  1400 */   119,  226,  165,  165,  226,  124,  196,  196,  196,  165,
 /*  1410 */   165,  226,  165,  226,  165,  175,  165,  165,  165,  227,
 /*  1420 */   189,  196,  196,  105,  196,  165,  199,  165,  226,  226,
 /*  1430 */   165,  165,  189,  196,  196,  228,  226,  226,  226,  119,
 /*  1440 */   196,  196,  188,  196,  124,  196,  230,  196,  196,  196,
 /*  1450 */   189,  226,  226,  230,  226,  188,  196,  189,  196,  189,
 /*  1460 */   188,  196,  196,  226,  226,  188,  188,  231,  189,  189,
 /*  1470 */   226,  226,  188,  226,  188,  226,  139,  226,  226,  226,
 /*  1480 */   126,  188,   40,  228,  189,    2,  226,   37,  226,   29,
 /*  1490 */     2,  226,  226,   29,   35,   40,   29,   36,   53,   37,
 /*  1500 */    37,   48,   50,   59,   48,   32,   59,   15,    2,   15,
 /*  1510 */    29,   36,   28,   36,   29,   26,   40,   27,   32,   37,
 /*  1520 */    29,   87,   86,    0,   37,   88,   56,   56,   59,   75,
 /*  1530 */    37,   35,   37,   59,   36,   36,   28,   37,   29,   36,
 /*  1540 */    29,   36,    1,   94,   29,   88,   36,   75,   35,   37,
 /*  1550 */    36,   29,   87,   56,   86,   35,   37,  232,   37,  232,
 /*  1560 */    59,   37,   37,   56,   36,   35,  232,  232,  232,  232,
 /*  1570 */   232,  232,  232,  232,  232,   59,
};
#define YY_SHIFT_USE_DFLT (-31)
#define YY_SHIFT_MAX 420
static const short yy_shift_ofst[] = {
 /*     0 */   440,  -30,  637,  153,  153,  971,   -6,  153,  153,  153,
 /*    10 */   153,  153,  760,  521,  521,  660,  881,  978,  978,  881,
 /*    20 */   733, 1020,  978,  978,  978,  978,  978,  681,   18,  687,
 /*    30 */   512,  512,  512,  512,  874,  805,  687,  706,  935,  935,
 /*    40 */   935,  935,  935,  935,  935,  129,  307,  935,  935,  935,
 /*    50 */   935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
 /*    60 */   935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
 /*    70 */   935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
 /*    80 */   935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
 /*    90 */   935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
 /*   100 */   935,  935,  935,  935,  935,  935,  935,  935,  935,  935,
 /*   110 */   935,  935,  134,  570,  712,  416,  416,    8,   85,  541,
 /*   120 */  1115, 1115, 1115,   13,   -7,   -7,  759,  871,  809,  734,
 /*   130 */   934,  871,  778,  734,  468,  925,  734,  759,  109,  160,
 /*   140 */   248,  160,  160,  160,  109,  273,  329,  329,  160,    8,
 /*   150 */   457,  160,  160,  160,   85,  248,  248,  273,  461,   85,
 /*   160 */   160,  160,  248,  160,  457,  160,  273,  160,  160,  329,
 /*   170 */   160,  248,  160,  248,  457,  160,  678,  160,  329,  329,
 /*   180 */   160,  160,  160,  319,  297,  651,  309,  732,  734,   82,
 /*   190 */   255,  734,  732,  690,  734,  243,  734,  734,  732,  107,
 /*   200 */   243,  734,  754,  734, 1082, 1069, 1144, 1118, 1118, 1114,
 /*   210 */  1118,  109, 1136, 1114, 1181, 1256, 1204,  457, 1201,  160,
 /*   220 */  1082, 1241, 1241, 1234, 1235, 1234,  160, 1257, 1274, 1204,
 /*   230 */  1310, 1323, 1333, 1204, 1304,  -31,  -31,  -31,  -31,  -31,
 /*   240 */   -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,
 /*   250 */   -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,
 /*   260 */   -31,  -31,  -31,  -31,  379,  425,   50,  275,  251,  192,
 /*   270 */   140,  116,   92,  629,  607,  519,  497,  473,  449,  403,
 /*   280 */   651,  651,  651,  651,  651,  651,  651,  651,  651,  651,
 /*   290 */   651,  860,  860,  860,  860,  337,  337,  337,  337,  208,
 /*   300 */   208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
 /*   310 */   208,  343,  343,  343,  343,  343,  343,  343,  343,  524,
 /*   320 */  1128,   86,   86, 1307,   86,   86,  958,   86,   86,   86,
 /*   330 */   705,   86,   86,  205,  427,   86,  126,  298, 1442, 1483,
 /*   340 */  1450, 1460, 1488, 1464, 1459, 1461, 1455, 1462, 1463, 1455,
 /*   350 */  1467, 1453, 1445, 1452, 1456, 1444, 1473, 1447, 1492, 1506,
 /*   360 */  1442, 1494, 1481, 1484, 1475, 1485, 1477, 1486, 1476, 1489,
 /*   370 */  1490, 1482, 1491, 1476, 1434, 1487, 1436, 1523, 1437, 1470,
 /*   380 */  1493, 1495, 1471, 1454, 1469, 1496, 1474, 1498, 1499, 1508,
 /*   390 */  1500, 1509, 1503, 1144, 1511, 1505, 1541, 1489, 1449, 1457,
 /*   400 */  1515, 1465, 1468, 1497, 1472, 1442, 1512, 1501, 1510, 1513,
 /*   410 */  1514, 1522, 1520, 1519, 1521, 1524, 1525, 1507, 1528, 1516,
 /*   420 */  1530,
};
#define YY_REDUCE_USE_DFLT (-198)
#define YY_REDUCE_MAX 263
static const short yy_reduce_ofst[] = {
 /*     0 */   483,  842,  870,  181,  638,  940, -189, -189, -189, -189,
 /*    10 */  -189, -189,  904,  997, 1009, 1031,  701,  869,  957,  953,
 /*    20 */   643,  643,  643,  643,  643,  643,  643,  771, 1030,  374,
 /*    30 */   673,  752, 1073, 1070, 1000, 1086,  530,  841,  799,  889,
 /*    40 */  1012, 1021, 1028, 1061, 1029,  104,   63, 1106, 1262, 1260,
 /*    50 */  1253, 1252, 1249, 1245, 1238, 1228, 1226, 1212, 1210, 1202,
 /*    60 */  1185, 1175, 1169,  714, 1166,  382, 1159, 1153, 1134, 1087,
 /*    70 */  1077,   31,  893, 1247, 1203, 1170, 1168, 1163, 1162, 1160,
 /*    80 */  1158, 1152, 1143, 1125, 1119, 1100, 1081, 1079, 1074, 1071,
 /*    90 */  1067, 1065, 1054,  598, 1265, 1251, 1237, 1225, 1178, 1146,
 /*   100 */  1120, 1083, 1078, 1068, 1063, 1072, 1211,  373, 1266, 1187,
 /*   110 */  1244, 1080,  -81,   70,  593,   87,  532, -140, -126,  688,
 /*   120 */   699,  699,  724,   94,  262,  475,  333,  300,  -60,  148,
 /*   130 */  -197,  503,  290,  370,  657,  478,  484,  739,  710,  830,
 /*   140 */   795,  865,  873,  879,  740,  762,  839,  859,  885,  764,
 /*   150 */   884,  944,  972,  985,  855,  657,  845,  914,  653,  922,
 /*   160 */   992, 1007,  988, 1013,  768, 1036,  936, 1110, 1195,  924,
 /*   170 */  1281, 1022, 1320, 1109,  913,  -68,  132,   68,   60,  564,
 /*   180 */   452,  579,  616,  441,  463,  523,  630,  663,  683,  729,
 /*   190 */   766,  743,  793,  737,  854,  806,  883,  919,  941,  933,
 /*   200 */   918,  981,  900, 1015,  994,  923,  939,  949,  964,  954,
 /*   210 */   973,  983, 1023,  998, 1026, 1084, 1147, 1092, 1138, 1167,
 /*   220 */  1132, 1131, 1142, 1177, 1157, 1183, 1218, 1184, 1200, 1248,
 /*   230 */  1222, 1233, 1189, 1271, 1240, 1258, 1192, 1198, 1207, 1231,
 /*   240 */  1318, 1243, 1227, 1216, 1261, 1223, 1254, 1268, 1267, 1270,
 /*   250 */   939, 1272, 1277, 1278, 1279, 1280, 1284, 1236, 1286, 1337,
 /*   260 */  1354, 1293, 1255, 1295,
};
static const YYACTIONTYPE yy_default[] = {
 /*     0 */   601,  696,  696,  916,  786,  612,  916,  766,  765,  785,
 /*    10 */   788,  789,  916,  676,  676,  612,  828,  809,  805,  916,
 /*    20 */   916,  916,  811,  768,  808,  767,  804,  696,  730,  916,
 /*    30 */   676,  676,  676,  676,  696,  916,  916,  916,  916,  860,
 /*    40 */   813,  813,  916,  916,  813,  631,  730,  916,  916,  916,
 /*    50 */   916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
 /*    60 */   916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
 /*    70 */   916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
 /*    80 */   916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
 /*    90 */   916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
 /*   100 */   916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
 /*   110 */   916,  916,  718,  916,  718,  916,  916,  817,  916,  656,
 /*   120 */   653,  654,  652,  782,  916,  911,  706,  755,  916,  916,
 /*   130 */   916,  755,  620,  916,  706,  649,  603,  706,  916,  656,
 /*   140 */   706,  656,  656,  656,  916,  682,  763,  763,  656,  916,
 /*   150 */   755,  656,  656,  656,  916,  706,  706,  682,  633,  916,
 /*   160 */   656,  656,  706,  656,  755,  656,  682,  656,  656,  763,
 /*   170 */   656,  706,  656,  706,  755,  656,  612,  656,  651,  763,
 /*   180 */   656,  656,  656,  879,  815,  862,  693,  916,  916,  656,
 /*   190 */   667,  916,  916,  810,  916,  694,  916,  916,  916,  916,
 /*   200 */   691,  916,  790,  916,  916,  821,  910,  916,  916,  833,
 /*   210 */   916,  916,  782,  833,  815,  737,  620,  916,  644,  656,
 /*   220 */   916,  916,  916,  631,  712,  631,  656,  680,  678,  620,
 /*   230 */   649,  646,  916,  620,  730,  714,  875,  793,  882,  793,
 /*   240 */   607,  793,  779,  908,  793,  908,  770,  793,  770,  793,
 /*   250 */   910,  770,  770,  770,  793,  793,  770,  910,  770,  714,
 /*   260 */   640,  770,  882,  793,  916,  916,  916,  916,  916,  916,
 /*   270 */   916,  916,  916,  916,  916,  916,  916,  916,  916,  916,
 /*   280 */   722,  760,  781,  825,  738,  711,  859,  721,  822,  861,
 /*   290 */   858,  887,  839,  838,  888,  856,  857,  906,  905,  892,
 /*   300 */   891,  893,  894,  845,  844,  843,  840,  841,  889,  890,
 /*   310 */   842,  853,  851,  850,  902,  901,  900,  899,  852,  916,
 /*   320 */   916,  895,  846,  916,  847,  903,  916,  897,  848,  896,
 /*   330 */   916,  854,  898,  916,  916,  849,  916,  916,  704,  916,
 /*   340 */   916,  916,  916,  916,  916,  916,  876,  916,  916,  877,
 /*   350 */   916,  629,  916,  916,  916,  689,  916,  670,  660,  606,
 /*   360 */   665,  657,  916,  916,  916,  916,  916,  916,  912,  904,
 /*   370 */   916,  916,  883,  913,  916,  916,  916,  916,  916,  916,
 /*   380 */   916,  916,  916,  916,  777,  916,  916,  916,  916,  916,
 /*   390 */   916,  916,  916,  916,  916,  916,  916,  855,  916,  916,
 /*   400 */   916,  916,  916,  916,  916,  602,  916,  724,  916,  916,
 /*   410 */   916,  916,  916,  916,  916,  916,  916,  916,  916,  748,
 /*   420 */   916,  627,  713,  830,  628,  914,  690,  837,  600,  761,
 /*   430 */   645,  915,  692,  836,  772,  907,  773,  705,  774,  814,
 /*   440 */   775,  812,  744,  637,  909,  807,  834,  783,  702,  750,
 /*   450 */   759,  758,  881,  752,  784,  703,  720,  757,  719,  873,
 /*   460 */   604,  695,  780,  778,  639,  619,  787,  731,  638,  829,
 /*   470 */   870,  729,  869,  728,  699,  726,  791,  606,  605,  745,
 /*   480 */   723,  884,  751,  635,  885,  824,  613,  886,  610,  648,
 /*   490 */   820,  650,  818,  816,  647,  819,  749,  792,  867,  866,
 /*   500 */   794,  865,  700,  823,  864,  746,  636,  863,  643,  795,
 /*   510 */   701,  796,  797,  697,  798,  642,  799,  747,  800,  698,
 /*   520 */   801,  672,  632,  762,  764,  641,  802,  727,  608,  743,
 /*   530 */   742,  741,  710,  707,  681,  679,  732,  734,  733,  659,
 /*   540 */   740,  669,  803,  739,  671,  666,  668,  756,  658,  683,
 /*   550 */   684,  664,  754,  709,  674,  614,  616,  835,  675,  677,
 /*   560 */   715,  634,  716,  717,  753,  708,  735,  769,  609,  630,
 /*   570 */   617,  771,  621,  622,  868,  688,  827,  687,  826,  686,
 /*   580 */   736,  685,  874,  663,  871,  623,  611,  624,  880,  625,
 /*   590 */   878,  626,  872,  662,  806,  661,  832,  831,
};
#define YY_SZ_ACTTAB (int)(sizeof(yy_action)/sizeof(yy_action[0]))

/* The next table maps tokens into fallback tokens.  If a construct
** like the following:
** 
**      %fallback ID X Y Z.
**
** appears in the grammar, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
*/
#ifdef YYFALLBACK
static const YYCODETYPE yyFallback[] = {
};
#endif /* YYFALLBACK */

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
*/
struct yyStackEntry {
  YYACTIONTYPE stateno;  /* The state-number */
  YYCODETYPE major;      /* The major token value.  This is the code
                         ** number for the token at this stack level */
  YYMINORTYPE minor;     /* The user-supplied minor token value.  This
                         ** is the value of the token  */
};
typedef struct yyStackEntry yyStackEntry;

/* The state of the parser is completely contained in an instance of
** the following structure */
struct yyParser {
  int yyidx;                    /* Index of top element in stack */
#ifdef YYTRACKMAXSTACKDEPTH
  int yyidxMax;                 /* Maximum value of yyidx */
#endif
  int yyerrcnt;                 /* Shifts left before out of the error */
  umodParseARG_SDECL                /* A place to hold %extra_argument */
#if YYSTACKDEPTH<=0
  int yystksz;                  /* Current side of the stack */
  yyStackEntry *yystack;        /* The parser's stack */
#else
  yyStackEntry yystack[YYSTACKDEPTH];  /* The parser's stack */
#endif
};
typedef struct yyParser yyParser;

#ifndef NDEBUG
#include <stdio.h>
static FILE *yyTraceFILE = 0;
static char *yyTracePrompt = 0;
#endif /* NDEBUG */

#ifndef NDEBUG
/* 
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL 
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
void umodParseTrace(FILE *TraceFILE, char *zTracePrompt){
  yyTraceFILE = TraceFILE;
  yyTracePrompt = zTracePrompt;
  if( yyTraceFILE==0 ) yyTracePrompt = 0;
  else if( yyTracePrompt==0 ) yyTraceFILE = 0;
}
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static const char *const yyTokenName[] = { 
  "$",             "ASSING",        "EQUAL",         "THEN",        
  "ELSE",          "COLON",         "NOT",           "AND",         
  "OR",            "LOWER",         "GREATER",       "LOWEREQ",     
  "GREATEREQ",     "COMPEQ",        "COMPNE",        "PLUS",        
  "DOTPLUS",       "MINUS",         "DOTMINUS",      "UMINUS",      
  "UPLUS",         "SLASH",         "DOTSLASH",      "STAR",        
  "DOTSTAR",       "CARET",         "DOTCARET",      "FC",          
  "PARENS",        "SEMICOLON",     "COMMA",         "OBRACE",      
  "CBRACE",        "OBRACKET",      "CBRACKET",      "OPAREN",      
  "CPAREN",        "IDENT",         "STRING",        "WITHIN",      
  "DOT",           "ENCAPSULATED",  "EXPANDABLE",    "PURE",        
  "IMPURE",        "FINAL",         "CLASS",         "MODEL",       
  "RECORD",        "BLOCK",         "CONNECTOR",     "TYPE",        
  "PACKAGE",       "FUNCTION",      "OPERATOR",      "PARTIAL",     
  "END",           "ENUMERATION",   "DER",           "COMA",        
  "EXTENDS",       "EXTERNAL",      "IMPORT",        "REDECLARE",   
  "INNER",         "OUTER",         "CONSTRAINEDBY",  "REPLACABLE",  
  "FLOW",          "STREAM",        "DISCRETE",      "PARAMETER",   
  "CONSTANT",      "INPUT",         "OUTPUT",        "IF",          
  "PUBLIC",        "PROTECTED",     "EACH",          "REPLACEABLE", 
  "ANNOTATION",    "INITIALEQ",     "EQUATION",      "INITIALALG",  
  "ALGORITHM",     "IN",            "FOR",           "LOOP",        
  "WHEN",          "ELSEWHEN",      "ELSEIF",        "CONNECT",     
  "BREAK",         "RETURN",        "WHILE",         "INT",         
  "FLOAT",         "FALSE",         "TRUE",          "INITIAL",     
  "ENDSUB",        "error",         "program",       "stored_definition",
  "opt_within_name",  "class_definition_list",  "opt_name",      "name",        
  "class_definition_aux",  "opt_final",     "class_definition",  "opt_encapsulated",
  "class_prefix",  "class_specifier",  "opt_partial",   "class_prefixes",
  "opt_expandable",  "opt_pure_impure_operator",  "opt_operator",  "string_comment",
  "composition",   "base_prefix",   "opt_array_subscripts",  "opt_class_modification",
  "comment",       "enumeration_args",  "more_ids",      "composition_aux_1",
  "opt_external_composition",  "opt_annotation_composition",  "opt_language_specification",  "opt_external_function_call",
  "opt_annotation",  "component_reference",  "expression_list",  "annotation",  
  "element",       "element_list",  "composition_element",  "composition_list",
  "string_comment_no_empty",  "import_clause",  "extends_clause",  "opt_redeclare",
  "opt_inner",     "opt_outer",     "element_option",  "opt_constraining_clause",
  "opt_import",    "opt_import_spec",  "import_list",   "constraining_clause",
  "element_option_1",  "component_clause",  "type_prefix",   "type_specifier",
  "component_list",  "opt_input_output",  "opt_disc_param_const",  "opt_flow_stream",
  "array_subscripts",  "component_declaration",  "declaration",   "opt_condition_attribute",
  "opt_modification",  "expression",    "eq_alg_section_init",  "modification",
  "class_modification",  "opt_equal_exp",  "opt_argument_list",  "argument_list",
  "argument",      "element_modification_replacable",  "element_redeclaration",  "opt_each",    
  "element_modification",  "element_replacable",  "short_class_definition",  "component_clause1",
  "element_redeclaration_1",  "element_redeclaration_2",  "short_class_definition_exp",  "enum_list",   
  "enumeration_literal",  "component_declaration1",  "subscript_list",  "subscript",   
  "equation_list",  "statement_list",  "equation",      "simple_expression",
  "if_equation",   "for_equation",  "connect_clause",  "when_equation",
  "primary",       "for_indices",   "for_index",     "opt_more_indexes",
  "opt_in",        "opt_else_when",  "opt_elseif_eq",  "opt_else_eq", 
  "statement",     "opt_assing",    "output_expression_list",  "function_call_args",
  "while_statement",  "when_statement",  "for_statement",  "if_statement",
  "opt_else_when_list",  "opt_esleif_st",  "opt_else_st",   "output_expression_list_more",
  "opt_expression",  "opt_named_arguments",  "named_arguments",  "named_argument",
  "opt_more_args",  "function_argument",  "opt_function_args",  "function_arguments",
  "opt_function_arguments",  "opt_elseif_exp",  "opt_comp_call",  "primary_exp_list",
  "component_reference_list",  "expression_list_more",  "more_cr",       "more_comp_call",
};
#endif /* NDEBUG */

#ifndef NDEBUG
/* For tracing reduce actions, the names of all rules are required.
*/
static const char *const yyRuleName[] = {
 /*   0 */ "program ::= stored_definition",
 /*   1 */ "stored_definition ::= opt_within_name class_definition_list",
 /*   2 */ "opt_within_name ::= WITHIN opt_name SEMICOLON",
 /*   3 */ "opt_within_name ::=",
 /*   4 */ "opt_name ::= name",
 /*   5 */ "opt_name ::=",
 /*   6 */ "name ::= name DOT IDENT",
 /*   7 */ "name ::= DOT IDENT",
 /*   8 */ "name ::= IDENT",
 /*   9 */ "class_definition_list ::=",
 /*  10 */ "class_definition_list ::= class_definition_list class_definition_aux",
 /*  11 */ "class_definition_aux ::= opt_final class_definition SEMICOLON",
 /*  12 */ "class_definition ::= opt_encapsulated class_prefix class_specifier",
 /*  13 */ "opt_encapsulated ::= ENCAPSULATED",
 /*  14 */ "opt_encapsulated ::=",
 /*  15 */ "class_prefix ::= opt_partial class_prefixes",
 /*  16 */ "opt_expandable ::= EXPANDABLE",
 /*  17 */ "opt_expandable ::=",
 /*  18 */ "opt_pure_impure_operator ::= PURE opt_operator",
 /*  19 */ "opt_pure_impure_operator ::= IMPURE opt_operator",
 /*  20 */ "opt_pure_impure_operator ::=",
 /*  21 */ "opt_final ::= FINAL",
 /*  22 */ "opt_final ::=",
 /*  23 */ "class_prefixes ::= CLASS",
 /*  24 */ "class_prefixes ::= MODEL",
 /*  25 */ "class_prefixes ::= opt_operator RECORD",
 /*  26 */ "class_prefixes ::= BLOCK",
 /*  27 */ "class_prefixes ::= opt_expandable CONNECTOR",
 /*  28 */ "class_prefixes ::= TYPE",
 /*  29 */ "class_prefixes ::= PACKAGE",
 /*  30 */ "class_prefixes ::= opt_pure_impure_operator FUNCTION",
 /*  31 */ "class_prefixes ::= OPERATOR",
 /*  32 */ "opt_operator ::= OPERATOR",
 /*  33 */ "opt_operator ::=",
 /*  34 */ "opt_partial ::= PARTIAL",
 /*  35 */ "opt_partial ::=",
 /*  36 */ "class_specifier ::= IDENT string_comment composition END IDENT",
 /*  37 */ "class_specifier ::= IDENT EQUAL base_prefix name opt_array_subscripts opt_class_modification comment",
 /*  38 */ "class_specifier ::= IDENT EQUAL ENUMERATION OPAREN enumeration_args CPAREN comment",
 /*  39 */ "class_specifier ::= IDENT EQUAL DER OPAREN name COMA IDENT more_ids CPAREN comment",
 /*  40 */ "class_specifier ::= EXTENDS IDENT opt_class_modification string_comment composition END IDENT",
 /*  41 */ "more_ids ::= more_ids COMA IDENT",
 /*  42 */ "more_ids ::=",
 /*  43 */ "composition ::= composition_aux_1 opt_external_composition opt_annotation_composition",
 /*  44 */ "opt_external_composition ::= EXTERNAL opt_language_specification opt_external_function_call opt_annotation SEMICOLON",
 /*  45 */ "opt_external_composition ::= EXTERNAL opt_language_specification component_reference EQUAL opt_external_function_call opt_annotation SEMICOLON",
 /*  46 */ "opt_external_composition ::=",
 /*  47 */ "opt_language_specification ::= STRING",
 /*  48 */ "opt_language_specification ::=",
 /*  49 */ "opt_external_function_call ::= IDENT OPAREN CPAREN",
 /*  50 */ "opt_external_function_call ::= IDENT OPAREN expression_list CPAREN",
 /*  51 */ "opt_external_function_call ::=",
 /*  52 */ "opt_annotation_composition ::= annotation SEMICOLON",
 /*  53 */ "opt_annotation_composition ::=",
 /*  54 */ "composition_aux_1 ::= element SEMICOLON element_list",
 /*  55 */ "composition_aux_1 ::= element SEMICOLON element_list composition_element composition_list",
 /*  56 */ "composition_aux_1 ::= composition_element composition_list",
 /*  57 */ "composition_aux_1 ::=",
 /*  58 */ "string_comment ::=",
 /*  59 */ "string_comment ::= STRING",
 /*  60 */ "string_comment ::= STRING PLUS string_comment_no_empty",
 /*  61 */ "string_comment_no_empty ::= STRING PLUS string_comment_no_empty",
 /*  62 */ "string_comment_no_empty ::= STRING",
 /*  63 */ "element ::= import_clause",
 /*  64 */ "element ::= extends_clause",
 /*  65 */ "element ::= opt_redeclare opt_final opt_inner opt_outer element_option opt_constraining_clause",
 /*  66 */ "import_clause ::= IMPORT opt_import comment",
 /*  67 */ "opt_import ::= IDENT EQUAL name",
 /*  68 */ "opt_import ::= name opt_import_spec",
 /*  69 */ "opt_import_spec ::=",
 /*  70 */ "opt_import_spec ::= DOTSTAR",
 /*  71 */ "opt_import_spec ::= DOT OBRACE import_list CBRACE",
 /*  72 */ "import_list ::= IDENT",
 /*  73 */ "import_list ::= IDENT COMA import_list",
 /*  74 */ "comment ::= string_comment opt_annotation",
 /*  75 */ "element_list ::=",
 /*  76 */ "element_list ::= element SEMICOLON element_list",
 /*  77 */ "extends_clause ::= EXTENDS name opt_class_modification opt_annotation",
 /*  78 */ "opt_redeclare ::=",
 /*  79 */ "opt_redeclare ::= REDECLARE",
 /*  80 */ "opt_inner ::=",
 /*  81 */ "opt_inner ::= INNER",
 /*  82 */ "opt_outer ::=",
 /*  83 */ "opt_outer ::= OUTER",
 /*  84 */ "opt_constraining_clause ::=",
 /*  85 */ "opt_constraining_clause ::= constraining_clause comment",
 /*  86 */ "constraining_clause ::= CONSTRAINEDBY name opt_class_modification",
 /*  87 */ "element_option ::= element_option_1",
 /*  88 */ "element_option ::= REPLACABLE element_option_1",
 /*  89 */ "element_option_1 ::= class_definition",
 /*  90 */ "element_option_1 ::= component_clause",
 /*  91 */ "component_clause ::= type_prefix type_specifier opt_array_subscripts component_list",
 /*  92 */ "type_prefix ::= opt_input_output",
 /*  93 */ "type_prefix ::= opt_disc_param_const",
 /*  94 */ "type_prefix ::= opt_disc_param_const opt_input_output",
 /*  95 */ "type_prefix ::= opt_flow_stream",
 /*  96 */ "type_prefix ::= opt_flow_stream opt_disc_param_const",
 /*  97 */ "type_prefix ::= opt_flow_stream opt_disc_param_const opt_input_output",
 /*  98 */ "type_prefix ::=",
 /*  99 */ "opt_flow_stream ::= FLOW",
 /* 100 */ "opt_flow_stream ::= STREAM",
 /* 101 */ "opt_disc_param_const ::= DISCRETE",
 /* 102 */ "opt_disc_param_const ::= PARAMETER",
 /* 103 */ "opt_disc_param_const ::= CONSTANT",
 /* 104 */ "opt_input_output ::= INPUT",
 /* 105 */ "opt_input_output ::= OUTPUT",
 /* 106 */ "type_specifier ::= name",
 /* 107 */ "opt_array_subscripts ::= array_subscripts",
 /* 108 */ "opt_array_subscripts ::=",
 /* 109 */ "component_list ::= component_declaration",
 /* 110 */ "component_list ::= component_list COMA component_declaration",
 /* 111 */ "component_declaration ::= declaration opt_condition_attribute comment",
 /* 112 */ "declaration ::= IDENT opt_array_subscripts opt_modification",
 /* 113 */ "opt_condition_attribute ::= IF expression",
 /* 114 */ "opt_condition_attribute ::=",
 /* 115 */ "composition_list ::= composition_list composition_element",
 /* 116 */ "composition_list ::=",
 /* 117 */ "composition_element ::= PUBLIC element_list",
 /* 118 */ "composition_element ::= PROTECTED element_list",
 /* 119 */ "composition_element ::= eq_alg_section_init",
 /* 120 */ "opt_modification ::=",
 /* 121 */ "opt_modification ::= modification",
 /* 122 */ "modification ::= class_modification opt_equal_exp",
 /* 123 */ "modification ::= EQUAL expression",
 /* 124 */ "modification ::= ASSING expression",
 /* 125 */ "class_modification ::= OPAREN opt_argument_list CPAREN",
 /* 126 */ "opt_argument_list ::= argument_list",
 /* 127 */ "opt_argument_list ::=",
 /* 128 */ "argument_list ::= argument_list COMA argument",
 /* 129 */ "argument_list ::= argument",
 /* 130 */ "argument ::= element_modification_replacable",
 /* 131 */ "argument ::= element_redeclaration",
 /* 132 */ "opt_each ::=",
 /* 133 */ "opt_each ::= EACH",
 /* 134 */ "element_modification_replacable ::= opt_each opt_final element_modification",
 /* 135 */ "element_modification_replacable ::= opt_each opt_final element_replacable",
 /* 136 */ "element_modification ::= name opt_modification string_comment",
 /* 137 */ "element_replacable ::= REPLACEABLE short_class_definition opt_constraining_clause",
 /* 138 */ "element_replacable ::= REPLACEABLE component_clause1 opt_constraining_clause",
 /* 139 */ "opt_equal_exp ::=",
 /* 140 */ "opt_equal_exp ::= EQUAL expression",
 /* 141 */ "element_redeclaration ::= REDECLARE opt_each opt_final element_redeclaration_1",
 /* 142 */ "element_redeclaration_1 ::= element_redeclaration_2",
 /* 143 */ "element_redeclaration_1 ::= element_replacable",
 /* 144 */ "element_redeclaration_2 ::= short_class_definition",
 /* 145 */ "element_redeclaration_2 ::= component_clause1",
 /* 146 */ "short_class_definition ::= class_prefixes IDENT EQUAL short_class_definition_exp",
 /* 147 */ "short_class_definition_exp ::= base_prefix name opt_array_subscripts opt_class_modification comment",
 /* 148 */ "short_class_definition_exp ::= ENUMERATION OPAREN enumeration_args CPAREN comment",
 /* 149 */ "enumeration_args ::= SEMICOLON",
 /* 150 */ "enumeration_args ::= enum_list",
 /* 151 */ "enum_list ::= enumeration_literal",
 /* 152 */ "enum_list ::= enum_list COMA enumeration_literal",
 /* 153 */ "enumeration_literal ::= IDENT comment",
 /* 154 */ "component_clause1 ::= type_prefix type_specifier component_declaration1",
 /* 155 */ "component_declaration1 ::= declaration comment",
 /* 156 */ "opt_class_modification ::= class_modification",
 /* 157 */ "opt_class_modification ::=",
 /* 158 */ "base_prefix ::= type_prefix",
 /* 159 */ "subscript_list ::= subscript",
 /* 160 */ "subscript_list ::= subscript_list COMA subscript",
 /* 161 */ "subscript ::= COLON",
 /* 162 */ "subscript ::= expression",
 /* 163 */ "array_subscripts ::= OBRACKET subscript_list CBRACKET",
 /* 164 */ "opt_annotation ::= annotation",
 /* 165 */ "opt_annotation ::=",
 /* 166 */ "annotation ::= ANNOTATION class_modification",
 /* 167 */ "eq_alg_section_init ::= INITIALEQ equation_list",
 /* 168 */ "eq_alg_section_init ::= EQUATION equation_list",
 /* 169 */ "eq_alg_section_init ::= INITIALALG statement_list",
 /* 170 */ "eq_alg_section_init ::= ALGORITHM statement_list",
 /* 171 */ "equation_list ::= equation_list equation SEMICOLON",
 /* 172 */ "equation_list ::=",
 /* 173 */ "equation ::= simple_expression EQUAL expression comment",
 /* 174 */ "equation ::= if_equation comment",
 /* 175 */ "equation ::= for_equation comment",
 /* 176 */ "equation ::= connect_clause comment",
 /* 177 */ "equation ::= when_equation comment",
 /* 178 */ "equation ::= primary",
 /* 179 */ "for_indices ::= for_index opt_more_indexes",
 /* 180 */ "opt_more_indexes ::= opt_more_indexes COMA for_index",
 /* 181 */ "opt_more_indexes ::=",
 /* 182 */ "for_index ::= IDENT opt_in",
 /* 183 */ "opt_in ::= IN expression",
 /* 184 */ "opt_in ::=",
 /* 185 */ "for_equation ::= FOR for_indices LOOP equation_list END FOR",
 /* 186 */ "when_equation ::= WHEN expression THEN equation_list opt_else_when END WHEN",
 /* 187 */ "opt_else_when ::= opt_else_when ELSEWHEN expression THEN equation_list",
 /* 188 */ "opt_else_when ::=",
 /* 189 */ "if_equation ::= IF expression THEN equation_list opt_elseif_eq opt_else_eq END IF",
 /* 190 */ "opt_elseif_eq ::= opt_elseif_eq ELSEIF expression THEN equation_list",
 /* 191 */ "opt_else_eq ::= ELSE equation_list",
 /* 192 */ "opt_else_eq ::=",
 /* 193 */ "connect_clause ::= CONNECT OPAREN component_reference COMA component_reference CPAREN",
 /* 194 */ "statement_list ::= statement_list statement SEMICOLON",
 /* 195 */ "statement_list ::=",
 /* 196 */ "statement ::= component_reference opt_assing comment",
 /* 197 */ "statement ::= OPAREN output_expression_list CPAREN ASSING component_reference function_call_args",
 /* 198 */ "statement ::= while_statement comment",
 /* 199 */ "statement ::= when_statement",
 /* 200 */ "statement ::= for_statement comment",
 /* 201 */ "statement ::= if_statement comment",
 /* 202 */ "statement ::= BREAK comment",
 /* 203 */ "statement ::= RETURN comment",
 /* 204 */ "while_statement ::= WHILE expression LOOP statement_list END WHILE",
 /* 205 */ "when_statement ::= WHEN expression THEN statement_list opt_else_when_list END WHEN comment",
 /* 206 */ "opt_else_when_list ::= opt_else_when_list ELSEWHEN expression THEN statement_list",
 /* 207 */ "opt_else_when_list ::=",
 /* 208 */ "for_statement ::= FOR for_indices LOOP statement_list END FOR",
 /* 209 */ "if_statement ::= IF expression THEN statement_list opt_esleif_st opt_else_st END IF",
 /* 210 */ "opt_esleif_st ::= opt_esleif_st ELSEIF expression THEN statement_list",
 /* 211 */ "opt_esleif_st ::=",
 /* 212 */ "opt_else_st ::=",
 /* 213 */ "opt_else_st ::= ELSE statement_list",
 /* 214 */ "output_expression_list ::= expression output_expression_list_more",
 /* 215 */ "output_expression_list ::=",
 /* 216 */ "output_expression_list_more ::= COMA opt_expression output_expression_list_more",
 /* 217 */ "output_expression_list_more ::=",
 /* 218 */ "opt_named_arguments ::= named_arguments",
 /* 219 */ "opt_named_arguments ::=",
 /* 220 */ "named_arguments ::= named_argument opt_more_args",
 /* 221 */ "named_argument ::= IDENT EQUAL function_argument",
 /* 222 */ "opt_more_args ::= COMA named_arguments",
 /* 223 */ "opt_more_args ::=",
 /* 224 */ "opt_assing ::= ASSING expression",
 /* 225 */ "opt_assing ::= function_call_args",
 /* 226 */ "function_argument ::= FUNCTION name OPAREN opt_named_arguments CPAREN",
 /* 227 */ "function_argument ::= expression",
 /* 228 */ "function_call_args ::= OPAREN opt_function_args CPAREN",
 /* 229 */ "opt_function_args ::= function_arguments",
 /* 230 */ "opt_function_args ::=",
 /* 231 */ "function_arguments ::= function_argument opt_function_arguments",
 /* 232 */ "function_arguments ::= named_argument opt_function_arguments",
 /* 233 */ "opt_function_arguments ::= COMA function_arguments",
 /* 234 */ "opt_function_arguments ::= COMA for_indices",
 /* 235 */ "opt_function_arguments ::=",
 /* 236 */ "expression ::= primary",
 /* 237 */ "expression ::= OPAREN output_expression_list CPAREN PARENS",
 /* 238 */ "expression ::= MINUS expression UMINUS",
 /* 239 */ "expression ::= PLUS expression UPLUS",
 /* 240 */ "expression ::= NOT expression",
 /* 241 */ "expression ::= expression COLON expression",
 /* 242 */ "expression ::= expression LOWER expression",
 /* 243 */ "expression ::= expression LOWEREQ expression",
 /* 244 */ "expression ::= expression GREATER expression",
 /* 245 */ "expression ::= expression GREATEREQ expression",
 /* 246 */ "expression ::= expression COMPNE expression",
 /* 247 */ "expression ::= expression COMPEQ expression",
 /* 248 */ "expression ::= expression SLASH expression",
 /* 249 */ "expression ::= expression DOTSLASH expression",
 /* 250 */ "expression ::= expression STAR expression",
 /* 251 */ "expression ::= expression DOTSTAR expression",
 /* 252 */ "expression ::= expression PLUS expression",
 /* 253 */ "expression ::= expression MINUS expression",
 /* 254 */ "expression ::= expression DOTPLUS expression",
 /* 255 */ "expression ::= expression DOTMINUS expression",
 /* 256 */ "expression ::= expression CARET expression",
 /* 257 */ "expression ::= expression DOTCARET expression",
 /* 258 */ "expression ::= expression AND expression",
 /* 259 */ "expression ::= expression OR expression",
 /* 260 */ "expression ::= IF expression THEN expression opt_elseif_exp ELSE expression",
 /* 261 */ "opt_expression ::= expression",
 /* 262 */ "opt_expression ::=",
 /* 263 */ "opt_elseif_exp ::= opt_elseif_exp ELSEIF expression THEN expression",
 /* 264 */ "opt_elseif_exp ::=",
 /* 265 */ "primary ::= INT",
 /* 266 */ "primary ::= FLOAT",
 /* 267 */ "primary ::= STRING",
 /* 268 */ "primary ::= FALSE",
 /* 269 */ "primary ::= TRUE",
 /* 270 */ "primary ::= DER function_call_args",
 /* 271 */ "primary ::= INITIAL function_call_args",
 /* 272 */ "primary ::= opt_comp_call",
 /* 273 */ "primary ::= OBRACKET expression_list primary_exp_list CBRACKET",
 /* 274 */ "primary ::= OBRACE function_arguments CBRACE",
 /* 275 */ "primary ::= ENDSUB",
 /* 276 */ "primary_exp_list ::= primary_exp_list SEMICOLON expression_list",
 /* 277 */ "primary_exp_list ::=",
 /* 278 */ "component_reference ::= IDENT opt_array_subscripts component_reference_list",
 /* 279 */ "component_reference ::= DOT IDENT opt_array_subscripts component_reference_list",
 /* 280 */ "expression_list_more ::= COMA expression_list",
 /* 281 */ "expression_list_more ::=",
 /* 282 */ "expression_list ::= expression expression_list_more",
 /* 283 */ "component_reference_list ::= component_reference_list DOT IDENT opt_array_subscripts",
 /* 284 */ "component_reference_list ::=",
 /* 285 */ "simple_expression ::= primary",
 /* 286 */ "simple_expression ::= OPAREN output_expression_list CPAREN PARENS",
 /* 287 */ "simple_expression ::= MINUS expression UMINUS",
 /* 288 */ "simple_expression ::= PLUS expression UPLUS",
 /* 289 */ "simple_expression ::= NOT expression",
 /* 290 */ "simple_expression ::= simple_expression COLON expression",
 /* 291 */ "simple_expression ::= simple_expression LOWER expression",
 /* 292 */ "simple_expression ::= simple_expression LOWEREQ expression",
 /* 293 */ "simple_expression ::= simple_expression GREATER expression",
 /* 294 */ "simple_expression ::= simple_expression GREATEREQ expression",
 /* 295 */ "simple_expression ::= simple_expression COMPNE expression",
 /* 296 */ "simple_expression ::= simple_expression COMPEQ expression",
 /* 297 */ "simple_expression ::= simple_expression SLASH expression",
 /* 298 */ "simple_expression ::= simple_expression DOTSLASH expression",
 /* 299 */ "simple_expression ::= simple_expression STAR expression",
 /* 300 */ "simple_expression ::= simple_expression DOTSTAR expression",
 /* 301 */ "simple_expression ::= simple_expression PLUS expression",
 /* 302 */ "simple_expression ::= simple_expression MINUS expression",
 /* 303 */ "simple_expression ::= simple_expression DOTPLUS expression",
 /* 304 */ "simple_expression ::= simple_expression DOTMINUS expression",
 /* 305 */ "simple_expression ::= simple_expression CARET expression",
 /* 306 */ "simple_expression ::= simple_expression DOTCARET expression",
 /* 307 */ "simple_expression ::= simple_expression AND expression",
 /* 308 */ "simple_expression ::= simple_expression OR expression",
 /* 309 */ "more_cr ::= more_cr DOT IDENT opt_array_subscripts",
 /* 310 */ "more_cr ::=",
 /* 311 */ "more_comp_call ::= more_comp_call DOT IDENT",
 /* 312 */ "more_comp_call ::=",
 /* 313 */ "opt_comp_call ::= DOT IDENT more_comp_call",
 /* 314 */ "opt_comp_call ::= DOT IDENT more_comp_call array_subscripts more_cr",
 /* 315 */ "opt_comp_call ::= IDENT more_comp_call array_subscripts more_cr",
 /* 316 */ "opt_comp_call ::= DOT IDENT more_comp_call function_call_args",
 /* 317 */ "opt_comp_call ::= IDENT more_comp_call function_call_args FC",
};
#endif /* NDEBUG */


#if YYSTACKDEPTH<=0
/*
** Try to increase the size of the parser stack.
*/
static void yyGrowStack(yyParser *p){
  int newSize;
  yyStackEntry *pNew;

  newSize = p->yystksz*2 + 100;
  pNew = realloc(p->yystack, newSize*sizeof(pNew[0]));
  if( pNew ){
    p->yystack = pNew;
    p->yystksz = newSize;
#ifndef NDEBUG
    if( yyTraceFILE ){
      fprintf(yyTraceFILE,"%sStack grows to %d entries!\n",
              yyTracePrompt, p->yystksz);
    }
#endif
  }
}
#endif

/* 
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to umodParse and umodParseFree.
*/
void *umodParseAlloc(void *(*mallocProc)(size_t)){
  yyParser *pParser;
  pParser = (yyParser*)(*mallocProc)( (size_t)sizeof(yyParser) );
  if( pParser ){
    pParser->yyidx = -1;
#ifdef YYTRACKMAXSTACKDEPTH
    pParser->yyidxMax = 0;
#endif
#if YYSTACKDEPTH<=0
    pParser->yystack = NULL;
    pParser->yystksz = 0;
    yyGrowStack(pParser);
#endif
  }
  return pParser;
}

/* The following function deletes the value associated with a
** symbol.  The symbol can be either a terminal or nonterminal.
** "yymajor" is the symbol code, and "yypminor" is a pointer to
** the value.
*/
static void yy_destructor(
  yyParser *yypParser,    /* The parser */
  YYCODETYPE yymajor,     /* Type code for object to destroy */
  YYMINORTYPE *yypminor   /* The object to be destroyed */
){
  umodParseARG_FETCH;
  switch( yymajor ){
    /* Here is inserted the actions which take place when a
    ** terminal or non-terminal is destroyed.  This can happen
    ** when the symbol is popped from the stack during a
    ** reduce or during error processing or when a parser is 
    ** being destroyed before it is finished parsing.
    **
    ** Note: during a reduce, the only symbols destroyed are those
    ** which appear on the RHS of the rule, but which are not used
    ** inside the C code.
    */
    default:  break;   /* If no destructor action specified: do nothing */
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
**
** Return the major token number for the symbol popped.
*/
static int yy_pop_parser_stack(yyParser *pParser){
  YYCODETYPE yymajor;
  yyStackEntry *yytos = &pParser->yystack[pParser->yyidx];

  if( pParser->yyidx<0 ) return 0;
#ifndef NDEBUG
  if( yyTraceFILE && pParser->yyidx>=0 ){
    fprintf(yyTraceFILE,"%sPopping %s\n",
      yyTracePrompt,
      yyTokenName[yytos->major]);
  }
#endif
  yymajor = yytos->major;
  yy_destructor(pParser, yymajor, &yytos->minor);
  pParser->yyidx--;
  return yymajor;
}

/* 
** Deallocate and destroy a parser.  Destructors are all called for
** all stack elements before shutting the parser down.
**
** Inputs:
** <ul>
** <li>  A pointer to the parser.  This should be a pointer
**       obtained from umodParseAlloc.
** <li>  A pointer to a function used to reclaim memory obtained
**       from malloc.
** </ul>
*/
void umodParseFree(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*)     /* Function used to reclaim memory */
){
  yyParser *pParser = (yyParser*)p;
  if( pParser==0 ) return;
  while( pParser->yyidx>=0 ) yy_pop_parser_stack(pParser);
#if YYSTACKDEPTH<=0
  free(pParser->yystack);
#endif
  (*freeProc)((void*)pParser);
}

/*
** Return the peak depth of the stack for a parser.
*/
#ifdef YYTRACKMAXSTACKDEPTH
int umodParseStackPeak(void *p){
  yyParser *pParser = (yyParser*)p;
  return pParser->yyidxMax;
}
#endif

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_shift_action(
  yyParser *pParser,        /* The parser */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
  int stateno = pParser->yystack[pParser->yyidx].stateno;
 
  if( stateno>YY_SHIFT_MAX || (i = yy_shift_ofst[stateno])==YY_SHIFT_USE_DFLT ){
    return yy_default[stateno];
  }
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
  if( i<0 || i>=YY_SZ_ACTTAB || yy_lookahead[i]!=iLookAhead ){
    if( iLookAhead>0 ){
#ifdef YYFALLBACK
      YYCODETYPE iFallback;            /* Fallback token */
      if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])
             && (iFallback = yyFallback[iLookAhead])!=0 ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
             yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);
        }
#endif
        return yy_find_shift_action(pParser, iFallback);
      }
#endif
#ifdef YYWILDCARD
      {
        int j = i - iLookAhead + YYWILDCARD;
        if( j>=0 && j<YY_SZ_ACTTAB && yy_lookahead[j]==YYWILDCARD ){
#ifndef NDEBUG
          if( yyTraceFILE ){
            fprintf(yyTraceFILE, "%sWILDCARD %s => %s\n",
               yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[YYWILDCARD]);
          }
#endif /* NDEBUG */
          return yy_action[j];
        }
      }
#endif /* YYWILDCARD */
    }
    return yy_default[stateno];
  }else{
    return yy_action[i];
  }
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
**
** If the look-ahead token is YYNOCODE, then check to see if the action is
** independent of the look-ahead.  If it is, return the action, otherwise
** return YY_NO_ACTION.
*/
static int yy_find_reduce_action(
  int stateno,              /* Current state number */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
#ifdef YYERRORSYMBOL
  if( stateno>YY_REDUCE_MAX ){
    return yy_default[stateno];
  }
#else
  assert( stateno<=YY_REDUCE_MAX );
#endif
  i = yy_reduce_ofst[stateno];
  assert( i!=YY_REDUCE_USE_DFLT );
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
#ifdef YYERRORSYMBOL
  if( i<0 || i>=YY_SZ_ACTTAB || yy_lookahead[i]!=iLookAhead ){
    return yy_default[stateno];
  }
#else
  assert( i>=0 && i<YY_SZ_ACTTAB );
  assert( yy_lookahead[i]==iLookAhead );
#endif
  return yy_action[i];
}

/*
** The following routine is called if the stack overflows.
*/
static void yyStackOverflow(yyParser *yypParser, YYMINORTYPE *yypMinor){
   umodParseARG_FETCH;
   yypParser->yyidx--;
#ifndef NDEBUG
   if( yyTraceFILE ){
     fprintf(yyTraceFILE,"%sStack Overflow!\n",yyTracePrompt);
   }
#endif
   while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
   /* Here code is inserted which will execute if the parser
   ** stack every overflows */
   umodParseARG_STORE; /* Suppress warning about unused %extra_argument var */
}

/*
** Perform a shift action.
*/
static void yy_shift(
  yyParser *yypParser,          /* The parser to be shifted */
  int yyNewState,               /* The new state to shift in */
  int yyMajor,                  /* The major token to shift in */
  YYMINORTYPE *yypMinor         /* Pointer to the minor token to shift in */
){
  yyStackEntry *yytos;
  yypParser->yyidx++;
#ifdef YYTRACKMAXSTACKDEPTH
  if( yypParser->yyidx>yypParser->yyidxMax ){
    yypParser->yyidxMax = yypParser->yyidx;
  }
#endif
#if YYSTACKDEPTH>0 
  if( yypParser->yyidx>=YYSTACKDEPTH ){
    yyStackOverflow(yypParser, yypMinor);
    return;
  }
#else
  if( yypParser->yyidx>=yypParser->yystksz ){
    yyGrowStack(yypParser);
    if( yypParser->yyidx>=yypParser->yystksz ){
      yyStackOverflow(yypParser, yypMinor);
      return;
    }
  }
#endif
  yytos = &yypParser->yystack[yypParser->yyidx];
  yytos->stateno = (YYACTIONTYPE)yyNewState;
  yytos->major = (YYCODETYPE)yyMajor;
  yytos->minor = *yypMinor;
#ifndef NDEBUG
  if( yyTraceFILE && yypParser->yyidx>0 ){
    int i;
    fprintf(yyTraceFILE,"%sShift %d\n",yyTracePrompt,yyNewState);
    fprintf(yyTraceFILE,"%sStack:",yyTracePrompt);
    for(i=1; i<=yypParser->yyidx; i++)
      fprintf(yyTraceFILE," %s",yyTokenName[yypParser->yystack[i].major]);
    fprintf(yyTraceFILE,"\n");
  }
#endif
}

/* The following table contains information about every rule that
** is used during the reduce.
*/
static const struct {
  YYCODETYPE lhs;         /* Symbol on the left-hand side of the rule */
  unsigned char nrhs;     /* Number of right-hand side symbols in the rule */
} yyRuleInfo[] = {
  { 102, 1 },
  { 103, 2 },
  { 104, 3 },
  { 104, 0 },
  { 106, 1 },
  { 106, 0 },
  { 107, 3 },
  { 107, 2 },
  { 107, 1 },
  { 105, 0 },
  { 105, 2 },
  { 108, 3 },
  { 110, 3 },
  { 111, 1 },
  { 111, 0 },
  { 112, 2 },
  { 116, 1 },
  { 116, 0 },
  { 117, 2 },
  { 117, 2 },
  { 117, 0 },
  { 109, 1 },
  { 109, 0 },
  { 115, 1 },
  { 115, 1 },
  { 115, 2 },
  { 115, 1 },
  { 115, 2 },
  { 115, 1 },
  { 115, 1 },
  { 115, 2 },
  { 115, 1 },
  { 118, 1 },
  { 118, 0 },
  { 114, 1 },
  { 114, 0 },
  { 113, 5 },
  { 113, 7 },
  { 113, 7 },
  { 113, 10 },
  { 113, 7 },
  { 126, 3 },
  { 126, 0 },
  { 120, 3 },
  { 128, 5 },
  { 128, 7 },
  { 128, 0 },
  { 130, 1 },
  { 130, 0 },
  { 131, 3 },
  { 131, 4 },
  { 131, 0 },
  { 129, 2 },
  { 129, 0 },
  { 127, 3 },
  { 127, 5 },
  { 127, 2 },
  { 127, 0 },
  { 119, 0 },
  { 119, 1 },
  { 119, 3 },
  { 140, 3 },
  { 140, 1 },
  { 136, 1 },
  { 136, 1 },
  { 136, 6 },
  { 141, 3 },
  { 148, 3 },
  { 148, 2 },
  { 149, 0 },
  { 149, 1 },
  { 149, 4 },
  { 150, 1 },
  { 150, 3 },
  { 124, 2 },
  { 137, 0 },
  { 137, 3 },
  { 142, 4 },
  { 143, 0 },
  { 143, 1 },
  { 144, 0 },
  { 144, 1 },
  { 145, 0 },
  { 145, 1 },
  { 147, 0 },
  { 147, 2 },
  { 151, 3 },
  { 146, 1 },
  { 146, 2 },
  { 152, 1 },
  { 152, 1 },
  { 153, 4 },
  { 154, 1 },
  { 154, 1 },
  { 154, 2 },
  { 154, 1 },
  { 154, 2 },
  { 154, 3 },
  { 154, 0 },
  { 159, 1 },
  { 159, 1 },
  { 158, 1 },
  { 158, 1 },
  { 158, 1 },
  { 157, 1 },
  { 157, 1 },
  { 155, 1 },
  { 122, 1 },
  { 122, 0 },
  { 156, 1 },
  { 156, 3 },
  { 161, 3 },
  { 162, 3 },
  { 163, 2 },
  { 163, 0 },
  { 139, 2 },
  { 139, 0 },
  { 138, 2 },
  { 138, 2 },
  { 138, 1 },
  { 164, 0 },
  { 164, 1 },
  { 167, 2 },
  { 167, 2 },
  { 167, 2 },
  { 168, 3 },
  { 170, 1 },
  { 170, 0 },
  { 171, 3 },
  { 171, 1 },
  { 172, 1 },
  { 172, 1 },
  { 175, 0 },
  { 175, 1 },
  { 173, 3 },
  { 173, 3 },
  { 176, 3 },
  { 177, 3 },
  { 177, 3 },
  { 169, 0 },
  { 169, 2 },
  { 174, 4 },
  { 180, 1 },
  { 180, 1 },
  { 181, 1 },
  { 181, 1 },
  { 178, 4 },
  { 182, 5 },
  { 182, 5 },
  { 125, 1 },
  { 125, 1 },
  { 183, 1 },
  { 183, 3 },
  { 184, 2 },
  { 179, 3 },
  { 185, 2 },
  { 123, 1 },
  { 123, 0 },
  { 121, 1 },
  { 186, 1 },
  { 186, 3 },
  { 187, 1 },
  { 187, 1 },
  { 160, 3 },
  { 132, 1 },
  { 132, 0 },
  { 135, 2 },
  { 166, 2 },
  { 166, 2 },
  { 166, 2 },
  { 166, 2 },
  { 188, 3 },
  { 188, 0 },
  { 190, 4 },
  { 190, 2 },
  { 190, 2 },
  { 190, 2 },
  { 190, 2 },
  { 190, 1 },
  { 197, 2 },
  { 199, 3 },
  { 199, 0 },
  { 198, 2 },
  { 200, 2 },
  { 200, 0 },
  { 193, 6 },
  { 195, 7 },
  { 201, 5 },
  { 201, 0 },
  { 192, 8 },
  { 202, 5 },
  { 203, 2 },
  { 203, 0 },
  { 194, 6 },
  { 189, 3 },
  { 189, 0 },
  { 204, 3 },
  { 204, 6 },
  { 204, 2 },
  { 204, 1 },
  { 204, 2 },
  { 204, 2 },
  { 204, 2 },
  { 204, 2 },
  { 208, 6 },
  { 209, 8 },
  { 212, 5 },
  { 212, 0 },
  { 210, 6 },
  { 211, 8 },
  { 213, 5 },
  { 213, 0 },
  { 214, 0 },
  { 214, 2 },
  { 206, 2 },
  { 206, 0 },
  { 215, 3 },
  { 215, 0 },
  { 217, 1 },
  { 217, 0 },
  { 218, 2 },
  { 219, 3 },
  { 220, 2 },
  { 220, 0 },
  { 205, 2 },
  { 205, 1 },
  { 221, 5 },
  { 221, 1 },
  { 207, 3 },
  { 222, 1 },
  { 222, 0 },
  { 223, 2 },
  { 223, 2 },
  { 224, 2 },
  { 224, 2 },
  { 224, 0 },
  { 165, 1 },
  { 165, 4 },
  { 165, 3 },
  { 165, 3 },
  { 165, 2 },
  { 165, 3 },
  { 165, 3 },
  { 165, 3 },
  { 165, 3 },
  { 165, 3 },
  { 165, 3 },
  { 165, 3 },
  { 165, 3 },
  { 165, 3 },
  { 165, 3 },
  { 165, 3 },
  { 165, 3 },
  { 165, 3 },
  { 165, 3 },
  { 165, 3 },
  { 165, 3 },
  { 165, 3 },
  { 165, 3 },
  { 165, 3 },
  { 165, 7 },
  { 216, 1 },
  { 216, 0 },
  { 225, 5 },
  { 225, 0 },
  { 196, 1 },
  { 196, 1 },
  { 196, 1 },
  { 196, 1 },
  { 196, 1 },
  { 196, 2 },
  { 196, 2 },
  { 196, 1 },
  { 196, 4 },
  { 196, 3 },
  { 196, 1 },
  { 227, 3 },
  { 227, 0 },
  { 133, 3 },
  { 133, 4 },
  { 229, 2 },
  { 229, 0 },
  { 134, 2 },
  { 228, 4 },
  { 228, 0 },
  { 191, 1 },
  { 191, 4 },
  { 191, 3 },
  { 191, 3 },
  { 191, 2 },
  { 191, 3 },
  { 191, 3 },
  { 191, 3 },
  { 191, 3 },
  { 191, 3 },
  { 191, 3 },
  { 191, 3 },
  { 191, 3 },
  { 191, 3 },
  { 191, 3 },
  { 191, 3 },
  { 191, 3 },
  { 191, 3 },
  { 191, 3 },
  { 191, 3 },
  { 191, 3 },
  { 191, 3 },
  { 191, 3 },
  { 191, 3 },
  { 230, 4 },
  { 230, 0 },
  { 231, 3 },
  { 231, 0 },
  { 226, 3 },
  { 226, 5 },
  { 226, 4 },
  { 226, 4 },
  { 226, 4 },
};

static void yy_accept(yyParser*);  /* Forward Declaration */

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
*/
static void yy_reduce(
  yyParser *yypParser,         /* The parser */
  int yyruleno                 /* Number of the rule by which to reduce */
){
  int yygoto;                     /* The next state */
  int yyact;                      /* The next action */
  YYMINORTYPE yygotominor;        /* The LHS of the rule reduced */
  yyStackEntry *yymsp;            /* The top of the parser's stack */
  int yysize;                     /* Amount to pop the stack */
  umodParseARG_FETCH;
  yymsp = &yypParser->yystack[yypParser->yyidx];
#ifndef NDEBUG
  if( yyTraceFILE && yyruleno>=0 
        && yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) ){
    fprintf(yyTraceFILE, "%sReduce [%s].\n", yyTracePrompt,
      yyRuleName[yyruleno]);
  }
#endif /* NDEBUG */

  /* Silence complaints from purify about yygotominor being uninitialized
  ** in some cases when it is copied into the stack after the following
  ** switch.  yygotominor is uninitialized when a rule reduces that does
  ** not set the value of its left-hand side nonterminal.  Leaving the
  ** value of the nonterminal uninitialized is utterly harmless as long
  ** as the value is never used.  So really the only thing this code
  ** accomplishes is to quieten purify.  
  **
  ** 2007-01-16:  The wireshark project (www.wireshark.org) reports that
  ** without this code, their parser segfaults.  I'm not sure what there
  ** parser is doing to make this happen.  This is the second bug report
  ** from wireshark this week.  Clearly they are stressing Lemon in ways
  ** that it has not been previously stressed...  (SQLite ticket #2172)
  */
  /*memset(&yygotominor, 0, sizeof(yygotominor));*/
  yygotominor = yyzerominor;


  switch( yyruleno ){
  /* Beginning here are the reduction cases.  A typical example
  ** follows:
  **   case 0:
  **  #line <lineno> <grammarfile>
  **     { ... }           // User supplied code
  **  #line <lineno> <thisfile>
  **     break;
  */
      case 0: /* program ::= stored_definition */
      case 1: /* stored_definition ::= opt_within_name class_definition_list */ yytestcase(yyruleno==1);
      case 2: /* opt_within_name ::= WITHIN opt_name SEMICOLON */ yytestcase(yyruleno==2);
      case 3: /* opt_within_name ::= */ yytestcase(yyruleno==3);
      case 4: /* opt_name ::= name */ yytestcase(yyruleno==4);
      case 5: /* opt_name ::= */ yytestcase(yyruleno==5);
      case 6: /* name ::= name DOT IDENT */ yytestcase(yyruleno==6);
      case 7: /* name ::= DOT IDENT */ yytestcase(yyruleno==7);
      case 8: /* name ::= IDENT */ yytestcase(yyruleno==8);
      case 9: /* class_definition_list ::= */ yytestcase(yyruleno==9);
      case 10: /* class_definition_list ::= class_definition_list class_definition_aux */ yytestcase(yyruleno==10);
      case 11: /* class_definition_aux ::= opt_final class_definition SEMICOLON */ yytestcase(yyruleno==11);
      case 12: /* class_definition ::= opt_encapsulated class_prefix class_specifier */ yytestcase(yyruleno==12);
#line 93 "/Users/phryne/Desktop/magmaleon/src/parse/parser/lemon-parser.lm"
{}
#line 1779 "/Users/phryne/Desktop/magmaleon/src/parse/parser/lemon-parser.c"
        break;
      case 13: /* opt_encapsulated ::= ENCAPSULATED */
      case 14: /* opt_encapsulated ::= */ yytestcase(yyruleno==14);
      case 15: /* class_prefix ::= opt_partial class_prefixes */ yytestcase(yyruleno==15);
      case 16: /* opt_expandable ::= EXPANDABLE */ yytestcase(yyruleno==16);
      case 17: /* opt_expandable ::= */ yytestcase(yyruleno==17);
      case 18: /* opt_pure_impure_operator ::= PURE opt_operator */ yytestcase(yyruleno==18);
      case 19: /* opt_pure_impure_operator ::= IMPURE opt_operator */ yytestcase(yyruleno==19);
      case 20: /* opt_pure_impure_operator ::= */ yytestcase(yyruleno==20);
      case 21: /* opt_final ::= FINAL */ yytestcase(yyruleno==21);
      case 22: /* opt_final ::= */ yytestcase(yyruleno==22);
      case 36: /* class_specifier ::= IDENT string_comment composition END IDENT */ yytestcase(yyruleno==36);
      case 37: /* class_specifier ::= IDENT EQUAL base_prefix name opt_array_subscripts opt_class_modification comment */ yytestcase(yyruleno==37);
      case 38: /* class_specifier ::= IDENT EQUAL ENUMERATION OPAREN enumeration_args CPAREN comment */ yytestcase(yyruleno==38);
      case 39: /* class_specifier ::= IDENT EQUAL DER OPAREN name COMA IDENT more_ids CPAREN comment */ yytestcase(yyruleno==39);
      case 40: /* class_specifier ::= EXTENDS IDENT opt_class_modification string_comment composition END IDENT */ yytestcase(yyruleno==40);
      case 41: /* more_ids ::= more_ids COMA IDENT */ yytestcase(yyruleno==41);
      case 42: /* more_ids ::= */ yytestcase(yyruleno==42);
      case 43: /* composition ::= composition_aux_1 opt_external_composition opt_annotation_composition */ yytestcase(yyruleno==43);
      case 44: /* opt_external_composition ::= EXTERNAL opt_language_specification opt_external_function_call opt_annotation SEMICOLON */ yytestcase(yyruleno==44);
      case 45: /* opt_external_composition ::= EXTERNAL opt_language_specification component_reference EQUAL opt_external_function_call opt_annotation SEMICOLON */ yytestcase(yyruleno==45);
      case 46: /* opt_external_composition ::= */ yytestcase(yyruleno==46);
      case 47: /* opt_language_specification ::= STRING */ yytestcase(yyruleno==47);
      case 48: /* opt_language_specification ::= */ yytestcase(yyruleno==48);
      case 49: /* opt_external_function_call ::= IDENT OPAREN CPAREN */ yytestcase(yyruleno==49);
      case 50: /* opt_external_function_call ::= IDENT OPAREN expression_list CPAREN */ yytestcase(yyruleno==50);
      case 51: /* opt_external_function_call ::= */ yytestcase(yyruleno==51);
      case 52: /* opt_annotation_composition ::= annotation SEMICOLON */ yytestcase(yyruleno==52);
      case 53: /* opt_annotation_composition ::= */ yytestcase(yyruleno==53);
      case 54: /* composition_aux_1 ::= element SEMICOLON element_list */ yytestcase(yyruleno==54);
      case 55: /* composition_aux_1 ::= element SEMICOLON element_list composition_element composition_list */ yytestcase(yyruleno==55);
      case 56: /* composition_aux_1 ::= composition_element composition_list */ yytestcase(yyruleno==56);
      case 57: /* composition_aux_1 ::= */ yytestcase(yyruleno==57);
      case 58: /* string_comment ::= */ yytestcase(yyruleno==58);
      case 59: /* string_comment ::= STRING */ yytestcase(yyruleno==59);
      case 60: /* string_comment ::= STRING PLUS string_comment_no_empty */ yytestcase(yyruleno==60);
      case 61: /* string_comment_no_empty ::= STRING PLUS string_comment_no_empty */ yytestcase(yyruleno==61);
      case 62: /* string_comment_no_empty ::= STRING */ yytestcase(yyruleno==62);
      case 63: /* element ::= import_clause */ yytestcase(yyruleno==63);
      case 64: /* element ::= extends_clause */ yytestcase(yyruleno==64);
      case 65: /* element ::= opt_redeclare opt_final opt_inner opt_outer element_option opt_constraining_clause */ yytestcase(yyruleno==65);
      case 66: /* import_clause ::= IMPORT opt_import comment */ yytestcase(yyruleno==66);
      case 67: /* opt_import ::= IDENT EQUAL name */ yytestcase(yyruleno==67);
      case 68: /* opt_import ::= name opt_import_spec */ yytestcase(yyruleno==68);
      case 69: /* opt_import_spec ::= */ yytestcase(yyruleno==69);
      case 70: /* opt_import_spec ::= DOTSTAR */ yytestcase(yyruleno==70);
      case 71: /* opt_import_spec ::= DOT OBRACE import_list CBRACE */ yytestcase(yyruleno==71);
      case 72: /* import_list ::= IDENT */ yytestcase(yyruleno==72);
      case 73: /* import_list ::= IDENT COMA import_list */ yytestcase(yyruleno==73);
      case 74: /* comment ::= string_comment opt_annotation */ yytestcase(yyruleno==74);
      case 75: /* element_list ::= */ yytestcase(yyruleno==75);
      case 76: /* element_list ::= element SEMICOLON element_list */ yytestcase(yyruleno==76);
      case 77: /* extends_clause ::= EXTENDS name opt_class_modification opt_annotation */ yytestcase(yyruleno==77);
      case 78: /* opt_redeclare ::= */ yytestcase(yyruleno==78);
      case 79: /* opt_redeclare ::= REDECLARE */ yytestcase(yyruleno==79);
      case 80: /* opt_inner ::= */ yytestcase(yyruleno==80);
      case 81: /* opt_inner ::= INNER */ yytestcase(yyruleno==81);
      case 82: /* opt_outer ::= */ yytestcase(yyruleno==82);
      case 83: /* opt_outer ::= OUTER */ yytestcase(yyruleno==83);
      case 84: /* opt_constraining_clause ::= */ yytestcase(yyruleno==84);
      case 85: /* opt_constraining_clause ::= constraining_clause comment */ yytestcase(yyruleno==85);
      case 86: /* constraining_clause ::= CONSTRAINEDBY name opt_class_modification */ yytestcase(yyruleno==86);
      case 87: /* element_option ::= element_option_1 */ yytestcase(yyruleno==87);
      case 88: /* element_option ::= REPLACABLE element_option_1 */ yytestcase(yyruleno==88);
      case 89: /* element_option_1 ::= class_definition */ yytestcase(yyruleno==89);
      case 90: /* element_option_1 ::= component_clause */ yytestcase(yyruleno==90);
      case 91: /* component_clause ::= type_prefix type_specifier opt_array_subscripts component_list */ yytestcase(yyruleno==91);
      case 92: /* type_prefix ::= opt_input_output */ yytestcase(yyruleno==92);
      case 93: /* type_prefix ::= opt_disc_param_const */ yytestcase(yyruleno==93);
      case 94: /* type_prefix ::= opt_disc_param_const opt_input_output */ yytestcase(yyruleno==94);
      case 95: /* type_prefix ::= opt_flow_stream */ yytestcase(yyruleno==95);
      case 96: /* type_prefix ::= opt_flow_stream opt_disc_param_const */ yytestcase(yyruleno==96);
      case 97: /* type_prefix ::= opt_flow_stream opt_disc_param_const opt_input_output */ yytestcase(yyruleno==97);
      case 98: /* type_prefix ::= */ yytestcase(yyruleno==98);
      case 99: /* opt_flow_stream ::= FLOW */ yytestcase(yyruleno==99);
      case 100: /* opt_flow_stream ::= STREAM */ yytestcase(yyruleno==100);
      case 101: /* opt_disc_param_const ::= DISCRETE */ yytestcase(yyruleno==101);
      case 102: /* opt_disc_param_const ::= PARAMETER */ yytestcase(yyruleno==102);
      case 103: /* opt_disc_param_const ::= CONSTANT */ yytestcase(yyruleno==103);
      case 104: /* opt_input_output ::= INPUT */ yytestcase(yyruleno==104);
      case 105: /* opt_input_output ::= OUTPUT */ yytestcase(yyruleno==105);
      case 106: /* type_specifier ::= name */ yytestcase(yyruleno==106);
      case 107: /* opt_array_subscripts ::= array_subscripts */ yytestcase(yyruleno==107);
      case 108: /* opt_array_subscripts ::= */ yytestcase(yyruleno==108);
      case 109: /* component_list ::= component_declaration */ yytestcase(yyruleno==109);
      case 110: /* component_list ::= component_list COMA component_declaration */ yytestcase(yyruleno==110);
      case 111: /* component_declaration ::= declaration opt_condition_attribute comment */ yytestcase(yyruleno==111);
      case 112: /* declaration ::= IDENT opt_array_subscripts opt_modification */ yytestcase(yyruleno==112);
      case 113: /* opt_condition_attribute ::= IF expression */ yytestcase(yyruleno==113);
      case 114: /* opt_condition_attribute ::= */ yytestcase(yyruleno==114);
      case 115: /* composition_list ::= composition_list composition_element */ yytestcase(yyruleno==115);
      case 116: /* composition_list ::= */ yytestcase(yyruleno==116);
      case 117: /* composition_element ::= PUBLIC element_list */ yytestcase(yyruleno==117);
      case 118: /* composition_element ::= PROTECTED element_list */ yytestcase(yyruleno==118);
      case 119: /* composition_element ::= eq_alg_section_init */ yytestcase(yyruleno==119);
      case 120: /* opt_modification ::= */ yytestcase(yyruleno==120);
      case 121: /* opt_modification ::= modification */ yytestcase(yyruleno==121);
      case 122: /* modification ::= class_modification opt_equal_exp */ yytestcase(yyruleno==122);
      case 123: /* modification ::= EQUAL expression */ yytestcase(yyruleno==123);
      case 124: /* modification ::= ASSING expression */ yytestcase(yyruleno==124);
      case 125: /* class_modification ::= OPAREN opt_argument_list CPAREN */ yytestcase(yyruleno==125);
      case 126: /* opt_argument_list ::= argument_list */ yytestcase(yyruleno==126);
      case 127: /* opt_argument_list ::= */ yytestcase(yyruleno==127);
      case 128: /* argument_list ::= argument_list COMA argument */ yytestcase(yyruleno==128);
      case 129: /* argument_list ::= argument */ yytestcase(yyruleno==129);
      case 130: /* argument ::= element_modification_replacable */ yytestcase(yyruleno==130);
      case 131: /* argument ::= element_redeclaration */ yytestcase(yyruleno==131);
      case 132: /* opt_each ::= */ yytestcase(yyruleno==132);
      case 133: /* opt_each ::= EACH */ yytestcase(yyruleno==133);
      case 134: /* element_modification_replacable ::= opt_each opt_final element_modification */ yytestcase(yyruleno==134);
      case 135: /* element_modification_replacable ::= opt_each opt_final element_replacable */ yytestcase(yyruleno==135);
      case 136: /* element_modification ::= name opt_modification string_comment */ yytestcase(yyruleno==136);
      case 137: /* element_replacable ::= REPLACEABLE short_class_definition opt_constraining_clause */ yytestcase(yyruleno==137);
      case 138: /* element_replacable ::= REPLACEABLE component_clause1 opt_constraining_clause */ yytestcase(yyruleno==138);
      case 139: /* opt_equal_exp ::= */ yytestcase(yyruleno==139);
      case 140: /* opt_equal_exp ::= EQUAL expression */ yytestcase(yyruleno==140);
      case 141: /* element_redeclaration ::= REDECLARE opt_each opt_final element_redeclaration_1 */ yytestcase(yyruleno==141);
      case 142: /* element_redeclaration_1 ::= element_redeclaration_2 */ yytestcase(yyruleno==142);
      case 143: /* element_redeclaration_1 ::= element_replacable */ yytestcase(yyruleno==143);
      case 144: /* element_redeclaration_2 ::= short_class_definition */ yytestcase(yyruleno==144);
      case 145: /* element_redeclaration_2 ::= component_clause1 */ yytestcase(yyruleno==145);
      case 146: /* short_class_definition ::= class_prefixes IDENT EQUAL short_class_definition_exp */ yytestcase(yyruleno==146);
      case 147: /* short_class_definition_exp ::= base_prefix name opt_array_subscripts opt_class_modification comment */ yytestcase(yyruleno==147);
      case 148: /* short_class_definition_exp ::= ENUMERATION OPAREN enumeration_args CPAREN comment */ yytestcase(yyruleno==148);
      case 149: /* enumeration_args ::= SEMICOLON */ yytestcase(yyruleno==149);
      case 150: /* enumeration_args ::= enum_list */ yytestcase(yyruleno==150);
      case 151: /* enum_list ::= enumeration_literal */ yytestcase(yyruleno==151);
      case 152: /* enum_list ::= enum_list COMA enumeration_literal */ yytestcase(yyruleno==152);
      case 153: /* enumeration_literal ::= IDENT comment */ yytestcase(yyruleno==153);
      case 154: /* component_clause1 ::= type_prefix type_specifier component_declaration1 */ yytestcase(yyruleno==154);
      case 155: /* component_declaration1 ::= declaration comment */ yytestcase(yyruleno==155);
      case 156: /* opt_class_modification ::= class_modification */ yytestcase(yyruleno==156);
      case 157: /* opt_class_modification ::= */ yytestcase(yyruleno==157);
      case 158: /* base_prefix ::= type_prefix */ yytestcase(yyruleno==158);
      case 159: /* subscript_list ::= subscript */ yytestcase(yyruleno==159);
      case 160: /* subscript_list ::= subscript_list COMA subscript */ yytestcase(yyruleno==160);
      case 161: /* subscript ::= COLON */ yytestcase(yyruleno==161);
      case 162: /* subscript ::= expression */ yytestcase(yyruleno==162);
      case 163: /* array_subscripts ::= OBRACKET subscript_list CBRACKET */ yytestcase(yyruleno==163);
      case 164: /* opt_annotation ::= annotation */ yytestcase(yyruleno==164);
      case 165: /* opt_annotation ::= */ yytestcase(yyruleno==165);
      case 166: /* annotation ::= ANNOTATION class_modification */ yytestcase(yyruleno==166);
      case 167: /* eq_alg_section_init ::= INITIALEQ equation_list */ yytestcase(yyruleno==167);
      case 168: /* eq_alg_section_init ::= EQUATION equation_list */ yytestcase(yyruleno==168);
      case 169: /* eq_alg_section_init ::= INITIALALG statement_list */ yytestcase(yyruleno==169);
      case 170: /* eq_alg_section_init ::= ALGORITHM statement_list */ yytestcase(yyruleno==170);
      case 171: /* equation_list ::= equation_list equation SEMICOLON */ yytestcase(yyruleno==171);
      case 172: /* equation_list ::= */ yytestcase(yyruleno==172);
      case 173: /* equation ::= simple_expression EQUAL expression comment */ yytestcase(yyruleno==173);
      case 174: /* equation ::= if_equation comment */ yytestcase(yyruleno==174);
      case 175: /* equation ::= for_equation comment */ yytestcase(yyruleno==175);
      case 176: /* equation ::= connect_clause comment */ yytestcase(yyruleno==176);
      case 177: /* equation ::= when_equation comment */ yytestcase(yyruleno==177);
      case 178: /* equation ::= primary */ yytestcase(yyruleno==178);
      case 179: /* for_indices ::= for_index opt_more_indexes */ yytestcase(yyruleno==179);
      case 180: /* opt_more_indexes ::= opt_more_indexes COMA for_index */ yytestcase(yyruleno==180);
      case 181: /* opt_more_indexes ::= */ yytestcase(yyruleno==181);
      case 182: /* for_index ::= IDENT opt_in */ yytestcase(yyruleno==182);
      case 183: /* opt_in ::= IN expression */ yytestcase(yyruleno==183);
      case 184: /* opt_in ::= */ yytestcase(yyruleno==184);
      case 185: /* for_equation ::= FOR for_indices LOOP equation_list END FOR */ yytestcase(yyruleno==185);
      case 186: /* when_equation ::= WHEN expression THEN equation_list opt_else_when END WHEN */ yytestcase(yyruleno==186);
      case 187: /* opt_else_when ::= opt_else_when ELSEWHEN expression THEN equation_list */ yytestcase(yyruleno==187);
      case 188: /* opt_else_when ::= */ yytestcase(yyruleno==188);
      case 189: /* if_equation ::= IF expression THEN equation_list opt_elseif_eq opt_else_eq END IF */ yytestcase(yyruleno==189);
      case 190: /* opt_elseif_eq ::= opt_elseif_eq ELSEIF expression THEN equation_list */ yytestcase(yyruleno==190);
      case 191: /* opt_else_eq ::= ELSE equation_list */ yytestcase(yyruleno==191);
      case 192: /* opt_else_eq ::= */ yytestcase(yyruleno==192);
      case 193: /* connect_clause ::= CONNECT OPAREN component_reference COMA component_reference CPAREN */ yytestcase(yyruleno==193);
      case 194: /* statement_list ::= statement_list statement SEMICOLON */ yytestcase(yyruleno==194);
      case 195: /* statement_list ::= */ yytestcase(yyruleno==195);
      case 196: /* statement ::= component_reference opt_assing comment */ yytestcase(yyruleno==196);
      case 197: /* statement ::= OPAREN output_expression_list CPAREN ASSING component_reference function_call_args */ yytestcase(yyruleno==197);
      case 198: /* statement ::= while_statement comment */ yytestcase(yyruleno==198);
      case 199: /* statement ::= when_statement */ yytestcase(yyruleno==199);
      case 200: /* statement ::= for_statement comment */ yytestcase(yyruleno==200);
      case 201: /* statement ::= if_statement comment */ yytestcase(yyruleno==201);
      case 202: /* statement ::= BREAK comment */ yytestcase(yyruleno==202);
      case 203: /* statement ::= RETURN comment */ yytestcase(yyruleno==203);
      case 204: /* while_statement ::= WHILE expression LOOP statement_list END WHILE */ yytestcase(yyruleno==204);
      case 205: /* when_statement ::= WHEN expression THEN statement_list opt_else_when_list END WHEN comment */ yytestcase(yyruleno==205);
      case 206: /* opt_else_when_list ::= opt_else_when_list ELSEWHEN expression THEN statement_list */ yytestcase(yyruleno==206);
      case 207: /* opt_else_when_list ::= */ yytestcase(yyruleno==207);
      case 208: /* for_statement ::= FOR for_indices LOOP statement_list END FOR */ yytestcase(yyruleno==208);
      case 209: /* if_statement ::= IF expression THEN statement_list opt_esleif_st opt_else_st END IF */ yytestcase(yyruleno==209);
      case 210: /* opt_esleif_st ::= opt_esleif_st ELSEIF expression THEN statement_list */ yytestcase(yyruleno==210);
      case 211: /* opt_esleif_st ::= */ yytestcase(yyruleno==211);
      case 212: /* opt_else_st ::= */ yytestcase(yyruleno==212);
      case 213: /* opt_else_st ::= ELSE statement_list */ yytestcase(yyruleno==213);
      case 214: /* output_expression_list ::= expression output_expression_list_more */ yytestcase(yyruleno==214);
      case 215: /* output_expression_list ::= */ yytestcase(yyruleno==215);
      case 216: /* output_expression_list_more ::= COMA opt_expression output_expression_list_more */ yytestcase(yyruleno==216);
      case 217: /* output_expression_list_more ::= */ yytestcase(yyruleno==217);
      case 218: /* opt_named_arguments ::= named_arguments */ yytestcase(yyruleno==218);
      case 219: /* opt_named_arguments ::= */ yytestcase(yyruleno==219);
      case 220: /* named_arguments ::= named_argument opt_more_args */ yytestcase(yyruleno==220);
      case 221: /* named_argument ::= IDENT EQUAL function_argument */ yytestcase(yyruleno==221);
      case 222: /* opt_more_args ::= COMA named_arguments */ yytestcase(yyruleno==222);
      case 223: /* opt_more_args ::= */ yytestcase(yyruleno==223);
      case 224: /* opt_assing ::= ASSING expression */ yytestcase(yyruleno==224);
      case 225: /* opt_assing ::= function_call_args */ yytestcase(yyruleno==225);
      case 226: /* function_argument ::= FUNCTION name OPAREN opt_named_arguments CPAREN */ yytestcase(yyruleno==226);
      case 227: /* function_argument ::= expression */ yytestcase(yyruleno==227);
      case 228: /* function_call_args ::= OPAREN opt_function_args CPAREN */ yytestcase(yyruleno==228);
      case 229: /* opt_function_args ::= function_arguments */ yytestcase(yyruleno==229);
      case 230: /* opt_function_args ::= */ yytestcase(yyruleno==230);
      case 231: /* function_arguments ::= function_argument opt_function_arguments */ yytestcase(yyruleno==231);
      case 232: /* function_arguments ::= named_argument opt_function_arguments */ yytestcase(yyruleno==232);
      case 233: /* opt_function_arguments ::= COMA function_arguments */ yytestcase(yyruleno==233);
      case 234: /* opt_function_arguments ::= COMA for_indices */ yytestcase(yyruleno==234);
      case 235: /* opt_function_arguments ::= */ yytestcase(yyruleno==235);
      case 236: /* expression ::= primary */ yytestcase(yyruleno==236);
      case 237: /* expression ::= OPAREN output_expression_list CPAREN PARENS */ yytestcase(yyruleno==237);
      case 238: /* expression ::= MINUS expression UMINUS */ yytestcase(yyruleno==238);
      case 239: /* expression ::= PLUS expression UPLUS */ yytestcase(yyruleno==239);
      case 240: /* expression ::= NOT expression */ yytestcase(yyruleno==240);
      case 241: /* expression ::= expression COLON expression */ yytestcase(yyruleno==241);
      case 242: /* expression ::= expression LOWER expression */ yytestcase(yyruleno==242);
      case 243: /* expression ::= expression LOWEREQ expression */ yytestcase(yyruleno==243);
      case 244: /* expression ::= expression GREATER expression */ yytestcase(yyruleno==244);
      case 245: /* expression ::= expression GREATEREQ expression */ yytestcase(yyruleno==245);
      case 246: /* expression ::= expression COMPNE expression */ yytestcase(yyruleno==246);
      case 247: /* expression ::= expression COMPEQ expression */ yytestcase(yyruleno==247);
      case 248: /* expression ::= expression SLASH expression */ yytestcase(yyruleno==248);
      case 249: /* expression ::= expression DOTSLASH expression */ yytestcase(yyruleno==249);
      case 250: /* expression ::= expression STAR expression */ yytestcase(yyruleno==250);
      case 251: /* expression ::= expression DOTSTAR expression */ yytestcase(yyruleno==251);
      case 252: /* expression ::= expression PLUS expression */ yytestcase(yyruleno==252);
      case 253: /* expression ::= expression MINUS expression */ yytestcase(yyruleno==253);
      case 254: /* expression ::= expression DOTPLUS expression */ yytestcase(yyruleno==254);
      case 255: /* expression ::= expression DOTMINUS expression */ yytestcase(yyruleno==255);
      case 256: /* expression ::= expression CARET expression */ yytestcase(yyruleno==256);
      case 257: /* expression ::= expression DOTCARET expression */ yytestcase(yyruleno==257);
      case 258: /* expression ::= expression AND expression */ yytestcase(yyruleno==258);
      case 259: /* expression ::= expression OR expression */ yytestcase(yyruleno==259);
      case 260: /* expression ::= IF expression THEN expression opt_elseif_exp ELSE expression */ yytestcase(yyruleno==260);
      case 261: /* opt_expression ::= expression */ yytestcase(yyruleno==261);
      case 262: /* opt_expression ::= */ yytestcase(yyruleno==262);
      case 263: /* opt_elseif_exp ::= opt_elseif_exp ELSEIF expression THEN expression */ yytestcase(yyruleno==263);
      case 264: /* opt_elseif_exp ::= */ yytestcase(yyruleno==264);
      case 265: /* primary ::= INT */ yytestcase(yyruleno==265);
      case 266: /* primary ::= FLOAT */ yytestcase(yyruleno==266);
      case 267: /* primary ::= STRING */ yytestcase(yyruleno==267);
      case 268: /* primary ::= FALSE */ yytestcase(yyruleno==268);
      case 269: /* primary ::= TRUE */ yytestcase(yyruleno==269);
      case 270: /* primary ::= DER function_call_args */ yytestcase(yyruleno==270);
      case 271: /* primary ::= INITIAL function_call_args */ yytestcase(yyruleno==271);
      case 272: /* primary ::= opt_comp_call */ yytestcase(yyruleno==272);
      case 273: /* primary ::= OBRACKET expression_list primary_exp_list CBRACKET */ yytestcase(yyruleno==273);
      case 274: /* primary ::= OBRACE function_arguments CBRACE */ yytestcase(yyruleno==274);
      case 275: /* primary ::= ENDSUB */ yytestcase(yyruleno==275);
      case 276: /* primary_exp_list ::= primary_exp_list SEMICOLON expression_list */ yytestcase(yyruleno==276);
      case 277: /* primary_exp_list ::= */ yytestcase(yyruleno==277);
      case 278: /* component_reference ::= IDENT opt_array_subscripts component_reference_list */ yytestcase(yyruleno==278);
      case 279: /* component_reference ::= DOT IDENT opt_array_subscripts component_reference_list */ yytestcase(yyruleno==279);
      case 280: /* expression_list_more ::= COMA expression_list */ yytestcase(yyruleno==280);
      case 281: /* expression_list_more ::= */ yytestcase(yyruleno==281);
      case 282: /* expression_list ::= expression expression_list_more */ yytestcase(yyruleno==282);
      case 283: /* component_reference_list ::= component_reference_list DOT IDENT opt_array_subscripts */ yytestcase(yyruleno==283);
      case 284: /* component_reference_list ::= */ yytestcase(yyruleno==284);
      case 285: /* simple_expression ::= primary */ yytestcase(yyruleno==285);
      case 286: /* simple_expression ::= OPAREN output_expression_list CPAREN PARENS */ yytestcase(yyruleno==286);
      case 287: /* simple_expression ::= MINUS expression UMINUS */ yytestcase(yyruleno==287);
      case 288: /* simple_expression ::= PLUS expression UPLUS */ yytestcase(yyruleno==288);
      case 289: /* simple_expression ::= NOT expression */ yytestcase(yyruleno==289);
      case 290: /* simple_expression ::= simple_expression COLON expression */ yytestcase(yyruleno==290);
      case 291: /* simple_expression ::= simple_expression LOWER expression */ yytestcase(yyruleno==291);
      case 292: /* simple_expression ::= simple_expression LOWEREQ expression */ yytestcase(yyruleno==292);
      case 293: /* simple_expression ::= simple_expression GREATER expression */ yytestcase(yyruleno==293);
      case 294: /* simple_expression ::= simple_expression GREATEREQ expression */ yytestcase(yyruleno==294);
      case 295: /* simple_expression ::= simple_expression COMPNE expression */ yytestcase(yyruleno==295);
      case 296: /* simple_expression ::= simple_expression COMPEQ expression */ yytestcase(yyruleno==296);
      case 297: /* simple_expression ::= simple_expression SLASH expression */ yytestcase(yyruleno==297);
      case 298: /* simple_expression ::= simple_expression DOTSLASH expression */ yytestcase(yyruleno==298);
      case 299: /* simple_expression ::= simple_expression STAR expression */ yytestcase(yyruleno==299);
      case 300: /* simple_expression ::= simple_expression DOTSTAR expression */ yytestcase(yyruleno==300);
      case 301: /* simple_expression ::= simple_expression PLUS expression */ yytestcase(yyruleno==301);
      case 302: /* simple_expression ::= simple_expression MINUS expression */ yytestcase(yyruleno==302);
      case 303: /* simple_expression ::= simple_expression DOTPLUS expression */ yytestcase(yyruleno==303);
      case 304: /* simple_expression ::= simple_expression DOTMINUS expression */ yytestcase(yyruleno==304);
      case 305: /* simple_expression ::= simple_expression CARET expression */ yytestcase(yyruleno==305);
      case 306: /* simple_expression ::= simple_expression DOTCARET expression */ yytestcase(yyruleno==306);
      case 307: /* simple_expression ::= simple_expression AND expression */ yytestcase(yyruleno==307);
      case 308: /* simple_expression ::= simple_expression OR expression */ yytestcase(yyruleno==308);
      case 309: /* more_cr ::= more_cr DOT IDENT opt_array_subscripts */ yytestcase(yyruleno==309);
      case 310: /* more_cr ::= */ yytestcase(yyruleno==310);
      case 311: /* more_comp_call ::= more_comp_call DOT IDENT */ yytestcase(yyruleno==311);
      case 312: /* more_comp_call ::= */ yytestcase(yyruleno==312);
      case 313: /* opt_comp_call ::= DOT IDENT more_comp_call */ yytestcase(yyruleno==313);
      case 314: /* opt_comp_call ::= DOT IDENT more_comp_call array_subscripts more_cr */ yytestcase(yyruleno==314);
      case 315: /* opt_comp_call ::= IDENT more_comp_call array_subscripts more_cr */ yytestcase(yyruleno==315);
      case 316: /* opt_comp_call ::= DOT IDENT more_comp_call function_call_args */ yytestcase(yyruleno==316);
      case 317: /* opt_comp_call ::= IDENT more_comp_call function_call_args FC */ yytestcase(yyruleno==317);
#line 115 "/Users/phryne/Desktop/magmaleon/src/parse/parser/lemon-parser.lm"
{ }
#line 2075 "/Users/phryne/Desktop/magmaleon/src/parse/parser/lemon-parser.c"
        break;
      case 23: /* class_prefixes ::= CLASS */
      case 24: /* class_prefixes ::= MODEL */ yytestcase(yyruleno==24);
      case 25: /* class_prefixes ::= opt_operator RECORD */ yytestcase(yyruleno==25);
      case 26: /* class_prefixes ::= BLOCK */ yytestcase(yyruleno==26);
      case 27: /* class_prefixes ::= opt_expandable CONNECTOR */ yytestcase(yyruleno==27);
      case 28: /* class_prefixes ::= TYPE */ yytestcase(yyruleno==28);
      case 29: /* class_prefixes ::= PACKAGE */ yytestcase(yyruleno==29);
      case 30: /* class_prefixes ::= opt_pure_impure_operator FUNCTION */ yytestcase(yyruleno==30);
      case 31: /* class_prefixes ::= OPERATOR */ yytestcase(yyruleno==31);
      case 32: /* opt_operator ::= OPERATOR */ yytestcase(yyruleno==32);
      case 33: /* opt_operator ::= */ yytestcase(yyruleno==33);
      case 34: /* opt_partial ::= PARTIAL */ yytestcase(yyruleno==34);
      case 35: /* opt_partial ::= */ yytestcase(yyruleno==35);
#line 130 "/Users/phryne/Desktop/magmaleon/src/parse/parser/lemon-parser.lm"
{  }
#line 2092 "/Users/phryne/Desktop/magmaleon/src/parse/parser/lemon-parser.c"
        break;
      default:
        break;
  };
  yygoto = yyRuleInfo[yyruleno].lhs;
  yysize = yyRuleInfo[yyruleno].nrhs;
  yypParser->yyidx -= yysize;
  yyact = yy_find_reduce_action(yymsp[-yysize].stateno,(YYCODETYPE)yygoto);
  if( yyact < YYNSTATE ){
#ifdef NDEBUG
    /* If we are not debugging and the reduce action popped at least
    ** one element off the stack, then we can push the new element back
    ** onto the stack here, and skip the stack overflow test in yy_shift().
    ** That gives a significant speed improvement. */
    if( yysize ){
      yypParser->yyidx++;
      yymsp -= yysize-1;
      yymsp->stateno = (YYACTIONTYPE)yyact;
      yymsp->major = (YYCODETYPE)yygoto;
      yymsp->minor = yygotominor;
    }else
#endif
    {
      yy_shift(yypParser,yyact,yygoto,&yygotominor);
    }
  }else{
    assert( yyact == YYNSTATE + YYNRULE + 1 );
    yy_accept(yypParser);
  }
}

/*
** The following code executes when the parse fails
*/
#ifndef YYNOERRORRECOVERY
static void yy_parse_failed(
  yyParser *yypParser           /* The parser */
){
  umodParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sFail!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
  umodParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}
#endif /* YYNOERRORRECOVERY */

/*
** The following code executes when a syntax error first occurs.
*/
static void yy_syntax_error(
  yyParser *yypParser,           /* The parser */
  int yymajor,                   /* The major type of the error token */
  YYMINORTYPE yyminor            /* The minor type of the error token */
){
  umodParseARG_FETCH;
#define TOKEN (yyminor.yy0)
#line 20 "/Users/phryne/Desktop/magmaleon/src/parse/parser/lemon-parser.lm"

    int n = sizeof(yyTokenName)/ sizeof(*yyTokenName);
    for (int i = 0; i< n; i++)
    {
        int a = yy_find_shift_action(yypParser, static_cast<YYCODETYPE>(i));
        if (a < YY_ERROR_ACTION)
        {
            parser->errors().push_back(yyTokenName[i]);
        }
    }
    parser->error(true);
#line 2166 "/Users/phryne/Desktop/magmaleon/src/parse/parser/lemon-parser.c"
  umodParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/*
** The following is executed when the parser accepts
*/
static void yy_accept(
  yyParser *yypParser           /* The parser */
){
  umodParseARG_FETCH;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sAccept!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yyidx>=0 ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
#line 16 "/Users/phryne/Desktop/magmaleon/src/parse/parser/lemon-parser.lm"

    std::cout<<"Parsing Complete !! \n";
#line 2188 "/Users/phryne/Desktop/magmaleon/src/parse/parser/lemon-parser.c"
  umodParseARG_STORE; /* Suppress warning about unused %extra_argument variable */
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "umodParseAlloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
void umodParse(
  void *yyp,                   /* The parser */
  int yymajor,                 /* The major token code number */
  umodParseTOKENTYPE yyminor       /* The value for the token */
  umodParseARG_PDECL               /* Optional %extra_argument parameter */
){
  YYMINORTYPE yyminorunion;
  int yyact;            /* The parser action. */
  int yyendofinput;     /* True if we are at the end of input */
#ifdef YYERRORSYMBOL
  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
#endif
  yyParser *yypParser;  /* The parser */

  /* (re)initialize the parser, if necessary */
  yypParser = (yyParser*)yyp;
  if( yypParser->yyidx<0 ){
#if YYSTACKDEPTH<=0
    if( yypParser->yystksz <=0 ){
      /*memset(&yyminorunion, 0, sizeof(yyminorunion));*/
      yyminorunion = yyzerominor;
      yyStackOverflow(yypParser, &yyminorunion);
      return;
    }
#endif
    yypParser->yyidx = 0;
    yypParser->yyerrcnt = -1;
    yypParser->yystack[0].stateno = 0;
    yypParser->yystack[0].major = 0;
  }
  yyminorunion.yy0 = yyminor;
  yyendofinput = (yymajor==0);
  umodParseARG_STORE;

#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sInput %s\n",yyTracePrompt,yyTokenName[yymajor]);
  }
#endif

  do{
    yyact = yy_find_shift_action(yypParser,(YYCODETYPE)yymajor);
    if( yyact<YYNSTATE ){
      assert( !yyendofinput );  /* Impossible to shift the $ token */
      yy_shift(yypParser,yyact,yymajor,&yyminorunion);
      yypParser->yyerrcnt--;
      yymajor = YYNOCODE;
    }else if( yyact < YYNSTATE + YYNRULE ){
      yy_reduce(yypParser,yyact-YYNSTATE);
    }else{
      assert( yyact == YY_ERROR_ACTION );
#ifdef YYERRORSYMBOL
      int yymx;
#endif
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE,"%sSyntax Error!\n",yyTracePrompt);
      }
#endif
#ifdef YYERRORSYMBOL
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".  
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( yypParser->yyerrcnt<0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yymx = yypParser->yystack[yypParser->yyidx].major;
      if( yymx==YYERRORSYMBOL || yyerrorhit ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE,"%sDiscard input token %s\n",
             yyTracePrompt,yyTokenName[yymajor]);
        }
#endif
        yy_destructor(yypParser, (YYCODETYPE)yymajor,&yyminorunion);
        yymajor = YYNOCODE;
      }else{
         while(
          yypParser->yyidx >= 0 &&
          yymx != YYERRORSYMBOL &&
          (yyact = yy_find_reduce_action(
                        yypParser->yystack[yypParser->yyidx].stateno,
                        YYERRORSYMBOL)) >= YYNSTATE
        ){
          yy_pop_parser_stack(yypParser);
        }
        if( yypParser->yyidx < 0 || yymajor==0 ){
          yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
          yy_parse_failed(yypParser);
          yymajor = YYNOCODE;
        }else if( yymx!=YYERRORSYMBOL ){
          YYMINORTYPE u2;
          u2.YYERRSYMDT = 0;
          yy_shift(yypParser,yyact,YYERRORSYMBOL,&u2);
        }
      }
      yypParser->yyerrcnt = 3;
      yyerrorhit = 1;
#elif defined(YYNOERRORRECOVERY)
      /* If the YYNOERRORRECOVERY macro is defined, then do not attempt to
      ** do any kind of error recovery.  Instead, simply invoke the syntax
      ** error routine and continue going as if nothing had happened.
      **
      ** Applications can set this macro (for example inside %include) if
      ** they intend to abandon the parse upon the first syntax error seen.
      */
      yy_syntax_error(yypParser,yymajor,yyminorunion);
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      yymajor = YYNOCODE;
      
#else  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( yypParser->yyerrcnt<=0 ){
        yy_syntax_error(yypParser,yymajor,yyminorunion);
      }
      yypParser->yyerrcnt = 3;
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      if( yyendofinput ){
        yy_parse_failed(yypParser);
      }
      yymajor = YYNOCODE;
#endif
    }
  }while( yymajor!=YYNOCODE && yypParser->yyidx>=0 );
  return;
}
