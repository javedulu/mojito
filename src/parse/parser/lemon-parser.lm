%token_prefix           UMOD_LEXEME_TYPE_
%token_type             {lex::Lexeme *}
%extra_argument         {parser::Parser *parser}
%name                   umodParse
%include {
    #include <cassert>
    #include <cstdio>
    #include <vector>
    #include <string>
    #include <iostream>
    #include "lexeme.h"
    #include "parser.h"
    using namespace umod;
}

%parse_accept {
    std::cout<<"Parsing Complete !! \n";
}

%syntax_error {
        int n = sizeof(yyTokenName)/ sizeof(*yyTokenName);
        for (int i = 0; i< n; i++)
        {
            int a = yy_find_shift_action(yypParser, static_cast<YYCODETYPE>(i));
            if (a < YY_ERROR_ACTION)
            {
                parser->errors().push_back(yyTokenName[i]);
            }
        }
        parser->error(true);
}

%stack_size 1000

%left OR.
%left AND.
%right NOT.
%left REL_OP.
%left ADD_OP_PARTIAL PLUS.
%left MUL_OP_PARTIAL DOT_STAR.
%right EXP_OP.

program ::= stored_definition.

/* B2.1 Stored Definition -- Within */
stored_definition ::= . {}
stored_definition ::= WITHIN opt_name SEMICOLON. {}
stored_definition ::= stored_definition  opt_final class_definition SEMICOLON. {}


/* B2.2 Class Defintion */
class_definition ::= opt_encapsulated class_prefixes class_specifier.{}
class_prefixes ::= opt_partial kind.{}


kind ::= CLASS.{}
kind ::= MODEL.{}
kind ::= opt_operator RECORD.{}
kind ::= BLOCK.{}
kind ::= opt_expandable CONNECTOR.{}
kind ::= TYPE.{}
kind ::= PACKAGE.{}
kind ::= opt_purity FUNCTION.{}
kind ::= opt_purity OPERATOR_FUNCTION.{}
kind ::= OPERATOR.{}


opt_purity ::= .{}
opt_purity ::= PURE.{}
opt_purity ::= IMPURE.{}

class_specifier ::= IDENT string_comment composition end_ident.{}
class_specifier ::= short_class_specifier.{}
class_specifier ::= IDENT EQUAL DER OPAREN name COMMA ident_list CPAREN comment .{}
class_specifier ::= EXTENDS IDENT opt_class_modification string_comment composition end_ident.{}

short_class_specifier ::= IDENT EQUAL base_prefix name opt_array_subscripts opt_class_modification comment .{}
short_class_specifier ::= IDENT EQUAL ENUMERATION OPAREN opt_enum_list_or_colon CPAREN comment.{}

ident_list ::= IDENT .{}
ident_list ::= ident_list COMMA IDENT.{}

end_ident ::= END_IDENT.{}

base_prefix ::= type_prefix.{}

opt_enum_list_or_colon ::= opt_enum_list.{}
opt_enum_list_or_colon ::= COLON.{}

opt_enum_list::= .{}
opt_enum_list::= enum_list.{}

enum_list ::= enumeration_literal.{}
enum_list ::= enum_list COMMA enumeration_literal.{}

enumeration_literal ::= IDENT comment.{}

composition ::= element_list section_list opt_external opt_annotation_semicolon.{}

element_list ::= .{}
element_list ::= element_list element SEMICOLON.{}

element ::= import_clause.{}
element ::= extends_clause.{}
element ::= element_decorations class_definition_or_component_clause.{}
element ::= element_decorations REPLACEABLE class_definition_or_component_clause opt_constraining_clause_comment.{}

element_decorations ::= opt_redeclare opt_final opt_inner opt_outer.{}

class_definition_or_component_clause ::= class_definition .{}
class_definition_or_component_clause ::= component_clause.{}

opt_constraining_clause_comment ::= .{}
opt_constraining_clause_comment ::= constraining_clause comment.{}

import_clause ::= IMPORT IDENT EQUAL name comment.{}
import_clause ::= IMPORT name opt_import_filter comment.{}

opt_import_filter ::= .{}
opt_import_filter ::= DOT_STAR .{}
opt_import_filter ::= DOT STAR .{}
opt_import_filter ::= DOT OBRACE import_list CBRACE.{}

import_list ::= IDENT .{}
import_list ::= IDENT COMMA import_list.{}

section_list ::= .{}
section_list ::= section_list section.{}

section ::= PUBLIC element_list.{}
section ::= PROTECTED element_list.{}
section ::= algorithm_section.{}
section ::= equation_section.{}

opt_external ::= .{}
opt_external ::= EXTERNAL opt_language_specification opt_external_function_call opt_annotation SEMICOLON.{}

opt_language_specification ::= .{}
opt_language_specification ::= STRING .{}

opt_external_function_call ::= .{}
opt_external_function_call ::= IDENT OPAREN opt_expression_list CPAREN.{}
opt_external_function_call ::= component_reference EQUAL IDENT OPAREN opt_expression_list CPAREN.{}

 /* B2.3 Extends */
extends_clause ::= EXTENDS name opt_class_modification opt_annotation.{}

opt_constraining_clause ::= .{}
opt_constraining_clause ::= constraining_clause.{}

constraining_clause ::= CONSTRAINEDBY name opt_class_modification.{}

/*B2.4 Component Clause */
component_clause ::= type_prefix type_specifier opt_array_subscripts component_list.{}

type_prefix::= flow_prefix variability_prefix causality_prefix.{}

flow_prefix ::= .{}
flow_prefix ::= FLOW .{}
flow_prefix ::= STREAM.{}

variability_prefix ::= .{}
variability_prefix ::= DISCRETE.{}
variability_prefix ::= PARAMETER.{}
variability_prefix ::= CONSTANT.{}

causality_prefix ::=.{}
causality_prefix ::= INPUT.{}
causality_prefix ::= OUTPUT.{}

type_specifier ::= name .{}

component_list ::= component_declaration .{}
component_list ::= component_list COMMA component_declaration .{}

component_declaration ::= declaration opt_condition_attribute comment.{}

declaration ::= IDENT opt_array_subscripts opt_modification .{}

opt_condition_attribute ::= .{}
opt_condition_attribute ::= IF expression.{}

/* B2.5 Modification */
opt_modification ::= .{}
opt_modification ::= modification.{}

modification ::= class_modification opt_eq_expression .{}
modification ::= EQUAL expression .{}
modification ::= ASSIGN_OP expression .{}

opt_eq_expression ::= .{}
opt_eq_expression ::= EQUAL expression.{}

opt_class_modification ::= .{}
opt_class_modification ::= class_modification.{}

class_modification ::= OPAREN opt_argument_list CPAREN .{}

opt_argument_list ::= .{}
opt_argument_list ::= argument_list .{}

argument_list ::= argument.{}
argument_list ::= argument_list COMMA argument.{}


argument ::= element_modification_or_replacable.{}
argument ::= element_redeclaration.{}

element_modification_or_replacable ::= opt_each opt_final element_modification_or_replacable_definition.{}

element_modification_or_replacable_definition ::= element_modification .{}
element_modification_or_replacable_definition ::= element_replacable.{}

element_modification ::= name opt_modification string_comment .{}

element_redeclaration ::= REDECLARE opt_each opt_final element_redeclaration_definition .{}

element_redeclaration_definition ::= short_class_definition .{}
element_redeclaration_definition ::= component_clause1.{}
element_redeclaration_definition ::= element_replacable.{}

element_replacable ::= REPLACEABLE short_class_definition opt_constraining_clause .{}
element_replacable ::= REPLACEABLE component_clause1 opt_constraining_clause .{}

component_clause1::= type_prefix type_specifier component_declaration1 .{}

component_declaration1 ::= declaration comment .{}

short_class_definition ::= class_prefixes short_class_specifier.{}

/* B2.6 Equations */
equation_section ::= INITIAL_EQUATION equation_list .{}
equation_section ::= EQUATION equation_list .{}

equation_list ::= .{}
equation_list ::= equation_list equation SEMICOLON.{}

algorithm_section ::= INITIAL_ALGORITHM statement_list .{}
algorithm_section ::= ALGORITHM statement_list .{}

statement_list ::= .{}
statement_list ::= statement_list statement SEMICOLON.{}

equation ::= simple_expression EQUAL expression comment .{}
equation ::= if_equation comment.{}
equation ::= for_equation comment.{}
equation ::= connect_clause comment.{}
equation ::= when_equation comment.{}
equation ::= fname function_call_args comment.{}

statement ::= component_reference ASSIGN_OP expression comment .{}
statement ::= component_reference function_call_args comment .{}
statement ::= OPAREN output_expression_list CPAREN ASSIGN_OP component_reference function_call_args comment .{}
statement ::= BREAK comment .{}
statement ::= RETURN comment .{}
statement ::= if_statement comment .{}
statement ::= for_statement comment .{}
statement ::= while_statement comment .{}
statement ::= when_statement comment .{}

if_equation ::= IF expression THEN equation_list elseif_equation END_IF.{}

elseif_equation ::= .{}
elseif_equation ::= ELSEIF expression THEN equation_list elseif_equation .{}
elseif_equation ::= ELSE equation_list .{}

if_statement ::= IF expression THEN statement_list elseif_statement END_IF .{}

elseif_statement ::= .{}
elseif_statement ::= ELSEIF expression THEN statement_list elseif_statement.{}
elseif_statement ::= ELSE statement_list.{}

for_equation ::= FOR for_indices LOOP equation_list END_FOR.{}

for_statement ::= FOR for_indices LOOP statement_list END_FOR .{}

for_indices ::= for_index.{}
for_indices ::= for_indices COMMA for_index.{}

for_index ::= IDENT opt_in_expression.{}

opt_in_expression ::= .{}
opt_in_expression ::= IN expression.{}

while_statement::= WHILE expression LOOP statement_list END_WHILE.{}

when_equation::= WHEN expression THEN equation_list elsewhen_equation END_WHEN.{}

elsewhen_equation ::= .{}
elsewhen_equation ::= ELSEWHEN expression THEN equation_list elsewhen_equation.{}
elsewhen_equation ::= ELSE equation_list .{}

when_statement ::= WHEN expression THEN statement_list elsewhen_statement END_WHEN .{}

elsewhen_statement ::= .{}
elsewhen_statement ::= ELSEWHEN expression THEN statement_list elsewhen_statement.{}
elsewhen_statement ::= ELSE statement_list .{}

connect_clause ::= CONNECT OPAREN component_reference COMMA component_reference CPAREN.{}

/* B2.7 Expressions */
expression ::= simple_expression.{}
expression ::= if_expression.{}

if_expression ::= IF expression THEN expression elseif_else_expression .{}
elseif_else_expression::= ELSEIF  expression THEN expression elseif_else_expression .{}
elseif_else_expression::= ELSE expression .{}

simple_expression ::= basic_expression .{}
simple_expression ::= basic_expression COLON basic_expression.{}
simple_expression ::= basic_expression COLON basic_expression COLON basic_expression.{}

basic_expression ::= primary .{}
basic_expression ::= basic_expression OR basic_expression .{}
basic_expression ::= basic_expression AND basic_expression .{}
basic_expression ::= NOT basic_expression .{}
basic_expression ::= basic_expression REL_OP basic_expression .{}
//basic_expression ::= basic_expression add_op basic_expression .{}
basic_expression ::= basic_expression ADD_OP_PARTIAL basic_expression .{}
basic_expression ::= basic_expression PLUS basic_expression .{}
//basic_expression ::= add_op basic_expression .{}
basic_expression ::= ADD_OP_PARTIAL basic_expression .{}
basic_expression ::= PLUS basic_expression .{}
//basic_expression ::= basic_expression mul_op basic_expression .{}
basic_expression ::= basic_expression MUL_OP_PARTIAL basic_expression .{}
basic_expression ::= basic_expression DOT_STAR basic_expression .{}
basic_expression ::= basic_expression EXP_OP basic_expression .{}

//add_op::= ADDOP.{}
//add_op::= PLUS.{}

//mul_op::= MUL_OP_PARTIAL.{}
//mul_op::= DOT_STAR.{}

primary ::= UNSIGNED_NUMBER.{}
primary ::= STRING.{}
primary ::= component_reference.{}
primary ::= primary_boolean.{}
primary ::= fname function_call_args.{}
primary ::= primary_operator function_call_args.{}
primary ::= OPAREN output_expression_list CPAREN .{}
primary ::= OBRACKET expression_matrix CBRACKET .{}
primary ::= OBRACE function_arguments CBRACE.{}
primary ::= END .{}

primary_boolean ::= TRUE.{}
primary_boolean ::= FALSE.{}

primary_operator ::= DER .
primary_operator ::= INITIAL .

opt_name ::= .{}
opt_name ::= name .{}

name ::= IDENT. {}
name ::= DOT IDENT.{}
name ::= name DOT IDENT. {}

fname ::= component_reference.{}

component_reference ::= IDENT opt_array_subscripts .{}
component_reference ::= DOT IDENT opt_array_subscripts .{}
component_reference ::= component_reference DOT IDENT opt_array_subscripts.{}

function_call_args ::= OPAREN opt_function_arguments CPAREN .{}

opt_function_arguments ::= .{}
opt_function_arguments ::= function_arguments .{}

function_arguments ::= function_argument.{}
function_arguments ::= function_argument COMMA function_arguments.{}
function_arguments ::= function_argument FOR for_indices .{}
function_arguments ::= named_arguments .{}

opt_named_arguments ::= .{}
opt_named_arguments ::= named_arguments.{}

named_arguments ::= named_argument.{}
named_arguments ::= named_argument COMMA named_arguments.{}

named_argument ::= IDENT EQUAL function_argument .{}
function_argument ::= FUNCTION name OPAREN opt_named_arguments CPAREN.{}
function_argument ::= expression .{}

output_expression_list ::= .{}
output_expression_list ::= expression .{}
output_expression_list ::= output_expression_list COMMA expression .{}
output_expression_list ::= output_expression_list COMMA .{}

opt_expression_list ::= .{}
opt_expression_list ::= expression_list .{}

expression_list ::= expression.{}
expression_list ::= expression_list COMMA expression.{}

expression_matrix ::= expression_list .{}
expression_matrix ::= expression_matrix SEMICOLON expression_list .{}

opt_array_subscripts ::= .{}
opt_array_subscripts ::= array_subscripts .{}

array_subscripts ::= OBRACKET subscripts CBRACKET .{}

subscripts ::= subscript.{}
subscripts ::= subscripts COMMA subscript.{}

subscript ::= expression.{}
subscript ::= COLON.{}

comment ::= string_comment opt_annotation.{}

string_comment ::= .{}
string_comment ::= string_concatenation.{}

string_concatenation ::= STRING .{}
string_concatenation ::= string_concatenation PLUS STRING.{}

opt_annotation ::=.{}
opt_annotation ::= annotation .{}

annotation ::= ANNOTATION class_modification .{}

opt_annotation_semicolon ::= .{}
opt_annotation_semicolon ::= annotation SEMICOLON.{}

opt_each ::= .{}
opt_each ::= EACH.{}
opt_encapsulated ::= .{}
opt_encapsulated ::= ENCAPSULATED .{}
opt_expandable ::= .{}
opt_expandable ::= EXPANDABLE.{}
opt_inner ::= .{}
opt_inner ::= INNER.{}
opt_final ::= .{}
opt_final ::= FINAL .{}
opt_operator ::= .{}
opt_operator ::= OPERATOR.{}
opt_outer ::= .{}
opt_outer ::= OUTER.{}
opt_partial ::= .{}
opt_partial ::= PARTIAL .{}
opt_redeclare ::= .{}
opt_redeclare ::= REDECLARE.{}
